
oled_voltmeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005470  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002954  08005530  08005530  00015530  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e84  08007e84  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08007e84  08007e84  00017e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e8c  08007e8c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e8c  08007e8c  00017e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e90  08007e90  00017e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08007e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c8  20000028  08007eb8  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  08007eb8  000205f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001269e  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f4e  00000000  00000000  000326ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000a894  00000000  00000000  00035638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a10  00000000  00000000  0003fed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001150  00000000  00000000  000408e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000169dd  00000000  00000000  00041a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012582  00000000  00000000  0005840d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f9ff  00000000  00000000  0006a98f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000fa38e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001f50  00000000  00000000  000fa3e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000028 	.word	0x20000028
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005514 	.word	0x08005514

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000002c 	.word	0x2000002c
 8000100:	08005514 	.word	0x08005514

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c10      	adds	r0, r2, #0
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	1c19      	adds	r1, r3, #0
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f001 f83d 	bl	8001494 <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f000 ff87 	bl	8001338 <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 f82f 	bl	8001494 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f825 	bl	8001494 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ffa9 	bl	80013b0 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff9f 	bl	80013b0 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_uldivmod>:
 8000480:	2b00      	cmp	r3, #0
 8000482:	d111      	bne.n	80004a8 <__aeabi_uldivmod+0x28>
 8000484:	2a00      	cmp	r2, #0
 8000486:	d10f      	bne.n	80004a8 <__aeabi_uldivmod+0x28>
 8000488:	2900      	cmp	r1, #0
 800048a:	d100      	bne.n	800048e <__aeabi_uldivmod+0xe>
 800048c:	2800      	cmp	r0, #0
 800048e:	d002      	beq.n	8000496 <__aeabi_uldivmod+0x16>
 8000490:	2100      	movs	r1, #0
 8000492:	43c9      	mvns	r1, r1
 8000494:	1c08      	adds	r0, r1, #0
 8000496:	b407      	push	{r0, r1, r2}
 8000498:	4802      	ldr	r0, [pc, #8]	; (80004a4 <__aeabi_uldivmod+0x24>)
 800049a:	a102      	add	r1, pc, #8	; (adr r1, 80004a4 <__aeabi_uldivmod+0x24>)
 800049c:	1840      	adds	r0, r0, r1
 800049e:	9002      	str	r0, [sp, #8]
 80004a0:	bd03      	pop	{r0, r1, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	ffffff5d 	.word	0xffffff5d
 80004a8:	b403      	push	{r0, r1}
 80004aa:	4668      	mov	r0, sp
 80004ac:	b501      	push	{r0, lr}
 80004ae:	9802      	ldr	r0, [sp, #8]
 80004b0:	f000 f824 	bl	80004fc <__udivmoddi4>
 80004b4:	9b01      	ldr	r3, [sp, #4]
 80004b6:	469e      	mov	lr, r3
 80004b8:	b002      	add	sp, #8
 80004ba:	bc0c      	pop	{r2, r3}
 80004bc:	4770      	bx	lr
 80004be:	46c0      	nop			; (mov r8, r8)

080004c0 <__aeabi_d2uiz>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	2200      	movs	r2, #0
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <__aeabi_d2uiz+0x38>)
 80004c6:	0004      	movs	r4, r0
 80004c8:	000d      	movs	r5, r1
 80004ca:	f7ff ffcf 	bl	800046c <__aeabi_dcmpge>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	d104      	bne.n	80004dc <__aeabi_d2uiz+0x1c>
 80004d2:	0020      	movs	r0, r4
 80004d4:	0029      	movs	r1, r5
 80004d6:	f001 fe4b 	bl	8002170 <__aeabi_d2iz>
 80004da:	bd70      	pop	{r4, r5, r6, pc}
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <__aeabi_d2uiz+0x38>)
 80004de:	2200      	movs	r2, #0
 80004e0:	0020      	movs	r0, r4
 80004e2:	0029      	movs	r1, r5
 80004e4:	f001 fab2 	bl	8001a4c <__aeabi_dsub>
 80004e8:	f001 fe42 	bl	8002170 <__aeabi_d2iz>
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	061b      	lsls	r3, r3, #24
 80004f0:	469c      	mov	ip, r3
 80004f2:	4460      	add	r0, ip
 80004f4:	e7f1      	b.n	80004da <__aeabi_d2uiz+0x1a>
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	41e00000 	.word	0x41e00000

080004fc <__udivmoddi4>:
 80004fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fe:	4657      	mov	r7, sl
 8000500:	464e      	mov	r6, r9
 8000502:	4645      	mov	r5, r8
 8000504:	46de      	mov	lr, fp
 8000506:	b5e0      	push	{r5, r6, r7, lr}
 8000508:	0004      	movs	r4, r0
 800050a:	000d      	movs	r5, r1
 800050c:	4692      	mov	sl, r2
 800050e:	4699      	mov	r9, r3
 8000510:	b083      	sub	sp, #12
 8000512:	428b      	cmp	r3, r1
 8000514:	d830      	bhi.n	8000578 <__udivmoddi4+0x7c>
 8000516:	d02d      	beq.n	8000574 <__udivmoddi4+0x78>
 8000518:	4649      	mov	r1, r9
 800051a:	4650      	mov	r0, sl
 800051c:	f001 ffa2 	bl	8002464 <__clzdi2>
 8000520:	0029      	movs	r1, r5
 8000522:	0006      	movs	r6, r0
 8000524:	0020      	movs	r0, r4
 8000526:	f001 ff9d 	bl	8002464 <__clzdi2>
 800052a:	1a33      	subs	r3, r6, r0
 800052c:	4698      	mov	r8, r3
 800052e:	3b20      	subs	r3, #32
 8000530:	469b      	mov	fp, r3
 8000532:	d433      	bmi.n	800059c <__udivmoddi4+0xa0>
 8000534:	465a      	mov	r2, fp
 8000536:	4653      	mov	r3, sl
 8000538:	4093      	lsls	r3, r2
 800053a:	4642      	mov	r2, r8
 800053c:	001f      	movs	r7, r3
 800053e:	4653      	mov	r3, sl
 8000540:	4093      	lsls	r3, r2
 8000542:	001e      	movs	r6, r3
 8000544:	42af      	cmp	r7, r5
 8000546:	d83a      	bhi.n	80005be <__udivmoddi4+0xc2>
 8000548:	42af      	cmp	r7, r5
 800054a:	d100      	bne.n	800054e <__udivmoddi4+0x52>
 800054c:	e078      	b.n	8000640 <__udivmoddi4+0x144>
 800054e:	465b      	mov	r3, fp
 8000550:	1ba4      	subs	r4, r4, r6
 8000552:	41bd      	sbcs	r5, r7
 8000554:	2b00      	cmp	r3, #0
 8000556:	da00      	bge.n	800055a <__udivmoddi4+0x5e>
 8000558:	e075      	b.n	8000646 <__udivmoddi4+0x14a>
 800055a:	2200      	movs	r2, #0
 800055c:	2300      	movs	r3, #0
 800055e:	9200      	str	r2, [sp, #0]
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	2301      	movs	r3, #1
 8000564:	465a      	mov	r2, fp
 8000566:	4093      	lsls	r3, r2
 8000568:	9301      	str	r3, [sp, #4]
 800056a:	2301      	movs	r3, #1
 800056c:	4642      	mov	r2, r8
 800056e:	4093      	lsls	r3, r2
 8000570:	9300      	str	r3, [sp, #0]
 8000572:	e028      	b.n	80005c6 <__udivmoddi4+0xca>
 8000574:	4282      	cmp	r2, r0
 8000576:	d9cf      	bls.n	8000518 <__udivmoddi4+0x1c>
 8000578:	2200      	movs	r2, #0
 800057a:	2300      	movs	r3, #0
 800057c:	9200      	str	r2, [sp, #0]
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <__udivmoddi4+0x8e>
 8000586:	601c      	str	r4, [r3, #0]
 8000588:	605d      	str	r5, [r3, #4]
 800058a:	9800      	ldr	r0, [sp, #0]
 800058c:	9901      	ldr	r1, [sp, #4]
 800058e:	b003      	add	sp, #12
 8000590:	bcf0      	pop	{r4, r5, r6, r7}
 8000592:	46bb      	mov	fp, r7
 8000594:	46b2      	mov	sl, r6
 8000596:	46a9      	mov	r9, r5
 8000598:	46a0      	mov	r8, r4
 800059a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800059c:	4642      	mov	r2, r8
 800059e:	2320      	movs	r3, #32
 80005a0:	1a9b      	subs	r3, r3, r2
 80005a2:	4652      	mov	r2, sl
 80005a4:	40da      	lsrs	r2, r3
 80005a6:	4641      	mov	r1, r8
 80005a8:	0013      	movs	r3, r2
 80005aa:	464a      	mov	r2, r9
 80005ac:	408a      	lsls	r2, r1
 80005ae:	0017      	movs	r7, r2
 80005b0:	4642      	mov	r2, r8
 80005b2:	431f      	orrs	r7, r3
 80005b4:	4653      	mov	r3, sl
 80005b6:	4093      	lsls	r3, r2
 80005b8:	001e      	movs	r6, r3
 80005ba:	42af      	cmp	r7, r5
 80005bc:	d9c4      	bls.n	8000548 <__udivmoddi4+0x4c>
 80005be:	2200      	movs	r2, #0
 80005c0:	2300      	movs	r3, #0
 80005c2:	9200      	str	r2, [sp, #0]
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	4643      	mov	r3, r8
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d0d9      	beq.n	8000580 <__udivmoddi4+0x84>
 80005cc:	07fb      	lsls	r3, r7, #31
 80005ce:	0872      	lsrs	r2, r6, #1
 80005d0:	431a      	orrs	r2, r3
 80005d2:	4646      	mov	r6, r8
 80005d4:	087b      	lsrs	r3, r7, #1
 80005d6:	e00e      	b.n	80005f6 <__udivmoddi4+0xfa>
 80005d8:	42ab      	cmp	r3, r5
 80005da:	d101      	bne.n	80005e0 <__udivmoddi4+0xe4>
 80005dc:	42a2      	cmp	r2, r4
 80005de:	d80c      	bhi.n	80005fa <__udivmoddi4+0xfe>
 80005e0:	1aa4      	subs	r4, r4, r2
 80005e2:	419d      	sbcs	r5, r3
 80005e4:	2001      	movs	r0, #1
 80005e6:	1924      	adds	r4, r4, r4
 80005e8:	416d      	adcs	r5, r5
 80005ea:	2100      	movs	r1, #0
 80005ec:	3e01      	subs	r6, #1
 80005ee:	1824      	adds	r4, r4, r0
 80005f0:	414d      	adcs	r5, r1
 80005f2:	2e00      	cmp	r6, #0
 80005f4:	d006      	beq.n	8000604 <__udivmoddi4+0x108>
 80005f6:	42ab      	cmp	r3, r5
 80005f8:	d9ee      	bls.n	80005d8 <__udivmoddi4+0xdc>
 80005fa:	3e01      	subs	r6, #1
 80005fc:	1924      	adds	r4, r4, r4
 80005fe:	416d      	adcs	r5, r5
 8000600:	2e00      	cmp	r6, #0
 8000602:	d1f8      	bne.n	80005f6 <__udivmoddi4+0xfa>
 8000604:	9800      	ldr	r0, [sp, #0]
 8000606:	9901      	ldr	r1, [sp, #4]
 8000608:	465b      	mov	r3, fp
 800060a:	1900      	adds	r0, r0, r4
 800060c:	4169      	adcs	r1, r5
 800060e:	2b00      	cmp	r3, #0
 8000610:	db24      	blt.n	800065c <__udivmoddi4+0x160>
 8000612:	002b      	movs	r3, r5
 8000614:	465a      	mov	r2, fp
 8000616:	4644      	mov	r4, r8
 8000618:	40d3      	lsrs	r3, r2
 800061a:	002a      	movs	r2, r5
 800061c:	40e2      	lsrs	r2, r4
 800061e:	001c      	movs	r4, r3
 8000620:	465b      	mov	r3, fp
 8000622:	0015      	movs	r5, r2
 8000624:	2b00      	cmp	r3, #0
 8000626:	db2a      	blt.n	800067e <__udivmoddi4+0x182>
 8000628:	0026      	movs	r6, r4
 800062a:	409e      	lsls	r6, r3
 800062c:	0033      	movs	r3, r6
 800062e:	0026      	movs	r6, r4
 8000630:	4647      	mov	r7, r8
 8000632:	40be      	lsls	r6, r7
 8000634:	0032      	movs	r2, r6
 8000636:	1a80      	subs	r0, r0, r2
 8000638:	4199      	sbcs	r1, r3
 800063a:	9000      	str	r0, [sp, #0]
 800063c:	9101      	str	r1, [sp, #4]
 800063e:	e79f      	b.n	8000580 <__udivmoddi4+0x84>
 8000640:	42a3      	cmp	r3, r4
 8000642:	d8bc      	bhi.n	80005be <__udivmoddi4+0xc2>
 8000644:	e783      	b.n	800054e <__udivmoddi4+0x52>
 8000646:	4642      	mov	r2, r8
 8000648:	2320      	movs	r3, #32
 800064a:	2100      	movs	r1, #0
 800064c:	1a9b      	subs	r3, r3, r2
 800064e:	2200      	movs	r2, #0
 8000650:	9100      	str	r1, [sp, #0]
 8000652:	9201      	str	r2, [sp, #4]
 8000654:	2201      	movs	r2, #1
 8000656:	40da      	lsrs	r2, r3
 8000658:	9201      	str	r2, [sp, #4]
 800065a:	e786      	b.n	800056a <__udivmoddi4+0x6e>
 800065c:	4642      	mov	r2, r8
 800065e:	2320      	movs	r3, #32
 8000660:	1a9b      	subs	r3, r3, r2
 8000662:	002a      	movs	r2, r5
 8000664:	4646      	mov	r6, r8
 8000666:	409a      	lsls	r2, r3
 8000668:	0023      	movs	r3, r4
 800066a:	40f3      	lsrs	r3, r6
 800066c:	4644      	mov	r4, r8
 800066e:	4313      	orrs	r3, r2
 8000670:	002a      	movs	r2, r5
 8000672:	40e2      	lsrs	r2, r4
 8000674:	001c      	movs	r4, r3
 8000676:	465b      	mov	r3, fp
 8000678:	0015      	movs	r5, r2
 800067a:	2b00      	cmp	r3, #0
 800067c:	dad4      	bge.n	8000628 <__udivmoddi4+0x12c>
 800067e:	4642      	mov	r2, r8
 8000680:	002f      	movs	r7, r5
 8000682:	2320      	movs	r3, #32
 8000684:	0026      	movs	r6, r4
 8000686:	4097      	lsls	r7, r2
 8000688:	1a9b      	subs	r3, r3, r2
 800068a:	40de      	lsrs	r6, r3
 800068c:	003b      	movs	r3, r7
 800068e:	4333      	orrs	r3, r6
 8000690:	e7cd      	b.n	800062e <__udivmoddi4+0x132>
 8000692:	46c0      	nop			; (mov r8, r8)

08000694 <__aeabi_dadd>:
 8000694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000696:	464f      	mov	r7, r9
 8000698:	46d6      	mov	lr, sl
 800069a:	4646      	mov	r6, r8
 800069c:	000d      	movs	r5, r1
 800069e:	0001      	movs	r1, r0
 80006a0:	0018      	movs	r0, r3
 80006a2:	b5c0      	push	{r6, r7, lr}
 80006a4:	0017      	movs	r7, r2
 80006a6:	032b      	lsls	r3, r5, #12
 80006a8:	0a5a      	lsrs	r2, r3, #9
 80006aa:	0f4b      	lsrs	r3, r1, #29
 80006ac:	4313      	orrs	r3, r2
 80006ae:	00ca      	lsls	r2, r1, #3
 80006b0:	4691      	mov	r9, r2
 80006b2:	0302      	lsls	r2, r0, #12
 80006b4:	006e      	lsls	r6, r5, #1
 80006b6:	0041      	lsls	r1, r0, #1
 80006b8:	0a52      	lsrs	r2, r2, #9
 80006ba:	0fec      	lsrs	r4, r5, #31
 80006bc:	0f7d      	lsrs	r5, r7, #29
 80006be:	4315      	orrs	r5, r2
 80006c0:	0d76      	lsrs	r6, r6, #21
 80006c2:	0d49      	lsrs	r1, r1, #21
 80006c4:	0fc0      	lsrs	r0, r0, #31
 80006c6:	4682      	mov	sl, r0
 80006c8:	46ac      	mov	ip, r5
 80006ca:	00ff      	lsls	r7, r7, #3
 80006cc:	1a72      	subs	r2, r6, r1
 80006ce:	4284      	cmp	r4, r0
 80006d0:	d100      	bne.n	80006d4 <__aeabi_dadd+0x40>
 80006d2:	e098      	b.n	8000806 <__aeabi_dadd+0x172>
 80006d4:	2a00      	cmp	r2, #0
 80006d6:	dc00      	bgt.n	80006da <__aeabi_dadd+0x46>
 80006d8:	e081      	b.n	80007de <__aeabi_dadd+0x14a>
 80006da:	2900      	cmp	r1, #0
 80006dc:	d100      	bne.n	80006e0 <__aeabi_dadd+0x4c>
 80006de:	e0b6      	b.n	800084e <__aeabi_dadd+0x1ba>
 80006e0:	49c9      	ldr	r1, [pc, #804]	; (8000a08 <__aeabi_dadd+0x374>)
 80006e2:	428e      	cmp	r6, r1
 80006e4:	d100      	bne.n	80006e8 <__aeabi_dadd+0x54>
 80006e6:	e172      	b.n	80009ce <__aeabi_dadd+0x33a>
 80006e8:	2180      	movs	r1, #128	; 0x80
 80006ea:	0028      	movs	r0, r5
 80006ec:	0409      	lsls	r1, r1, #16
 80006ee:	4308      	orrs	r0, r1
 80006f0:	4684      	mov	ip, r0
 80006f2:	2a38      	cmp	r2, #56	; 0x38
 80006f4:	dd00      	ble.n	80006f8 <__aeabi_dadd+0x64>
 80006f6:	e15e      	b.n	80009b6 <__aeabi_dadd+0x322>
 80006f8:	2a1f      	cmp	r2, #31
 80006fa:	dd00      	ble.n	80006fe <__aeabi_dadd+0x6a>
 80006fc:	e1ee      	b.n	8000adc <__aeabi_dadd+0x448>
 80006fe:	2020      	movs	r0, #32
 8000700:	0039      	movs	r1, r7
 8000702:	4665      	mov	r5, ip
 8000704:	1a80      	subs	r0, r0, r2
 8000706:	4087      	lsls	r7, r0
 8000708:	40d1      	lsrs	r1, r2
 800070a:	4085      	lsls	r5, r0
 800070c:	430d      	orrs	r5, r1
 800070e:	0039      	movs	r1, r7
 8000710:	1e4f      	subs	r7, r1, #1
 8000712:	41b9      	sbcs	r1, r7
 8000714:	4667      	mov	r7, ip
 8000716:	40d7      	lsrs	r7, r2
 8000718:	4329      	orrs	r1, r5
 800071a:	1bdb      	subs	r3, r3, r7
 800071c:	464a      	mov	r2, r9
 800071e:	1a55      	subs	r5, r2, r1
 8000720:	45a9      	cmp	r9, r5
 8000722:	4189      	sbcs	r1, r1
 8000724:	4249      	negs	r1, r1
 8000726:	1a5b      	subs	r3, r3, r1
 8000728:	4698      	mov	r8, r3
 800072a:	4643      	mov	r3, r8
 800072c:	021b      	lsls	r3, r3, #8
 800072e:	d400      	bmi.n	8000732 <__aeabi_dadd+0x9e>
 8000730:	e0cc      	b.n	80008cc <__aeabi_dadd+0x238>
 8000732:	4643      	mov	r3, r8
 8000734:	025b      	lsls	r3, r3, #9
 8000736:	0a5b      	lsrs	r3, r3, #9
 8000738:	4698      	mov	r8, r3
 800073a:	4643      	mov	r3, r8
 800073c:	2b00      	cmp	r3, #0
 800073e:	d100      	bne.n	8000742 <__aeabi_dadd+0xae>
 8000740:	e12c      	b.n	800099c <__aeabi_dadd+0x308>
 8000742:	4640      	mov	r0, r8
 8000744:	f001 fe70 	bl	8002428 <__clzsi2>
 8000748:	0001      	movs	r1, r0
 800074a:	3908      	subs	r1, #8
 800074c:	2220      	movs	r2, #32
 800074e:	0028      	movs	r0, r5
 8000750:	4643      	mov	r3, r8
 8000752:	1a52      	subs	r2, r2, r1
 8000754:	408b      	lsls	r3, r1
 8000756:	40d0      	lsrs	r0, r2
 8000758:	408d      	lsls	r5, r1
 800075a:	4303      	orrs	r3, r0
 800075c:	428e      	cmp	r6, r1
 800075e:	dd00      	ble.n	8000762 <__aeabi_dadd+0xce>
 8000760:	e117      	b.n	8000992 <__aeabi_dadd+0x2fe>
 8000762:	1b8e      	subs	r6, r1, r6
 8000764:	1c72      	adds	r2, r6, #1
 8000766:	2a1f      	cmp	r2, #31
 8000768:	dd00      	ble.n	800076c <__aeabi_dadd+0xd8>
 800076a:	e1a7      	b.n	8000abc <__aeabi_dadd+0x428>
 800076c:	2120      	movs	r1, #32
 800076e:	0018      	movs	r0, r3
 8000770:	002e      	movs	r6, r5
 8000772:	1a89      	subs	r1, r1, r2
 8000774:	408d      	lsls	r5, r1
 8000776:	4088      	lsls	r0, r1
 8000778:	40d6      	lsrs	r6, r2
 800077a:	40d3      	lsrs	r3, r2
 800077c:	1e69      	subs	r1, r5, #1
 800077e:	418d      	sbcs	r5, r1
 8000780:	4330      	orrs	r0, r6
 8000782:	4698      	mov	r8, r3
 8000784:	2600      	movs	r6, #0
 8000786:	4305      	orrs	r5, r0
 8000788:	076b      	lsls	r3, r5, #29
 800078a:	d009      	beq.n	80007a0 <__aeabi_dadd+0x10c>
 800078c:	230f      	movs	r3, #15
 800078e:	402b      	ands	r3, r5
 8000790:	2b04      	cmp	r3, #4
 8000792:	d005      	beq.n	80007a0 <__aeabi_dadd+0x10c>
 8000794:	1d2b      	adds	r3, r5, #4
 8000796:	42ab      	cmp	r3, r5
 8000798:	41ad      	sbcs	r5, r5
 800079a:	426d      	negs	r5, r5
 800079c:	44a8      	add	r8, r5
 800079e:	001d      	movs	r5, r3
 80007a0:	4643      	mov	r3, r8
 80007a2:	021b      	lsls	r3, r3, #8
 80007a4:	d400      	bmi.n	80007a8 <__aeabi_dadd+0x114>
 80007a6:	e094      	b.n	80008d2 <__aeabi_dadd+0x23e>
 80007a8:	4b97      	ldr	r3, [pc, #604]	; (8000a08 <__aeabi_dadd+0x374>)
 80007aa:	1c72      	adds	r2, r6, #1
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d100      	bne.n	80007b2 <__aeabi_dadd+0x11e>
 80007b0:	e09d      	b.n	80008ee <__aeabi_dadd+0x25a>
 80007b2:	4641      	mov	r1, r8
 80007b4:	4b95      	ldr	r3, [pc, #596]	; (8000a0c <__aeabi_dadd+0x378>)
 80007b6:	08ed      	lsrs	r5, r5, #3
 80007b8:	4019      	ands	r1, r3
 80007ba:	000b      	movs	r3, r1
 80007bc:	0552      	lsls	r2, r2, #21
 80007be:	0749      	lsls	r1, r1, #29
 80007c0:	025b      	lsls	r3, r3, #9
 80007c2:	4329      	orrs	r1, r5
 80007c4:	0b1b      	lsrs	r3, r3, #12
 80007c6:	0d52      	lsrs	r2, r2, #21
 80007c8:	0512      	lsls	r2, r2, #20
 80007ca:	4313      	orrs	r3, r2
 80007cc:	07e4      	lsls	r4, r4, #31
 80007ce:	4323      	orrs	r3, r4
 80007d0:	0008      	movs	r0, r1
 80007d2:	0019      	movs	r1, r3
 80007d4:	bce0      	pop	{r5, r6, r7}
 80007d6:	46ba      	mov	sl, r7
 80007d8:	46b1      	mov	r9, r6
 80007da:	46a8      	mov	r8, r5
 80007dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007de:	2a00      	cmp	r2, #0
 80007e0:	d043      	beq.n	800086a <__aeabi_dadd+0x1d6>
 80007e2:	1b8a      	subs	r2, r1, r6
 80007e4:	2e00      	cmp	r6, #0
 80007e6:	d000      	beq.n	80007ea <__aeabi_dadd+0x156>
 80007e8:	e12a      	b.n	8000a40 <__aeabi_dadd+0x3ac>
 80007ea:	464c      	mov	r4, r9
 80007ec:	431c      	orrs	r4, r3
 80007ee:	d100      	bne.n	80007f2 <__aeabi_dadd+0x15e>
 80007f0:	e1d1      	b.n	8000b96 <__aeabi_dadd+0x502>
 80007f2:	1e54      	subs	r4, r2, #1
 80007f4:	2a01      	cmp	r2, #1
 80007f6:	d100      	bne.n	80007fa <__aeabi_dadd+0x166>
 80007f8:	e21f      	b.n	8000c3a <__aeabi_dadd+0x5a6>
 80007fa:	4d83      	ldr	r5, [pc, #524]	; (8000a08 <__aeabi_dadd+0x374>)
 80007fc:	42aa      	cmp	r2, r5
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x16e>
 8000800:	e272      	b.n	8000ce8 <__aeabi_dadd+0x654>
 8000802:	0022      	movs	r2, r4
 8000804:	e123      	b.n	8000a4e <__aeabi_dadd+0x3ba>
 8000806:	2a00      	cmp	r2, #0
 8000808:	dc00      	bgt.n	800080c <__aeabi_dadd+0x178>
 800080a:	e098      	b.n	800093e <__aeabi_dadd+0x2aa>
 800080c:	2900      	cmp	r1, #0
 800080e:	d042      	beq.n	8000896 <__aeabi_dadd+0x202>
 8000810:	497d      	ldr	r1, [pc, #500]	; (8000a08 <__aeabi_dadd+0x374>)
 8000812:	428e      	cmp	r6, r1
 8000814:	d100      	bne.n	8000818 <__aeabi_dadd+0x184>
 8000816:	e0da      	b.n	80009ce <__aeabi_dadd+0x33a>
 8000818:	2180      	movs	r1, #128	; 0x80
 800081a:	0028      	movs	r0, r5
 800081c:	0409      	lsls	r1, r1, #16
 800081e:	4308      	orrs	r0, r1
 8000820:	4684      	mov	ip, r0
 8000822:	2a38      	cmp	r2, #56	; 0x38
 8000824:	dd00      	ble.n	8000828 <__aeabi_dadd+0x194>
 8000826:	e129      	b.n	8000a7c <__aeabi_dadd+0x3e8>
 8000828:	2a1f      	cmp	r2, #31
 800082a:	dc00      	bgt.n	800082e <__aeabi_dadd+0x19a>
 800082c:	e187      	b.n	8000b3e <__aeabi_dadd+0x4aa>
 800082e:	0011      	movs	r1, r2
 8000830:	4665      	mov	r5, ip
 8000832:	3920      	subs	r1, #32
 8000834:	40cd      	lsrs	r5, r1
 8000836:	2a20      	cmp	r2, #32
 8000838:	d004      	beq.n	8000844 <__aeabi_dadd+0x1b0>
 800083a:	2040      	movs	r0, #64	; 0x40
 800083c:	4661      	mov	r1, ip
 800083e:	1a82      	subs	r2, r0, r2
 8000840:	4091      	lsls	r1, r2
 8000842:	430f      	orrs	r7, r1
 8000844:	0039      	movs	r1, r7
 8000846:	1e4f      	subs	r7, r1, #1
 8000848:	41b9      	sbcs	r1, r7
 800084a:	430d      	orrs	r5, r1
 800084c:	e11b      	b.n	8000a86 <__aeabi_dadd+0x3f2>
 800084e:	0029      	movs	r1, r5
 8000850:	4339      	orrs	r1, r7
 8000852:	d100      	bne.n	8000856 <__aeabi_dadd+0x1c2>
 8000854:	e0b5      	b.n	80009c2 <__aeabi_dadd+0x32e>
 8000856:	1e51      	subs	r1, r2, #1
 8000858:	2a01      	cmp	r2, #1
 800085a:	d100      	bne.n	800085e <__aeabi_dadd+0x1ca>
 800085c:	e1ab      	b.n	8000bb6 <__aeabi_dadd+0x522>
 800085e:	486a      	ldr	r0, [pc, #424]	; (8000a08 <__aeabi_dadd+0x374>)
 8000860:	4282      	cmp	r2, r0
 8000862:	d100      	bne.n	8000866 <__aeabi_dadd+0x1d2>
 8000864:	e1b2      	b.n	8000bcc <__aeabi_dadd+0x538>
 8000866:	000a      	movs	r2, r1
 8000868:	e743      	b.n	80006f2 <__aeabi_dadd+0x5e>
 800086a:	4969      	ldr	r1, [pc, #420]	; (8000a10 <__aeabi_dadd+0x37c>)
 800086c:	1c75      	adds	r5, r6, #1
 800086e:	420d      	tst	r5, r1
 8000870:	d000      	beq.n	8000874 <__aeabi_dadd+0x1e0>
 8000872:	e0cf      	b.n	8000a14 <__aeabi_dadd+0x380>
 8000874:	2e00      	cmp	r6, #0
 8000876:	d000      	beq.n	800087a <__aeabi_dadd+0x1e6>
 8000878:	e193      	b.n	8000ba2 <__aeabi_dadd+0x50e>
 800087a:	4649      	mov	r1, r9
 800087c:	4319      	orrs	r1, r3
 800087e:	d100      	bne.n	8000882 <__aeabi_dadd+0x1ee>
 8000880:	e1d1      	b.n	8000c26 <__aeabi_dadd+0x592>
 8000882:	4661      	mov	r1, ip
 8000884:	4339      	orrs	r1, r7
 8000886:	d000      	beq.n	800088a <__aeabi_dadd+0x1f6>
 8000888:	e1e3      	b.n	8000c52 <__aeabi_dadd+0x5be>
 800088a:	4649      	mov	r1, r9
 800088c:	0758      	lsls	r0, r3, #29
 800088e:	08c9      	lsrs	r1, r1, #3
 8000890:	4301      	orrs	r1, r0
 8000892:	08db      	lsrs	r3, r3, #3
 8000894:	e026      	b.n	80008e4 <__aeabi_dadd+0x250>
 8000896:	0029      	movs	r1, r5
 8000898:	4339      	orrs	r1, r7
 800089a:	d100      	bne.n	800089e <__aeabi_dadd+0x20a>
 800089c:	e091      	b.n	80009c2 <__aeabi_dadd+0x32e>
 800089e:	1e51      	subs	r1, r2, #1
 80008a0:	2a01      	cmp	r2, #1
 80008a2:	d005      	beq.n	80008b0 <__aeabi_dadd+0x21c>
 80008a4:	4858      	ldr	r0, [pc, #352]	; (8000a08 <__aeabi_dadd+0x374>)
 80008a6:	4282      	cmp	r2, r0
 80008a8:	d100      	bne.n	80008ac <__aeabi_dadd+0x218>
 80008aa:	e18f      	b.n	8000bcc <__aeabi_dadd+0x538>
 80008ac:	000a      	movs	r2, r1
 80008ae:	e7b8      	b.n	8000822 <__aeabi_dadd+0x18e>
 80008b0:	003d      	movs	r5, r7
 80008b2:	444d      	add	r5, r9
 80008b4:	454d      	cmp	r5, r9
 80008b6:	4189      	sbcs	r1, r1
 80008b8:	4463      	add	r3, ip
 80008ba:	4698      	mov	r8, r3
 80008bc:	4249      	negs	r1, r1
 80008be:	4488      	add	r8, r1
 80008c0:	4643      	mov	r3, r8
 80008c2:	2602      	movs	r6, #2
 80008c4:	021b      	lsls	r3, r3, #8
 80008c6:	d500      	bpl.n	80008ca <__aeabi_dadd+0x236>
 80008c8:	e0eb      	b.n	8000aa2 <__aeabi_dadd+0x40e>
 80008ca:	3e01      	subs	r6, #1
 80008cc:	076b      	lsls	r3, r5, #29
 80008ce:	d000      	beq.n	80008d2 <__aeabi_dadd+0x23e>
 80008d0:	e75c      	b.n	800078c <__aeabi_dadd+0xf8>
 80008d2:	4643      	mov	r3, r8
 80008d4:	08e9      	lsrs	r1, r5, #3
 80008d6:	075a      	lsls	r2, r3, #29
 80008d8:	4311      	orrs	r1, r2
 80008da:	0032      	movs	r2, r6
 80008dc:	08db      	lsrs	r3, r3, #3
 80008de:	484a      	ldr	r0, [pc, #296]	; (8000a08 <__aeabi_dadd+0x374>)
 80008e0:	4282      	cmp	r2, r0
 80008e2:	d021      	beq.n	8000928 <__aeabi_dadd+0x294>
 80008e4:	031b      	lsls	r3, r3, #12
 80008e6:	0552      	lsls	r2, r2, #21
 80008e8:	0b1b      	lsrs	r3, r3, #12
 80008ea:	0d52      	lsrs	r2, r2, #21
 80008ec:	e76c      	b.n	80007c8 <__aeabi_dadd+0x134>
 80008ee:	2300      	movs	r3, #0
 80008f0:	2100      	movs	r1, #0
 80008f2:	e769      	b.n	80007c8 <__aeabi_dadd+0x134>
 80008f4:	002a      	movs	r2, r5
 80008f6:	433a      	orrs	r2, r7
 80008f8:	d069      	beq.n	80009ce <__aeabi_dadd+0x33a>
 80008fa:	464a      	mov	r2, r9
 80008fc:	0758      	lsls	r0, r3, #29
 80008fe:	08d1      	lsrs	r1, r2, #3
 8000900:	08da      	lsrs	r2, r3, #3
 8000902:	2380      	movs	r3, #128	; 0x80
 8000904:	031b      	lsls	r3, r3, #12
 8000906:	4308      	orrs	r0, r1
 8000908:	421a      	tst	r2, r3
 800090a:	d007      	beq.n	800091c <__aeabi_dadd+0x288>
 800090c:	0029      	movs	r1, r5
 800090e:	08ed      	lsrs	r5, r5, #3
 8000910:	421d      	tst	r5, r3
 8000912:	d103      	bne.n	800091c <__aeabi_dadd+0x288>
 8000914:	002a      	movs	r2, r5
 8000916:	08ff      	lsrs	r7, r7, #3
 8000918:	0748      	lsls	r0, r1, #29
 800091a:	4338      	orrs	r0, r7
 800091c:	0f43      	lsrs	r3, r0, #29
 800091e:	00c1      	lsls	r1, r0, #3
 8000920:	075b      	lsls	r3, r3, #29
 8000922:	08c9      	lsrs	r1, r1, #3
 8000924:	4319      	orrs	r1, r3
 8000926:	0013      	movs	r3, r2
 8000928:	000a      	movs	r2, r1
 800092a:	431a      	orrs	r2, r3
 800092c:	d100      	bne.n	8000930 <__aeabi_dadd+0x29c>
 800092e:	e213      	b.n	8000d58 <__aeabi_dadd+0x6c4>
 8000930:	2280      	movs	r2, #128	; 0x80
 8000932:	0312      	lsls	r2, r2, #12
 8000934:	4313      	orrs	r3, r2
 8000936:	031b      	lsls	r3, r3, #12
 8000938:	4a33      	ldr	r2, [pc, #204]	; (8000a08 <__aeabi_dadd+0x374>)
 800093a:	0b1b      	lsrs	r3, r3, #12
 800093c:	e744      	b.n	80007c8 <__aeabi_dadd+0x134>
 800093e:	2a00      	cmp	r2, #0
 8000940:	d04b      	beq.n	80009da <__aeabi_dadd+0x346>
 8000942:	1b8a      	subs	r2, r1, r6
 8000944:	2e00      	cmp	r6, #0
 8000946:	d100      	bne.n	800094a <__aeabi_dadd+0x2b6>
 8000948:	e0e7      	b.n	8000b1a <__aeabi_dadd+0x486>
 800094a:	482f      	ldr	r0, [pc, #188]	; (8000a08 <__aeabi_dadd+0x374>)
 800094c:	4281      	cmp	r1, r0
 800094e:	d100      	bne.n	8000952 <__aeabi_dadd+0x2be>
 8000950:	e195      	b.n	8000c7e <__aeabi_dadd+0x5ea>
 8000952:	2080      	movs	r0, #128	; 0x80
 8000954:	0400      	lsls	r0, r0, #16
 8000956:	4303      	orrs	r3, r0
 8000958:	2a38      	cmp	r2, #56	; 0x38
 800095a:	dd00      	ble.n	800095e <__aeabi_dadd+0x2ca>
 800095c:	e143      	b.n	8000be6 <__aeabi_dadd+0x552>
 800095e:	2a1f      	cmp	r2, #31
 8000960:	dd00      	ble.n	8000964 <__aeabi_dadd+0x2d0>
 8000962:	e1db      	b.n	8000d1c <__aeabi_dadd+0x688>
 8000964:	2020      	movs	r0, #32
 8000966:	001d      	movs	r5, r3
 8000968:	464e      	mov	r6, r9
 800096a:	1a80      	subs	r0, r0, r2
 800096c:	4085      	lsls	r5, r0
 800096e:	40d6      	lsrs	r6, r2
 8000970:	4335      	orrs	r5, r6
 8000972:	464e      	mov	r6, r9
 8000974:	4086      	lsls	r6, r0
 8000976:	0030      	movs	r0, r6
 8000978:	40d3      	lsrs	r3, r2
 800097a:	1e46      	subs	r6, r0, #1
 800097c:	41b0      	sbcs	r0, r6
 800097e:	449c      	add	ip, r3
 8000980:	4305      	orrs	r5, r0
 8000982:	19ed      	adds	r5, r5, r7
 8000984:	42bd      	cmp	r5, r7
 8000986:	419b      	sbcs	r3, r3
 8000988:	425b      	negs	r3, r3
 800098a:	4463      	add	r3, ip
 800098c:	4698      	mov	r8, r3
 800098e:	000e      	movs	r6, r1
 8000990:	e07f      	b.n	8000a92 <__aeabi_dadd+0x3fe>
 8000992:	4a1e      	ldr	r2, [pc, #120]	; (8000a0c <__aeabi_dadd+0x378>)
 8000994:	1a76      	subs	r6, r6, r1
 8000996:	4013      	ands	r3, r2
 8000998:	4698      	mov	r8, r3
 800099a:	e6f5      	b.n	8000788 <__aeabi_dadd+0xf4>
 800099c:	0028      	movs	r0, r5
 800099e:	f001 fd43 	bl	8002428 <__clzsi2>
 80009a2:	0001      	movs	r1, r0
 80009a4:	3118      	adds	r1, #24
 80009a6:	291f      	cmp	r1, #31
 80009a8:	dc00      	bgt.n	80009ac <__aeabi_dadd+0x318>
 80009aa:	e6cf      	b.n	800074c <__aeabi_dadd+0xb8>
 80009ac:	002b      	movs	r3, r5
 80009ae:	3808      	subs	r0, #8
 80009b0:	4083      	lsls	r3, r0
 80009b2:	2500      	movs	r5, #0
 80009b4:	e6d2      	b.n	800075c <__aeabi_dadd+0xc8>
 80009b6:	4662      	mov	r2, ip
 80009b8:	433a      	orrs	r2, r7
 80009ba:	0011      	movs	r1, r2
 80009bc:	1e4f      	subs	r7, r1, #1
 80009be:	41b9      	sbcs	r1, r7
 80009c0:	e6ac      	b.n	800071c <__aeabi_dadd+0x88>
 80009c2:	4649      	mov	r1, r9
 80009c4:	0758      	lsls	r0, r3, #29
 80009c6:	08c9      	lsrs	r1, r1, #3
 80009c8:	4301      	orrs	r1, r0
 80009ca:	08db      	lsrs	r3, r3, #3
 80009cc:	e787      	b.n	80008de <__aeabi_dadd+0x24a>
 80009ce:	4649      	mov	r1, r9
 80009d0:	075a      	lsls	r2, r3, #29
 80009d2:	08c9      	lsrs	r1, r1, #3
 80009d4:	4311      	orrs	r1, r2
 80009d6:	08db      	lsrs	r3, r3, #3
 80009d8:	e7a6      	b.n	8000928 <__aeabi_dadd+0x294>
 80009da:	490d      	ldr	r1, [pc, #52]	; (8000a10 <__aeabi_dadd+0x37c>)
 80009dc:	1c70      	adds	r0, r6, #1
 80009de:	4208      	tst	r0, r1
 80009e0:	d000      	beq.n	80009e4 <__aeabi_dadd+0x350>
 80009e2:	e0bb      	b.n	8000b5c <__aeabi_dadd+0x4c8>
 80009e4:	2e00      	cmp	r6, #0
 80009e6:	d000      	beq.n	80009ea <__aeabi_dadd+0x356>
 80009e8:	e114      	b.n	8000c14 <__aeabi_dadd+0x580>
 80009ea:	4649      	mov	r1, r9
 80009ec:	4319      	orrs	r1, r3
 80009ee:	d100      	bne.n	80009f2 <__aeabi_dadd+0x35e>
 80009f0:	e175      	b.n	8000cde <__aeabi_dadd+0x64a>
 80009f2:	0029      	movs	r1, r5
 80009f4:	4339      	orrs	r1, r7
 80009f6:	d000      	beq.n	80009fa <__aeabi_dadd+0x366>
 80009f8:	e17e      	b.n	8000cf8 <__aeabi_dadd+0x664>
 80009fa:	4649      	mov	r1, r9
 80009fc:	0758      	lsls	r0, r3, #29
 80009fe:	08c9      	lsrs	r1, r1, #3
 8000a00:	4301      	orrs	r1, r0
 8000a02:	08db      	lsrs	r3, r3, #3
 8000a04:	e76e      	b.n	80008e4 <__aeabi_dadd+0x250>
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	000007ff 	.word	0x000007ff
 8000a0c:	ff7fffff 	.word	0xff7fffff
 8000a10:	000007fe 	.word	0x000007fe
 8000a14:	4649      	mov	r1, r9
 8000a16:	1bcd      	subs	r5, r1, r7
 8000a18:	4661      	mov	r1, ip
 8000a1a:	1a58      	subs	r0, r3, r1
 8000a1c:	45a9      	cmp	r9, r5
 8000a1e:	4189      	sbcs	r1, r1
 8000a20:	4249      	negs	r1, r1
 8000a22:	4688      	mov	r8, r1
 8000a24:	0001      	movs	r1, r0
 8000a26:	4640      	mov	r0, r8
 8000a28:	1a09      	subs	r1, r1, r0
 8000a2a:	4688      	mov	r8, r1
 8000a2c:	0209      	lsls	r1, r1, #8
 8000a2e:	d500      	bpl.n	8000a32 <__aeabi_dadd+0x39e>
 8000a30:	e0a6      	b.n	8000b80 <__aeabi_dadd+0x4ec>
 8000a32:	4641      	mov	r1, r8
 8000a34:	4329      	orrs	r1, r5
 8000a36:	d000      	beq.n	8000a3a <__aeabi_dadd+0x3a6>
 8000a38:	e67f      	b.n	800073a <__aeabi_dadd+0xa6>
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	2400      	movs	r4, #0
 8000a3e:	e751      	b.n	80008e4 <__aeabi_dadd+0x250>
 8000a40:	4cc7      	ldr	r4, [pc, #796]	; (8000d60 <__aeabi_dadd+0x6cc>)
 8000a42:	42a1      	cmp	r1, r4
 8000a44:	d100      	bne.n	8000a48 <__aeabi_dadd+0x3b4>
 8000a46:	e0c7      	b.n	8000bd8 <__aeabi_dadd+0x544>
 8000a48:	2480      	movs	r4, #128	; 0x80
 8000a4a:	0424      	lsls	r4, r4, #16
 8000a4c:	4323      	orrs	r3, r4
 8000a4e:	2a38      	cmp	r2, #56	; 0x38
 8000a50:	dc54      	bgt.n	8000afc <__aeabi_dadd+0x468>
 8000a52:	2a1f      	cmp	r2, #31
 8000a54:	dd00      	ble.n	8000a58 <__aeabi_dadd+0x3c4>
 8000a56:	e0cc      	b.n	8000bf2 <__aeabi_dadd+0x55e>
 8000a58:	2420      	movs	r4, #32
 8000a5a:	4648      	mov	r0, r9
 8000a5c:	1aa4      	subs	r4, r4, r2
 8000a5e:	001d      	movs	r5, r3
 8000a60:	464e      	mov	r6, r9
 8000a62:	40a0      	lsls	r0, r4
 8000a64:	40d6      	lsrs	r6, r2
 8000a66:	40a5      	lsls	r5, r4
 8000a68:	0004      	movs	r4, r0
 8000a6a:	40d3      	lsrs	r3, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	4335      	orrs	r5, r6
 8000a70:	1e66      	subs	r6, r4, #1
 8000a72:	41b4      	sbcs	r4, r6
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	469c      	mov	ip, r3
 8000a78:	4325      	orrs	r5, r4
 8000a7a:	e044      	b.n	8000b06 <__aeabi_dadd+0x472>
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	433a      	orrs	r2, r7
 8000a80:	0015      	movs	r5, r2
 8000a82:	1e6f      	subs	r7, r5, #1
 8000a84:	41bd      	sbcs	r5, r7
 8000a86:	444d      	add	r5, r9
 8000a88:	454d      	cmp	r5, r9
 8000a8a:	4189      	sbcs	r1, r1
 8000a8c:	4249      	negs	r1, r1
 8000a8e:	4688      	mov	r8, r1
 8000a90:	4498      	add	r8, r3
 8000a92:	4643      	mov	r3, r8
 8000a94:	021b      	lsls	r3, r3, #8
 8000a96:	d400      	bmi.n	8000a9a <__aeabi_dadd+0x406>
 8000a98:	e718      	b.n	80008cc <__aeabi_dadd+0x238>
 8000a9a:	4bb1      	ldr	r3, [pc, #708]	; (8000d60 <__aeabi_dadd+0x6cc>)
 8000a9c:	3601      	adds	r6, #1
 8000a9e:	429e      	cmp	r6, r3
 8000aa0:	d049      	beq.n	8000b36 <__aeabi_dadd+0x4a2>
 8000aa2:	4642      	mov	r2, r8
 8000aa4:	4baf      	ldr	r3, [pc, #700]	; (8000d64 <__aeabi_dadd+0x6d0>)
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	401a      	ands	r2, r3
 8000aaa:	0013      	movs	r3, r2
 8000aac:	086a      	lsrs	r2, r5, #1
 8000aae:	400d      	ands	r5, r1
 8000ab0:	4315      	orrs	r5, r2
 8000ab2:	07d9      	lsls	r1, r3, #31
 8000ab4:	085b      	lsrs	r3, r3, #1
 8000ab6:	4698      	mov	r8, r3
 8000ab8:	430d      	orrs	r5, r1
 8000aba:	e665      	b.n	8000788 <__aeabi_dadd+0xf4>
 8000abc:	0018      	movs	r0, r3
 8000abe:	3e1f      	subs	r6, #31
 8000ac0:	40f0      	lsrs	r0, r6
 8000ac2:	2a20      	cmp	r2, #32
 8000ac4:	d003      	beq.n	8000ace <__aeabi_dadd+0x43a>
 8000ac6:	2140      	movs	r1, #64	; 0x40
 8000ac8:	1a8a      	subs	r2, r1, r2
 8000aca:	4093      	lsls	r3, r2
 8000acc:	431d      	orrs	r5, r3
 8000ace:	1e69      	subs	r1, r5, #1
 8000ad0:	418d      	sbcs	r5, r1
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	2600      	movs	r6, #0
 8000ad6:	4698      	mov	r8, r3
 8000ad8:	4305      	orrs	r5, r0
 8000ada:	e6f7      	b.n	80008cc <__aeabi_dadd+0x238>
 8000adc:	0011      	movs	r1, r2
 8000ade:	4665      	mov	r5, ip
 8000ae0:	3920      	subs	r1, #32
 8000ae2:	40cd      	lsrs	r5, r1
 8000ae4:	2a20      	cmp	r2, #32
 8000ae6:	d004      	beq.n	8000af2 <__aeabi_dadd+0x45e>
 8000ae8:	2040      	movs	r0, #64	; 0x40
 8000aea:	4661      	mov	r1, ip
 8000aec:	1a82      	subs	r2, r0, r2
 8000aee:	4091      	lsls	r1, r2
 8000af0:	430f      	orrs	r7, r1
 8000af2:	0039      	movs	r1, r7
 8000af4:	1e4f      	subs	r7, r1, #1
 8000af6:	41b9      	sbcs	r1, r7
 8000af8:	4329      	orrs	r1, r5
 8000afa:	e60f      	b.n	800071c <__aeabi_dadd+0x88>
 8000afc:	464a      	mov	r2, r9
 8000afe:	4313      	orrs	r3, r2
 8000b00:	001d      	movs	r5, r3
 8000b02:	1e6b      	subs	r3, r5, #1
 8000b04:	419d      	sbcs	r5, r3
 8000b06:	1b7d      	subs	r5, r7, r5
 8000b08:	42af      	cmp	r7, r5
 8000b0a:	419b      	sbcs	r3, r3
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	425b      	negs	r3, r3
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	4698      	mov	r8, r3
 8000b14:	4654      	mov	r4, sl
 8000b16:	000e      	movs	r6, r1
 8000b18:	e607      	b.n	800072a <__aeabi_dadd+0x96>
 8000b1a:	4648      	mov	r0, r9
 8000b1c:	4318      	orrs	r0, r3
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_dadd+0x48e>
 8000b20:	e0b3      	b.n	8000c8a <__aeabi_dadd+0x5f6>
 8000b22:	1e50      	subs	r0, r2, #1
 8000b24:	2a01      	cmp	r2, #1
 8000b26:	d100      	bne.n	8000b2a <__aeabi_dadd+0x496>
 8000b28:	e10d      	b.n	8000d46 <__aeabi_dadd+0x6b2>
 8000b2a:	4d8d      	ldr	r5, [pc, #564]	; (8000d60 <__aeabi_dadd+0x6cc>)
 8000b2c:	42aa      	cmp	r2, r5
 8000b2e:	d100      	bne.n	8000b32 <__aeabi_dadd+0x49e>
 8000b30:	e0a5      	b.n	8000c7e <__aeabi_dadd+0x5ea>
 8000b32:	0002      	movs	r2, r0
 8000b34:	e710      	b.n	8000958 <__aeabi_dadd+0x2c4>
 8000b36:	0032      	movs	r2, r6
 8000b38:	2300      	movs	r3, #0
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	e644      	b.n	80007c8 <__aeabi_dadd+0x134>
 8000b3e:	2120      	movs	r1, #32
 8000b40:	0038      	movs	r0, r7
 8000b42:	1a89      	subs	r1, r1, r2
 8000b44:	4665      	mov	r5, ip
 8000b46:	408f      	lsls	r7, r1
 8000b48:	408d      	lsls	r5, r1
 8000b4a:	40d0      	lsrs	r0, r2
 8000b4c:	1e79      	subs	r1, r7, #1
 8000b4e:	418f      	sbcs	r7, r1
 8000b50:	4305      	orrs	r5, r0
 8000b52:	433d      	orrs	r5, r7
 8000b54:	4667      	mov	r7, ip
 8000b56:	40d7      	lsrs	r7, r2
 8000b58:	19db      	adds	r3, r3, r7
 8000b5a:	e794      	b.n	8000a86 <__aeabi_dadd+0x3f2>
 8000b5c:	4a80      	ldr	r2, [pc, #512]	; (8000d60 <__aeabi_dadd+0x6cc>)
 8000b5e:	4290      	cmp	r0, r2
 8000b60:	d100      	bne.n	8000b64 <__aeabi_dadd+0x4d0>
 8000b62:	e0ec      	b.n	8000d3e <__aeabi_dadd+0x6aa>
 8000b64:	0039      	movs	r1, r7
 8000b66:	4449      	add	r1, r9
 8000b68:	4549      	cmp	r1, r9
 8000b6a:	4192      	sbcs	r2, r2
 8000b6c:	4463      	add	r3, ip
 8000b6e:	4252      	negs	r2, r2
 8000b70:	189b      	adds	r3, r3, r2
 8000b72:	07dd      	lsls	r5, r3, #31
 8000b74:	0849      	lsrs	r1, r1, #1
 8000b76:	085b      	lsrs	r3, r3, #1
 8000b78:	4698      	mov	r8, r3
 8000b7a:	0006      	movs	r6, r0
 8000b7c:	430d      	orrs	r5, r1
 8000b7e:	e6a5      	b.n	80008cc <__aeabi_dadd+0x238>
 8000b80:	464a      	mov	r2, r9
 8000b82:	1abd      	subs	r5, r7, r2
 8000b84:	42af      	cmp	r7, r5
 8000b86:	4189      	sbcs	r1, r1
 8000b88:	4662      	mov	r2, ip
 8000b8a:	4249      	negs	r1, r1
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	1a5b      	subs	r3, r3, r1
 8000b90:	4698      	mov	r8, r3
 8000b92:	4654      	mov	r4, sl
 8000b94:	e5d1      	b.n	800073a <__aeabi_dadd+0xa6>
 8000b96:	076c      	lsls	r4, r5, #29
 8000b98:	08f9      	lsrs	r1, r7, #3
 8000b9a:	4321      	orrs	r1, r4
 8000b9c:	08eb      	lsrs	r3, r5, #3
 8000b9e:	0004      	movs	r4, r0
 8000ba0:	e69d      	b.n	80008de <__aeabi_dadd+0x24a>
 8000ba2:	464a      	mov	r2, r9
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	d175      	bne.n	8000c94 <__aeabi_dadd+0x600>
 8000ba8:	4661      	mov	r1, ip
 8000baa:	4339      	orrs	r1, r7
 8000bac:	d114      	bne.n	8000bd8 <__aeabi_dadd+0x544>
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	2400      	movs	r4, #0
 8000bb2:	031b      	lsls	r3, r3, #12
 8000bb4:	e6bc      	b.n	8000930 <__aeabi_dadd+0x29c>
 8000bb6:	464a      	mov	r2, r9
 8000bb8:	1bd5      	subs	r5, r2, r7
 8000bba:	45a9      	cmp	r9, r5
 8000bbc:	4189      	sbcs	r1, r1
 8000bbe:	4662      	mov	r2, ip
 8000bc0:	4249      	negs	r1, r1
 8000bc2:	1a9b      	subs	r3, r3, r2
 8000bc4:	1a5b      	subs	r3, r3, r1
 8000bc6:	4698      	mov	r8, r3
 8000bc8:	2601      	movs	r6, #1
 8000bca:	e5ae      	b.n	800072a <__aeabi_dadd+0x96>
 8000bcc:	464a      	mov	r2, r9
 8000bce:	08d1      	lsrs	r1, r2, #3
 8000bd0:	075a      	lsls	r2, r3, #29
 8000bd2:	4311      	orrs	r1, r2
 8000bd4:	08db      	lsrs	r3, r3, #3
 8000bd6:	e6a7      	b.n	8000928 <__aeabi_dadd+0x294>
 8000bd8:	4663      	mov	r3, ip
 8000bda:	08f9      	lsrs	r1, r7, #3
 8000bdc:	075a      	lsls	r2, r3, #29
 8000bde:	4654      	mov	r4, sl
 8000be0:	4311      	orrs	r1, r2
 8000be2:	08db      	lsrs	r3, r3, #3
 8000be4:	e6a0      	b.n	8000928 <__aeabi_dadd+0x294>
 8000be6:	464a      	mov	r2, r9
 8000be8:	4313      	orrs	r3, r2
 8000bea:	001d      	movs	r5, r3
 8000bec:	1e6b      	subs	r3, r5, #1
 8000bee:	419d      	sbcs	r5, r3
 8000bf0:	e6c7      	b.n	8000982 <__aeabi_dadd+0x2ee>
 8000bf2:	0014      	movs	r4, r2
 8000bf4:	001e      	movs	r6, r3
 8000bf6:	3c20      	subs	r4, #32
 8000bf8:	40e6      	lsrs	r6, r4
 8000bfa:	2a20      	cmp	r2, #32
 8000bfc:	d005      	beq.n	8000c0a <__aeabi_dadd+0x576>
 8000bfe:	2440      	movs	r4, #64	; 0x40
 8000c00:	1aa2      	subs	r2, r4, r2
 8000c02:	4093      	lsls	r3, r2
 8000c04:	464a      	mov	r2, r9
 8000c06:	431a      	orrs	r2, r3
 8000c08:	4691      	mov	r9, r2
 8000c0a:	464d      	mov	r5, r9
 8000c0c:	1e6b      	subs	r3, r5, #1
 8000c0e:	419d      	sbcs	r5, r3
 8000c10:	4335      	orrs	r5, r6
 8000c12:	e778      	b.n	8000b06 <__aeabi_dadd+0x472>
 8000c14:	464a      	mov	r2, r9
 8000c16:	431a      	orrs	r2, r3
 8000c18:	d000      	beq.n	8000c1c <__aeabi_dadd+0x588>
 8000c1a:	e66b      	b.n	80008f4 <__aeabi_dadd+0x260>
 8000c1c:	076b      	lsls	r3, r5, #29
 8000c1e:	08f9      	lsrs	r1, r7, #3
 8000c20:	4319      	orrs	r1, r3
 8000c22:	08eb      	lsrs	r3, r5, #3
 8000c24:	e680      	b.n	8000928 <__aeabi_dadd+0x294>
 8000c26:	4661      	mov	r1, ip
 8000c28:	4339      	orrs	r1, r7
 8000c2a:	d054      	beq.n	8000cd6 <__aeabi_dadd+0x642>
 8000c2c:	4663      	mov	r3, ip
 8000c2e:	08f9      	lsrs	r1, r7, #3
 8000c30:	075c      	lsls	r4, r3, #29
 8000c32:	4321      	orrs	r1, r4
 8000c34:	08db      	lsrs	r3, r3, #3
 8000c36:	0004      	movs	r4, r0
 8000c38:	e654      	b.n	80008e4 <__aeabi_dadd+0x250>
 8000c3a:	464a      	mov	r2, r9
 8000c3c:	1abd      	subs	r5, r7, r2
 8000c3e:	42af      	cmp	r7, r5
 8000c40:	4189      	sbcs	r1, r1
 8000c42:	4662      	mov	r2, ip
 8000c44:	4249      	negs	r1, r1
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	4698      	mov	r8, r3
 8000c4c:	0004      	movs	r4, r0
 8000c4e:	2601      	movs	r6, #1
 8000c50:	e56b      	b.n	800072a <__aeabi_dadd+0x96>
 8000c52:	464a      	mov	r2, r9
 8000c54:	1bd5      	subs	r5, r2, r7
 8000c56:	45a9      	cmp	r9, r5
 8000c58:	4189      	sbcs	r1, r1
 8000c5a:	4662      	mov	r2, ip
 8000c5c:	4249      	negs	r1, r1
 8000c5e:	1a9a      	subs	r2, r3, r2
 8000c60:	1a52      	subs	r2, r2, r1
 8000c62:	4690      	mov	r8, r2
 8000c64:	0212      	lsls	r2, r2, #8
 8000c66:	d532      	bpl.n	8000cce <__aeabi_dadd+0x63a>
 8000c68:	464a      	mov	r2, r9
 8000c6a:	1abd      	subs	r5, r7, r2
 8000c6c:	42af      	cmp	r7, r5
 8000c6e:	4189      	sbcs	r1, r1
 8000c70:	4662      	mov	r2, ip
 8000c72:	4249      	negs	r1, r1
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	1a5b      	subs	r3, r3, r1
 8000c78:	4698      	mov	r8, r3
 8000c7a:	0004      	movs	r4, r0
 8000c7c:	e584      	b.n	8000788 <__aeabi_dadd+0xf4>
 8000c7e:	4663      	mov	r3, ip
 8000c80:	08f9      	lsrs	r1, r7, #3
 8000c82:	075a      	lsls	r2, r3, #29
 8000c84:	4311      	orrs	r1, r2
 8000c86:	08db      	lsrs	r3, r3, #3
 8000c88:	e64e      	b.n	8000928 <__aeabi_dadd+0x294>
 8000c8a:	08f9      	lsrs	r1, r7, #3
 8000c8c:	0768      	lsls	r0, r5, #29
 8000c8e:	4301      	orrs	r1, r0
 8000c90:	08eb      	lsrs	r3, r5, #3
 8000c92:	e624      	b.n	80008de <__aeabi_dadd+0x24a>
 8000c94:	4662      	mov	r2, ip
 8000c96:	433a      	orrs	r2, r7
 8000c98:	d100      	bne.n	8000c9c <__aeabi_dadd+0x608>
 8000c9a:	e698      	b.n	80009ce <__aeabi_dadd+0x33a>
 8000c9c:	464a      	mov	r2, r9
 8000c9e:	08d1      	lsrs	r1, r2, #3
 8000ca0:	075a      	lsls	r2, r3, #29
 8000ca2:	4311      	orrs	r1, r2
 8000ca4:	08da      	lsrs	r2, r3, #3
 8000ca6:	2380      	movs	r3, #128	; 0x80
 8000ca8:	031b      	lsls	r3, r3, #12
 8000caa:	421a      	tst	r2, r3
 8000cac:	d008      	beq.n	8000cc0 <__aeabi_dadd+0x62c>
 8000cae:	4660      	mov	r0, ip
 8000cb0:	08c5      	lsrs	r5, r0, #3
 8000cb2:	421d      	tst	r5, r3
 8000cb4:	d104      	bne.n	8000cc0 <__aeabi_dadd+0x62c>
 8000cb6:	4654      	mov	r4, sl
 8000cb8:	002a      	movs	r2, r5
 8000cba:	08f9      	lsrs	r1, r7, #3
 8000cbc:	0743      	lsls	r3, r0, #29
 8000cbe:	4319      	orrs	r1, r3
 8000cc0:	0f4b      	lsrs	r3, r1, #29
 8000cc2:	00c9      	lsls	r1, r1, #3
 8000cc4:	075b      	lsls	r3, r3, #29
 8000cc6:	08c9      	lsrs	r1, r1, #3
 8000cc8:	4319      	orrs	r1, r3
 8000cca:	0013      	movs	r3, r2
 8000ccc:	e62c      	b.n	8000928 <__aeabi_dadd+0x294>
 8000cce:	4641      	mov	r1, r8
 8000cd0:	4329      	orrs	r1, r5
 8000cd2:	d000      	beq.n	8000cd6 <__aeabi_dadd+0x642>
 8000cd4:	e5fa      	b.n	80008cc <__aeabi_dadd+0x238>
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	000a      	movs	r2, r1
 8000cda:	2400      	movs	r4, #0
 8000cdc:	e602      	b.n	80008e4 <__aeabi_dadd+0x250>
 8000cde:	076b      	lsls	r3, r5, #29
 8000ce0:	08f9      	lsrs	r1, r7, #3
 8000ce2:	4319      	orrs	r1, r3
 8000ce4:	08eb      	lsrs	r3, r5, #3
 8000ce6:	e5fd      	b.n	80008e4 <__aeabi_dadd+0x250>
 8000ce8:	4663      	mov	r3, ip
 8000cea:	08f9      	lsrs	r1, r7, #3
 8000cec:	075b      	lsls	r3, r3, #29
 8000cee:	4319      	orrs	r1, r3
 8000cf0:	4663      	mov	r3, ip
 8000cf2:	0004      	movs	r4, r0
 8000cf4:	08db      	lsrs	r3, r3, #3
 8000cf6:	e617      	b.n	8000928 <__aeabi_dadd+0x294>
 8000cf8:	003d      	movs	r5, r7
 8000cfa:	444d      	add	r5, r9
 8000cfc:	4463      	add	r3, ip
 8000cfe:	454d      	cmp	r5, r9
 8000d00:	4189      	sbcs	r1, r1
 8000d02:	4698      	mov	r8, r3
 8000d04:	4249      	negs	r1, r1
 8000d06:	4488      	add	r8, r1
 8000d08:	4643      	mov	r3, r8
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	d400      	bmi.n	8000d10 <__aeabi_dadd+0x67c>
 8000d0e:	e5dd      	b.n	80008cc <__aeabi_dadd+0x238>
 8000d10:	4642      	mov	r2, r8
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <__aeabi_dadd+0x6d0>)
 8000d14:	2601      	movs	r6, #1
 8000d16:	401a      	ands	r2, r3
 8000d18:	4690      	mov	r8, r2
 8000d1a:	e5d7      	b.n	80008cc <__aeabi_dadd+0x238>
 8000d1c:	0010      	movs	r0, r2
 8000d1e:	001e      	movs	r6, r3
 8000d20:	3820      	subs	r0, #32
 8000d22:	40c6      	lsrs	r6, r0
 8000d24:	2a20      	cmp	r2, #32
 8000d26:	d005      	beq.n	8000d34 <__aeabi_dadd+0x6a0>
 8000d28:	2040      	movs	r0, #64	; 0x40
 8000d2a:	1a82      	subs	r2, r0, r2
 8000d2c:	4093      	lsls	r3, r2
 8000d2e:	464a      	mov	r2, r9
 8000d30:	431a      	orrs	r2, r3
 8000d32:	4691      	mov	r9, r2
 8000d34:	464d      	mov	r5, r9
 8000d36:	1e6b      	subs	r3, r5, #1
 8000d38:	419d      	sbcs	r5, r3
 8000d3a:	4335      	orrs	r5, r6
 8000d3c:	e621      	b.n	8000982 <__aeabi_dadd+0x2ee>
 8000d3e:	0002      	movs	r2, r0
 8000d40:	2300      	movs	r3, #0
 8000d42:	2100      	movs	r1, #0
 8000d44:	e540      	b.n	80007c8 <__aeabi_dadd+0x134>
 8000d46:	464a      	mov	r2, r9
 8000d48:	19d5      	adds	r5, r2, r7
 8000d4a:	42bd      	cmp	r5, r7
 8000d4c:	4189      	sbcs	r1, r1
 8000d4e:	4463      	add	r3, ip
 8000d50:	4698      	mov	r8, r3
 8000d52:	4249      	negs	r1, r1
 8000d54:	4488      	add	r8, r1
 8000d56:	e5b3      	b.n	80008c0 <__aeabi_dadd+0x22c>
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4a01      	ldr	r2, [pc, #4]	; (8000d60 <__aeabi_dadd+0x6cc>)
 8000d5c:	000b      	movs	r3, r1
 8000d5e:	e533      	b.n	80007c8 <__aeabi_dadd+0x134>
 8000d60:	000007ff 	.word	0x000007ff
 8000d64:	ff7fffff 	.word	0xff7fffff

08000d68 <__aeabi_ddiv>:
 8000d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d6a:	4657      	mov	r7, sl
 8000d6c:	464e      	mov	r6, r9
 8000d6e:	4645      	mov	r5, r8
 8000d70:	46de      	mov	lr, fp
 8000d72:	b5e0      	push	{r5, r6, r7, lr}
 8000d74:	4681      	mov	r9, r0
 8000d76:	0005      	movs	r5, r0
 8000d78:	030c      	lsls	r4, r1, #12
 8000d7a:	0048      	lsls	r0, r1, #1
 8000d7c:	4692      	mov	sl, r2
 8000d7e:	001f      	movs	r7, r3
 8000d80:	b085      	sub	sp, #20
 8000d82:	0b24      	lsrs	r4, r4, #12
 8000d84:	0d40      	lsrs	r0, r0, #21
 8000d86:	0fce      	lsrs	r6, r1, #31
 8000d88:	2800      	cmp	r0, #0
 8000d8a:	d059      	beq.n	8000e40 <__aeabi_ddiv+0xd8>
 8000d8c:	4b87      	ldr	r3, [pc, #540]	; (8000fac <__aeabi_ddiv+0x244>)
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d100      	bne.n	8000d94 <__aeabi_ddiv+0x2c>
 8000d92:	e098      	b.n	8000ec6 <__aeabi_ddiv+0x15e>
 8000d94:	0f6b      	lsrs	r3, r5, #29
 8000d96:	00e4      	lsls	r4, r4, #3
 8000d98:	431c      	orrs	r4, r3
 8000d9a:	2380      	movs	r3, #128	; 0x80
 8000d9c:	041b      	lsls	r3, r3, #16
 8000d9e:	4323      	orrs	r3, r4
 8000da0:	4698      	mov	r8, r3
 8000da2:	4b83      	ldr	r3, [pc, #524]	; (8000fb0 <__aeabi_ddiv+0x248>)
 8000da4:	00ed      	lsls	r5, r5, #3
 8000da6:	469b      	mov	fp, r3
 8000da8:	2300      	movs	r3, #0
 8000daa:	4699      	mov	r9, r3
 8000dac:	4483      	add	fp, r0
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	033c      	lsls	r4, r7, #12
 8000db2:	007b      	lsls	r3, r7, #1
 8000db4:	4650      	mov	r0, sl
 8000db6:	0b24      	lsrs	r4, r4, #12
 8000db8:	0d5b      	lsrs	r3, r3, #21
 8000dba:	0fff      	lsrs	r7, r7, #31
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d067      	beq.n	8000e90 <__aeabi_ddiv+0x128>
 8000dc0:	4a7a      	ldr	r2, [pc, #488]	; (8000fac <__aeabi_ddiv+0x244>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d018      	beq.n	8000df8 <__aeabi_ddiv+0x90>
 8000dc6:	497a      	ldr	r1, [pc, #488]	; (8000fb0 <__aeabi_ddiv+0x248>)
 8000dc8:	0f42      	lsrs	r2, r0, #29
 8000dca:	468c      	mov	ip, r1
 8000dcc:	00e4      	lsls	r4, r4, #3
 8000dce:	4659      	mov	r1, fp
 8000dd0:	4314      	orrs	r4, r2
 8000dd2:	2280      	movs	r2, #128	; 0x80
 8000dd4:	4463      	add	r3, ip
 8000dd6:	0412      	lsls	r2, r2, #16
 8000dd8:	1acb      	subs	r3, r1, r3
 8000dda:	4314      	orrs	r4, r2
 8000ddc:	469b      	mov	fp, r3
 8000dde:	00c2      	lsls	r2, r0, #3
 8000de0:	2000      	movs	r0, #0
 8000de2:	0033      	movs	r3, r6
 8000de4:	407b      	eors	r3, r7
 8000de6:	469a      	mov	sl, r3
 8000de8:	464b      	mov	r3, r9
 8000dea:	2b0f      	cmp	r3, #15
 8000dec:	d900      	bls.n	8000df0 <__aeabi_ddiv+0x88>
 8000dee:	e0ef      	b.n	8000fd0 <__aeabi_ddiv+0x268>
 8000df0:	4970      	ldr	r1, [pc, #448]	; (8000fb4 <__aeabi_ddiv+0x24c>)
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	58cb      	ldr	r3, [r1, r3]
 8000df6:	469f      	mov	pc, r3
 8000df8:	4b6f      	ldr	r3, [pc, #444]	; (8000fb8 <__aeabi_ddiv+0x250>)
 8000dfa:	4652      	mov	r2, sl
 8000dfc:	469c      	mov	ip, r3
 8000dfe:	4322      	orrs	r2, r4
 8000e00:	44e3      	add	fp, ip
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d000      	beq.n	8000e08 <__aeabi_ddiv+0xa0>
 8000e06:	e095      	b.n	8000f34 <__aeabi_ddiv+0x1cc>
 8000e08:	4649      	mov	r1, r9
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	4319      	orrs	r1, r3
 8000e0e:	4689      	mov	r9, r1
 8000e10:	2400      	movs	r4, #0
 8000e12:	2002      	movs	r0, #2
 8000e14:	e7e5      	b.n	8000de2 <__aeabi_ddiv+0x7a>
 8000e16:	2300      	movs	r3, #0
 8000e18:	2400      	movs	r4, #0
 8000e1a:	2500      	movs	r5, #0
 8000e1c:	4652      	mov	r2, sl
 8000e1e:	051b      	lsls	r3, r3, #20
 8000e20:	4323      	orrs	r3, r4
 8000e22:	07d2      	lsls	r2, r2, #31
 8000e24:	4313      	orrs	r3, r2
 8000e26:	0028      	movs	r0, r5
 8000e28:	0019      	movs	r1, r3
 8000e2a:	b005      	add	sp, #20
 8000e2c:	bcf0      	pop	{r4, r5, r6, r7}
 8000e2e:	46bb      	mov	fp, r7
 8000e30:	46b2      	mov	sl, r6
 8000e32:	46a9      	mov	r9, r5
 8000e34:	46a0      	mov	r8, r4
 8000e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e38:	2400      	movs	r4, #0
 8000e3a:	2500      	movs	r5, #0
 8000e3c:	4b5b      	ldr	r3, [pc, #364]	; (8000fac <__aeabi_ddiv+0x244>)
 8000e3e:	e7ed      	b.n	8000e1c <__aeabi_ddiv+0xb4>
 8000e40:	464b      	mov	r3, r9
 8000e42:	4323      	orrs	r3, r4
 8000e44:	4698      	mov	r8, r3
 8000e46:	d100      	bne.n	8000e4a <__aeabi_ddiv+0xe2>
 8000e48:	e089      	b.n	8000f5e <__aeabi_ddiv+0x1f6>
 8000e4a:	2c00      	cmp	r4, #0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_ddiv+0xe8>
 8000e4e:	e1e0      	b.n	8001212 <__aeabi_ddiv+0x4aa>
 8000e50:	0020      	movs	r0, r4
 8000e52:	f001 fae9 	bl	8002428 <__clzsi2>
 8000e56:	0001      	movs	r1, r0
 8000e58:	0002      	movs	r2, r0
 8000e5a:	390b      	subs	r1, #11
 8000e5c:	231d      	movs	r3, #29
 8000e5e:	1a5b      	subs	r3, r3, r1
 8000e60:	4649      	mov	r1, r9
 8000e62:	0010      	movs	r0, r2
 8000e64:	40d9      	lsrs	r1, r3
 8000e66:	3808      	subs	r0, #8
 8000e68:	4084      	lsls	r4, r0
 8000e6a:	000b      	movs	r3, r1
 8000e6c:	464d      	mov	r5, r9
 8000e6e:	4323      	orrs	r3, r4
 8000e70:	4698      	mov	r8, r3
 8000e72:	4085      	lsls	r5, r0
 8000e74:	4851      	ldr	r0, [pc, #324]	; (8000fbc <__aeabi_ddiv+0x254>)
 8000e76:	033c      	lsls	r4, r7, #12
 8000e78:	1a83      	subs	r3, r0, r2
 8000e7a:	469b      	mov	fp, r3
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	4699      	mov	r9, r3
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	007b      	lsls	r3, r7, #1
 8000e84:	4650      	mov	r0, sl
 8000e86:	0b24      	lsrs	r4, r4, #12
 8000e88:	0d5b      	lsrs	r3, r3, #21
 8000e8a:	0fff      	lsrs	r7, r7, #31
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d197      	bne.n	8000dc0 <__aeabi_ddiv+0x58>
 8000e90:	4652      	mov	r2, sl
 8000e92:	4322      	orrs	r2, r4
 8000e94:	d055      	beq.n	8000f42 <__aeabi_ddiv+0x1da>
 8000e96:	2c00      	cmp	r4, #0
 8000e98:	d100      	bne.n	8000e9c <__aeabi_ddiv+0x134>
 8000e9a:	e1ca      	b.n	8001232 <__aeabi_ddiv+0x4ca>
 8000e9c:	0020      	movs	r0, r4
 8000e9e:	f001 fac3 	bl	8002428 <__clzsi2>
 8000ea2:	0002      	movs	r2, r0
 8000ea4:	3a0b      	subs	r2, #11
 8000ea6:	231d      	movs	r3, #29
 8000ea8:	0001      	movs	r1, r0
 8000eaa:	1a9b      	subs	r3, r3, r2
 8000eac:	4652      	mov	r2, sl
 8000eae:	3908      	subs	r1, #8
 8000eb0:	40da      	lsrs	r2, r3
 8000eb2:	408c      	lsls	r4, r1
 8000eb4:	4314      	orrs	r4, r2
 8000eb6:	4652      	mov	r2, sl
 8000eb8:	408a      	lsls	r2, r1
 8000eba:	4b41      	ldr	r3, [pc, #260]	; (8000fc0 <__aeabi_ddiv+0x258>)
 8000ebc:	4458      	add	r0, fp
 8000ebe:	469b      	mov	fp, r3
 8000ec0:	4483      	add	fp, r0
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	e78d      	b.n	8000de2 <__aeabi_ddiv+0x7a>
 8000ec6:	464b      	mov	r3, r9
 8000ec8:	4323      	orrs	r3, r4
 8000eca:	4698      	mov	r8, r3
 8000ecc:	d140      	bne.n	8000f50 <__aeabi_ddiv+0x1e8>
 8000ece:	2308      	movs	r3, #8
 8000ed0:	4699      	mov	r9, r3
 8000ed2:	3b06      	subs	r3, #6
 8000ed4:	2500      	movs	r5, #0
 8000ed6:	4683      	mov	fp, r0
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	e769      	b.n	8000db0 <__aeabi_ddiv+0x48>
 8000edc:	46b2      	mov	sl, r6
 8000ede:	9b00      	ldr	r3, [sp, #0]
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d0a9      	beq.n	8000e38 <__aeabi_ddiv+0xd0>
 8000ee4:	2b03      	cmp	r3, #3
 8000ee6:	d100      	bne.n	8000eea <__aeabi_ddiv+0x182>
 8000ee8:	e211      	b.n	800130e <__aeabi_ddiv+0x5a6>
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d093      	beq.n	8000e16 <__aeabi_ddiv+0xae>
 8000eee:	4a35      	ldr	r2, [pc, #212]	; (8000fc4 <__aeabi_ddiv+0x25c>)
 8000ef0:	445a      	add	r2, fp
 8000ef2:	2a00      	cmp	r2, #0
 8000ef4:	dc00      	bgt.n	8000ef8 <__aeabi_ddiv+0x190>
 8000ef6:	e13c      	b.n	8001172 <__aeabi_ddiv+0x40a>
 8000ef8:	076b      	lsls	r3, r5, #29
 8000efa:	d000      	beq.n	8000efe <__aeabi_ddiv+0x196>
 8000efc:	e1a7      	b.n	800124e <__aeabi_ddiv+0x4e6>
 8000efe:	08ed      	lsrs	r5, r5, #3
 8000f00:	4643      	mov	r3, r8
 8000f02:	01db      	lsls	r3, r3, #7
 8000f04:	d506      	bpl.n	8000f14 <__aeabi_ddiv+0x1ac>
 8000f06:	4642      	mov	r2, r8
 8000f08:	4b2f      	ldr	r3, [pc, #188]	; (8000fc8 <__aeabi_ddiv+0x260>)
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	4690      	mov	r8, r2
 8000f0e:	2280      	movs	r2, #128	; 0x80
 8000f10:	00d2      	lsls	r2, r2, #3
 8000f12:	445a      	add	r2, fp
 8000f14:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <__aeabi_ddiv+0x264>)
 8000f16:	429a      	cmp	r2, r3
 8000f18:	dc8e      	bgt.n	8000e38 <__aeabi_ddiv+0xd0>
 8000f1a:	4643      	mov	r3, r8
 8000f1c:	0552      	lsls	r2, r2, #21
 8000f1e:	0758      	lsls	r0, r3, #29
 8000f20:	025c      	lsls	r4, r3, #9
 8000f22:	4305      	orrs	r5, r0
 8000f24:	0b24      	lsrs	r4, r4, #12
 8000f26:	0d53      	lsrs	r3, r2, #21
 8000f28:	e778      	b.n	8000e1c <__aeabi_ddiv+0xb4>
 8000f2a:	46ba      	mov	sl, r7
 8000f2c:	46a0      	mov	r8, r4
 8000f2e:	0015      	movs	r5, r2
 8000f30:	9000      	str	r0, [sp, #0]
 8000f32:	e7d4      	b.n	8000ede <__aeabi_ddiv+0x176>
 8000f34:	464a      	mov	r2, r9
 8000f36:	2303      	movs	r3, #3
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	4691      	mov	r9, r2
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	4652      	mov	r2, sl
 8000f40:	e74f      	b.n	8000de2 <__aeabi_ddiv+0x7a>
 8000f42:	4649      	mov	r1, r9
 8000f44:	2301      	movs	r3, #1
 8000f46:	4319      	orrs	r1, r3
 8000f48:	4689      	mov	r9, r1
 8000f4a:	2400      	movs	r4, #0
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	e748      	b.n	8000de2 <__aeabi_ddiv+0x7a>
 8000f50:	230c      	movs	r3, #12
 8000f52:	4699      	mov	r9, r3
 8000f54:	3b09      	subs	r3, #9
 8000f56:	46a0      	mov	r8, r4
 8000f58:	4683      	mov	fp, r0
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	e728      	b.n	8000db0 <__aeabi_ddiv+0x48>
 8000f5e:	2304      	movs	r3, #4
 8000f60:	4699      	mov	r9, r3
 8000f62:	2300      	movs	r3, #0
 8000f64:	469b      	mov	fp, r3
 8000f66:	3301      	adds	r3, #1
 8000f68:	2500      	movs	r5, #0
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	e720      	b.n	8000db0 <__aeabi_ddiv+0x48>
 8000f6e:	2300      	movs	r3, #0
 8000f70:	2480      	movs	r4, #128	; 0x80
 8000f72:	469a      	mov	sl, r3
 8000f74:	2500      	movs	r5, #0
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <__aeabi_ddiv+0x244>)
 8000f78:	0324      	lsls	r4, r4, #12
 8000f7a:	e74f      	b.n	8000e1c <__aeabi_ddiv+0xb4>
 8000f7c:	2380      	movs	r3, #128	; 0x80
 8000f7e:	4641      	mov	r1, r8
 8000f80:	031b      	lsls	r3, r3, #12
 8000f82:	4219      	tst	r1, r3
 8000f84:	d008      	beq.n	8000f98 <__aeabi_ddiv+0x230>
 8000f86:	421c      	tst	r4, r3
 8000f88:	d106      	bne.n	8000f98 <__aeabi_ddiv+0x230>
 8000f8a:	431c      	orrs	r4, r3
 8000f8c:	0324      	lsls	r4, r4, #12
 8000f8e:	46ba      	mov	sl, r7
 8000f90:	0015      	movs	r5, r2
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <__aeabi_ddiv+0x244>)
 8000f94:	0b24      	lsrs	r4, r4, #12
 8000f96:	e741      	b.n	8000e1c <__aeabi_ddiv+0xb4>
 8000f98:	2480      	movs	r4, #128	; 0x80
 8000f9a:	4643      	mov	r3, r8
 8000f9c:	0324      	lsls	r4, r4, #12
 8000f9e:	431c      	orrs	r4, r3
 8000fa0:	0324      	lsls	r4, r4, #12
 8000fa2:	46b2      	mov	sl, r6
 8000fa4:	4b01      	ldr	r3, [pc, #4]	; (8000fac <__aeabi_ddiv+0x244>)
 8000fa6:	0b24      	lsrs	r4, r4, #12
 8000fa8:	e738      	b.n	8000e1c <__aeabi_ddiv+0xb4>
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	000007ff 	.word	0x000007ff
 8000fb0:	fffffc01 	.word	0xfffffc01
 8000fb4:	08005530 	.word	0x08005530
 8000fb8:	fffff801 	.word	0xfffff801
 8000fbc:	fffffc0d 	.word	0xfffffc0d
 8000fc0:	000003f3 	.word	0x000003f3
 8000fc4:	000003ff 	.word	0x000003ff
 8000fc8:	feffffff 	.word	0xfeffffff
 8000fcc:	000007fe 	.word	0x000007fe
 8000fd0:	4544      	cmp	r4, r8
 8000fd2:	d200      	bcs.n	8000fd6 <__aeabi_ddiv+0x26e>
 8000fd4:	e116      	b.n	8001204 <__aeabi_ddiv+0x49c>
 8000fd6:	d100      	bne.n	8000fda <__aeabi_ddiv+0x272>
 8000fd8:	e111      	b.n	80011fe <__aeabi_ddiv+0x496>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	425b      	negs	r3, r3
 8000fde:	469c      	mov	ip, r3
 8000fe0:	002e      	movs	r6, r5
 8000fe2:	4640      	mov	r0, r8
 8000fe4:	2500      	movs	r5, #0
 8000fe6:	44e3      	add	fp, ip
 8000fe8:	0223      	lsls	r3, r4, #8
 8000fea:	0e14      	lsrs	r4, r2, #24
 8000fec:	431c      	orrs	r4, r3
 8000fee:	0c1b      	lsrs	r3, r3, #16
 8000ff0:	4699      	mov	r9, r3
 8000ff2:	0423      	lsls	r3, r4, #16
 8000ff4:	0c1f      	lsrs	r7, r3, #16
 8000ff6:	0212      	lsls	r2, r2, #8
 8000ff8:	4649      	mov	r1, r9
 8000ffa:	9200      	str	r2, [sp, #0]
 8000ffc:	9701      	str	r7, [sp, #4]
 8000ffe:	f7ff f911 	bl	8000224 <__aeabi_uidivmod>
 8001002:	0002      	movs	r2, r0
 8001004:	437a      	muls	r2, r7
 8001006:	040b      	lsls	r3, r1, #16
 8001008:	0c31      	lsrs	r1, r6, #16
 800100a:	4680      	mov	r8, r0
 800100c:	4319      	orrs	r1, r3
 800100e:	428a      	cmp	r2, r1
 8001010:	d90b      	bls.n	800102a <__aeabi_ddiv+0x2c2>
 8001012:	2301      	movs	r3, #1
 8001014:	425b      	negs	r3, r3
 8001016:	469c      	mov	ip, r3
 8001018:	1909      	adds	r1, r1, r4
 800101a:	44e0      	add	r8, ip
 800101c:	428c      	cmp	r4, r1
 800101e:	d804      	bhi.n	800102a <__aeabi_ddiv+0x2c2>
 8001020:	428a      	cmp	r2, r1
 8001022:	d902      	bls.n	800102a <__aeabi_ddiv+0x2c2>
 8001024:	1e83      	subs	r3, r0, #2
 8001026:	4698      	mov	r8, r3
 8001028:	1909      	adds	r1, r1, r4
 800102a:	1a88      	subs	r0, r1, r2
 800102c:	4649      	mov	r1, r9
 800102e:	f7ff f8f9 	bl	8000224 <__aeabi_uidivmod>
 8001032:	0409      	lsls	r1, r1, #16
 8001034:	468c      	mov	ip, r1
 8001036:	0431      	lsls	r1, r6, #16
 8001038:	4666      	mov	r6, ip
 800103a:	9a01      	ldr	r2, [sp, #4]
 800103c:	0c09      	lsrs	r1, r1, #16
 800103e:	4342      	muls	r2, r0
 8001040:	0003      	movs	r3, r0
 8001042:	4331      	orrs	r1, r6
 8001044:	428a      	cmp	r2, r1
 8001046:	d904      	bls.n	8001052 <__aeabi_ddiv+0x2ea>
 8001048:	1909      	adds	r1, r1, r4
 800104a:	3b01      	subs	r3, #1
 800104c:	428c      	cmp	r4, r1
 800104e:	d800      	bhi.n	8001052 <__aeabi_ddiv+0x2ea>
 8001050:	e111      	b.n	8001276 <__aeabi_ddiv+0x50e>
 8001052:	1a89      	subs	r1, r1, r2
 8001054:	4642      	mov	r2, r8
 8001056:	9e00      	ldr	r6, [sp, #0]
 8001058:	0412      	lsls	r2, r2, #16
 800105a:	431a      	orrs	r2, r3
 800105c:	0c33      	lsrs	r3, r6, #16
 800105e:	001f      	movs	r7, r3
 8001060:	0c10      	lsrs	r0, r2, #16
 8001062:	4690      	mov	r8, r2
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	0413      	lsls	r3, r2, #16
 8001068:	0432      	lsls	r2, r6, #16
 800106a:	0c16      	lsrs	r6, r2, #16
 800106c:	0032      	movs	r2, r6
 800106e:	0c1b      	lsrs	r3, r3, #16
 8001070:	435a      	muls	r2, r3
 8001072:	9603      	str	r6, [sp, #12]
 8001074:	437b      	muls	r3, r7
 8001076:	4346      	muls	r6, r0
 8001078:	4378      	muls	r0, r7
 800107a:	0c17      	lsrs	r7, r2, #16
 800107c:	46bc      	mov	ip, r7
 800107e:	199b      	adds	r3, r3, r6
 8001080:	4463      	add	r3, ip
 8001082:	429e      	cmp	r6, r3
 8001084:	d903      	bls.n	800108e <__aeabi_ddiv+0x326>
 8001086:	2680      	movs	r6, #128	; 0x80
 8001088:	0276      	lsls	r6, r6, #9
 800108a:	46b4      	mov	ip, r6
 800108c:	4460      	add	r0, ip
 800108e:	0c1e      	lsrs	r6, r3, #16
 8001090:	1830      	adds	r0, r6, r0
 8001092:	0416      	lsls	r6, r2, #16
 8001094:	041b      	lsls	r3, r3, #16
 8001096:	0c36      	lsrs	r6, r6, #16
 8001098:	199e      	adds	r6, r3, r6
 800109a:	4281      	cmp	r1, r0
 800109c:	d200      	bcs.n	80010a0 <__aeabi_ddiv+0x338>
 800109e:	e09c      	b.n	80011da <__aeabi_ddiv+0x472>
 80010a0:	d100      	bne.n	80010a4 <__aeabi_ddiv+0x33c>
 80010a2:	e097      	b.n	80011d4 <__aeabi_ddiv+0x46c>
 80010a4:	1bae      	subs	r6, r5, r6
 80010a6:	1a09      	subs	r1, r1, r0
 80010a8:	42b5      	cmp	r5, r6
 80010aa:	4180      	sbcs	r0, r0
 80010ac:	4240      	negs	r0, r0
 80010ae:	1a08      	subs	r0, r1, r0
 80010b0:	4284      	cmp	r4, r0
 80010b2:	d100      	bne.n	80010b6 <__aeabi_ddiv+0x34e>
 80010b4:	e111      	b.n	80012da <__aeabi_ddiv+0x572>
 80010b6:	4649      	mov	r1, r9
 80010b8:	f7ff f8b4 	bl	8000224 <__aeabi_uidivmod>
 80010bc:	9a01      	ldr	r2, [sp, #4]
 80010be:	040b      	lsls	r3, r1, #16
 80010c0:	4342      	muls	r2, r0
 80010c2:	0c31      	lsrs	r1, r6, #16
 80010c4:	0005      	movs	r5, r0
 80010c6:	4319      	orrs	r1, r3
 80010c8:	428a      	cmp	r2, r1
 80010ca:	d907      	bls.n	80010dc <__aeabi_ddiv+0x374>
 80010cc:	1909      	adds	r1, r1, r4
 80010ce:	3d01      	subs	r5, #1
 80010d0:	428c      	cmp	r4, r1
 80010d2:	d803      	bhi.n	80010dc <__aeabi_ddiv+0x374>
 80010d4:	428a      	cmp	r2, r1
 80010d6:	d901      	bls.n	80010dc <__aeabi_ddiv+0x374>
 80010d8:	1e85      	subs	r5, r0, #2
 80010da:	1909      	adds	r1, r1, r4
 80010dc:	1a88      	subs	r0, r1, r2
 80010de:	4649      	mov	r1, r9
 80010e0:	f7ff f8a0 	bl	8000224 <__aeabi_uidivmod>
 80010e4:	0409      	lsls	r1, r1, #16
 80010e6:	468c      	mov	ip, r1
 80010e8:	0431      	lsls	r1, r6, #16
 80010ea:	4666      	mov	r6, ip
 80010ec:	9a01      	ldr	r2, [sp, #4]
 80010ee:	0c09      	lsrs	r1, r1, #16
 80010f0:	4342      	muls	r2, r0
 80010f2:	0003      	movs	r3, r0
 80010f4:	4331      	orrs	r1, r6
 80010f6:	428a      	cmp	r2, r1
 80010f8:	d907      	bls.n	800110a <__aeabi_ddiv+0x3a2>
 80010fa:	1909      	adds	r1, r1, r4
 80010fc:	3b01      	subs	r3, #1
 80010fe:	428c      	cmp	r4, r1
 8001100:	d803      	bhi.n	800110a <__aeabi_ddiv+0x3a2>
 8001102:	428a      	cmp	r2, r1
 8001104:	d901      	bls.n	800110a <__aeabi_ddiv+0x3a2>
 8001106:	1e83      	subs	r3, r0, #2
 8001108:	1909      	adds	r1, r1, r4
 800110a:	9e03      	ldr	r6, [sp, #12]
 800110c:	1a89      	subs	r1, r1, r2
 800110e:	0032      	movs	r2, r6
 8001110:	042d      	lsls	r5, r5, #16
 8001112:	431d      	orrs	r5, r3
 8001114:	9f02      	ldr	r7, [sp, #8]
 8001116:	042b      	lsls	r3, r5, #16
 8001118:	0c1b      	lsrs	r3, r3, #16
 800111a:	435a      	muls	r2, r3
 800111c:	437b      	muls	r3, r7
 800111e:	469c      	mov	ip, r3
 8001120:	0c28      	lsrs	r0, r5, #16
 8001122:	4346      	muls	r6, r0
 8001124:	0c13      	lsrs	r3, r2, #16
 8001126:	44b4      	add	ip, r6
 8001128:	4463      	add	r3, ip
 800112a:	4378      	muls	r0, r7
 800112c:	429e      	cmp	r6, r3
 800112e:	d903      	bls.n	8001138 <__aeabi_ddiv+0x3d0>
 8001130:	2680      	movs	r6, #128	; 0x80
 8001132:	0276      	lsls	r6, r6, #9
 8001134:	46b4      	mov	ip, r6
 8001136:	4460      	add	r0, ip
 8001138:	0c1e      	lsrs	r6, r3, #16
 800113a:	0412      	lsls	r2, r2, #16
 800113c:	041b      	lsls	r3, r3, #16
 800113e:	0c12      	lsrs	r2, r2, #16
 8001140:	1830      	adds	r0, r6, r0
 8001142:	189b      	adds	r3, r3, r2
 8001144:	4281      	cmp	r1, r0
 8001146:	d306      	bcc.n	8001156 <__aeabi_ddiv+0x3ee>
 8001148:	d002      	beq.n	8001150 <__aeabi_ddiv+0x3e8>
 800114a:	2301      	movs	r3, #1
 800114c:	431d      	orrs	r5, r3
 800114e:	e6ce      	b.n	8000eee <__aeabi_ddiv+0x186>
 8001150:	2b00      	cmp	r3, #0
 8001152:	d100      	bne.n	8001156 <__aeabi_ddiv+0x3ee>
 8001154:	e6cb      	b.n	8000eee <__aeabi_ddiv+0x186>
 8001156:	1861      	adds	r1, r4, r1
 8001158:	1e6e      	subs	r6, r5, #1
 800115a:	42a1      	cmp	r1, r4
 800115c:	d200      	bcs.n	8001160 <__aeabi_ddiv+0x3f8>
 800115e:	e0a4      	b.n	80012aa <__aeabi_ddiv+0x542>
 8001160:	4281      	cmp	r1, r0
 8001162:	d200      	bcs.n	8001166 <__aeabi_ddiv+0x3fe>
 8001164:	e0c9      	b.n	80012fa <__aeabi_ddiv+0x592>
 8001166:	d100      	bne.n	800116a <__aeabi_ddiv+0x402>
 8001168:	e0d9      	b.n	800131e <__aeabi_ddiv+0x5b6>
 800116a:	0035      	movs	r5, r6
 800116c:	e7ed      	b.n	800114a <__aeabi_ddiv+0x3e2>
 800116e:	2501      	movs	r5, #1
 8001170:	426d      	negs	r5, r5
 8001172:	2101      	movs	r1, #1
 8001174:	1a89      	subs	r1, r1, r2
 8001176:	2938      	cmp	r1, #56	; 0x38
 8001178:	dd00      	ble.n	800117c <__aeabi_ddiv+0x414>
 800117a:	e64c      	b.n	8000e16 <__aeabi_ddiv+0xae>
 800117c:	291f      	cmp	r1, #31
 800117e:	dc00      	bgt.n	8001182 <__aeabi_ddiv+0x41a>
 8001180:	e07f      	b.n	8001282 <__aeabi_ddiv+0x51a>
 8001182:	231f      	movs	r3, #31
 8001184:	425b      	negs	r3, r3
 8001186:	1a9a      	subs	r2, r3, r2
 8001188:	4643      	mov	r3, r8
 800118a:	40d3      	lsrs	r3, r2
 800118c:	2920      	cmp	r1, #32
 800118e:	d004      	beq.n	800119a <__aeabi_ddiv+0x432>
 8001190:	4644      	mov	r4, r8
 8001192:	4a65      	ldr	r2, [pc, #404]	; (8001328 <__aeabi_ddiv+0x5c0>)
 8001194:	445a      	add	r2, fp
 8001196:	4094      	lsls	r4, r2
 8001198:	4325      	orrs	r5, r4
 800119a:	1e6a      	subs	r2, r5, #1
 800119c:	4195      	sbcs	r5, r2
 800119e:	2207      	movs	r2, #7
 80011a0:	432b      	orrs	r3, r5
 80011a2:	0015      	movs	r5, r2
 80011a4:	2400      	movs	r4, #0
 80011a6:	401d      	ands	r5, r3
 80011a8:	421a      	tst	r2, r3
 80011aa:	d100      	bne.n	80011ae <__aeabi_ddiv+0x446>
 80011ac:	e0a1      	b.n	80012f2 <__aeabi_ddiv+0x58a>
 80011ae:	220f      	movs	r2, #15
 80011b0:	2400      	movs	r4, #0
 80011b2:	401a      	ands	r2, r3
 80011b4:	2a04      	cmp	r2, #4
 80011b6:	d100      	bne.n	80011ba <__aeabi_ddiv+0x452>
 80011b8:	e098      	b.n	80012ec <__aeabi_ddiv+0x584>
 80011ba:	1d1a      	adds	r2, r3, #4
 80011bc:	429a      	cmp	r2, r3
 80011be:	419b      	sbcs	r3, r3
 80011c0:	425b      	negs	r3, r3
 80011c2:	18e4      	adds	r4, r4, r3
 80011c4:	0013      	movs	r3, r2
 80011c6:	0222      	lsls	r2, r4, #8
 80011c8:	d400      	bmi.n	80011cc <__aeabi_ddiv+0x464>
 80011ca:	e08f      	b.n	80012ec <__aeabi_ddiv+0x584>
 80011cc:	2301      	movs	r3, #1
 80011ce:	2400      	movs	r4, #0
 80011d0:	2500      	movs	r5, #0
 80011d2:	e623      	b.n	8000e1c <__aeabi_ddiv+0xb4>
 80011d4:	42b5      	cmp	r5, r6
 80011d6:	d300      	bcc.n	80011da <__aeabi_ddiv+0x472>
 80011d8:	e764      	b.n	80010a4 <__aeabi_ddiv+0x33c>
 80011da:	4643      	mov	r3, r8
 80011dc:	1e5a      	subs	r2, r3, #1
 80011de:	9b00      	ldr	r3, [sp, #0]
 80011e0:	469c      	mov	ip, r3
 80011e2:	4465      	add	r5, ip
 80011e4:	001f      	movs	r7, r3
 80011e6:	429d      	cmp	r5, r3
 80011e8:	419b      	sbcs	r3, r3
 80011ea:	425b      	negs	r3, r3
 80011ec:	191b      	adds	r3, r3, r4
 80011ee:	18c9      	adds	r1, r1, r3
 80011f0:	428c      	cmp	r4, r1
 80011f2:	d23a      	bcs.n	800126a <__aeabi_ddiv+0x502>
 80011f4:	4288      	cmp	r0, r1
 80011f6:	d863      	bhi.n	80012c0 <__aeabi_ddiv+0x558>
 80011f8:	d060      	beq.n	80012bc <__aeabi_ddiv+0x554>
 80011fa:	4690      	mov	r8, r2
 80011fc:	e752      	b.n	80010a4 <__aeabi_ddiv+0x33c>
 80011fe:	42aa      	cmp	r2, r5
 8001200:	d900      	bls.n	8001204 <__aeabi_ddiv+0x49c>
 8001202:	e6ea      	b.n	8000fda <__aeabi_ddiv+0x272>
 8001204:	4643      	mov	r3, r8
 8001206:	07de      	lsls	r6, r3, #31
 8001208:	0858      	lsrs	r0, r3, #1
 800120a:	086b      	lsrs	r3, r5, #1
 800120c:	431e      	orrs	r6, r3
 800120e:	07ed      	lsls	r5, r5, #31
 8001210:	e6ea      	b.n	8000fe8 <__aeabi_ddiv+0x280>
 8001212:	4648      	mov	r0, r9
 8001214:	f001 f908 	bl	8002428 <__clzsi2>
 8001218:	0001      	movs	r1, r0
 800121a:	0002      	movs	r2, r0
 800121c:	3115      	adds	r1, #21
 800121e:	3220      	adds	r2, #32
 8001220:	291c      	cmp	r1, #28
 8001222:	dc00      	bgt.n	8001226 <__aeabi_ddiv+0x4be>
 8001224:	e61a      	b.n	8000e5c <__aeabi_ddiv+0xf4>
 8001226:	464b      	mov	r3, r9
 8001228:	3808      	subs	r0, #8
 800122a:	4083      	lsls	r3, r0
 800122c:	2500      	movs	r5, #0
 800122e:	4698      	mov	r8, r3
 8001230:	e620      	b.n	8000e74 <__aeabi_ddiv+0x10c>
 8001232:	f001 f8f9 	bl	8002428 <__clzsi2>
 8001236:	0003      	movs	r3, r0
 8001238:	001a      	movs	r2, r3
 800123a:	3215      	adds	r2, #21
 800123c:	3020      	adds	r0, #32
 800123e:	2a1c      	cmp	r2, #28
 8001240:	dc00      	bgt.n	8001244 <__aeabi_ddiv+0x4dc>
 8001242:	e630      	b.n	8000ea6 <__aeabi_ddiv+0x13e>
 8001244:	4654      	mov	r4, sl
 8001246:	3b08      	subs	r3, #8
 8001248:	2200      	movs	r2, #0
 800124a:	409c      	lsls	r4, r3
 800124c:	e635      	b.n	8000eba <__aeabi_ddiv+0x152>
 800124e:	230f      	movs	r3, #15
 8001250:	402b      	ands	r3, r5
 8001252:	2b04      	cmp	r3, #4
 8001254:	d100      	bne.n	8001258 <__aeabi_ddiv+0x4f0>
 8001256:	e652      	b.n	8000efe <__aeabi_ddiv+0x196>
 8001258:	2305      	movs	r3, #5
 800125a:	425b      	negs	r3, r3
 800125c:	42ab      	cmp	r3, r5
 800125e:	419b      	sbcs	r3, r3
 8001260:	3504      	adds	r5, #4
 8001262:	425b      	negs	r3, r3
 8001264:	08ed      	lsrs	r5, r5, #3
 8001266:	4498      	add	r8, r3
 8001268:	e64a      	b.n	8000f00 <__aeabi_ddiv+0x198>
 800126a:	428c      	cmp	r4, r1
 800126c:	d1c5      	bne.n	80011fa <__aeabi_ddiv+0x492>
 800126e:	42af      	cmp	r7, r5
 8001270:	d9c0      	bls.n	80011f4 <__aeabi_ddiv+0x48c>
 8001272:	4690      	mov	r8, r2
 8001274:	e716      	b.n	80010a4 <__aeabi_ddiv+0x33c>
 8001276:	428a      	cmp	r2, r1
 8001278:	d800      	bhi.n	800127c <__aeabi_ddiv+0x514>
 800127a:	e6ea      	b.n	8001052 <__aeabi_ddiv+0x2ea>
 800127c:	1e83      	subs	r3, r0, #2
 800127e:	1909      	adds	r1, r1, r4
 8001280:	e6e7      	b.n	8001052 <__aeabi_ddiv+0x2ea>
 8001282:	4a2a      	ldr	r2, [pc, #168]	; (800132c <__aeabi_ddiv+0x5c4>)
 8001284:	0028      	movs	r0, r5
 8001286:	445a      	add	r2, fp
 8001288:	4643      	mov	r3, r8
 800128a:	4095      	lsls	r5, r2
 800128c:	4093      	lsls	r3, r2
 800128e:	40c8      	lsrs	r0, r1
 8001290:	1e6a      	subs	r2, r5, #1
 8001292:	4195      	sbcs	r5, r2
 8001294:	4644      	mov	r4, r8
 8001296:	4303      	orrs	r3, r0
 8001298:	432b      	orrs	r3, r5
 800129a:	40cc      	lsrs	r4, r1
 800129c:	075a      	lsls	r2, r3, #29
 800129e:	d092      	beq.n	80011c6 <__aeabi_ddiv+0x45e>
 80012a0:	220f      	movs	r2, #15
 80012a2:	401a      	ands	r2, r3
 80012a4:	2a04      	cmp	r2, #4
 80012a6:	d188      	bne.n	80011ba <__aeabi_ddiv+0x452>
 80012a8:	e78d      	b.n	80011c6 <__aeabi_ddiv+0x45e>
 80012aa:	0035      	movs	r5, r6
 80012ac:	4281      	cmp	r1, r0
 80012ae:	d000      	beq.n	80012b2 <__aeabi_ddiv+0x54a>
 80012b0:	e74b      	b.n	800114a <__aeabi_ddiv+0x3e2>
 80012b2:	9a00      	ldr	r2, [sp, #0]
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d000      	beq.n	80012ba <__aeabi_ddiv+0x552>
 80012b8:	e747      	b.n	800114a <__aeabi_ddiv+0x3e2>
 80012ba:	e618      	b.n	8000eee <__aeabi_ddiv+0x186>
 80012bc:	42ae      	cmp	r6, r5
 80012be:	d99c      	bls.n	80011fa <__aeabi_ddiv+0x492>
 80012c0:	2302      	movs	r3, #2
 80012c2:	425b      	negs	r3, r3
 80012c4:	469c      	mov	ip, r3
 80012c6:	9b00      	ldr	r3, [sp, #0]
 80012c8:	44e0      	add	r8, ip
 80012ca:	469c      	mov	ip, r3
 80012cc:	4465      	add	r5, ip
 80012ce:	429d      	cmp	r5, r3
 80012d0:	419b      	sbcs	r3, r3
 80012d2:	425b      	negs	r3, r3
 80012d4:	191b      	adds	r3, r3, r4
 80012d6:	18c9      	adds	r1, r1, r3
 80012d8:	e6e4      	b.n	80010a4 <__aeabi_ddiv+0x33c>
 80012da:	4a15      	ldr	r2, [pc, #84]	; (8001330 <__aeabi_ddiv+0x5c8>)
 80012dc:	445a      	add	r2, fp
 80012de:	2a00      	cmp	r2, #0
 80012e0:	dc00      	bgt.n	80012e4 <__aeabi_ddiv+0x57c>
 80012e2:	e744      	b.n	800116e <__aeabi_ddiv+0x406>
 80012e4:	2301      	movs	r3, #1
 80012e6:	2500      	movs	r5, #0
 80012e8:	4498      	add	r8, r3
 80012ea:	e609      	b.n	8000f00 <__aeabi_ddiv+0x198>
 80012ec:	0765      	lsls	r5, r4, #29
 80012ee:	0264      	lsls	r4, r4, #9
 80012f0:	0b24      	lsrs	r4, r4, #12
 80012f2:	08db      	lsrs	r3, r3, #3
 80012f4:	431d      	orrs	r5, r3
 80012f6:	2300      	movs	r3, #0
 80012f8:	e590      	b.n	8000e1c <__aeabi_ddiv+0xb4>
 80012fa:	9e00      	ldr	r6, [sp, #0]
 80012fc:	3d02      	subs	r5, #2
 80012fe:	0072      	lsls	r2, r6, #1
 8001300:	42b2      	cmp	r2, r6
 8001302:	41bf      	sbcs	r7, r7
 8001304:	427f      	negs	r7, r7
 8001306:	193c      	adds	r4, r7, r4
 8001308:	1909      	adds	r1, r1, r4
 800130a:	9200      	str	r2, [sp, #0]
 800130c:	e7ce      	b.n	80012ac <__aeabi_ddiv+0x544>
 800130e:	2480      	movs	r4, #128	; 0x80
 8001310:	4643      	mov	r3, r8
 8001312:	0324      	lsls	r4, r4, #12
 8001314:	431c      	orrs	r4, r3
 8001316:	0324      	lsls	r4, r4, #12
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <__aeabi_ddiv+0x5cc>)
 800131a:	0b24      	lsrs	r4, r4, #12
 800131c:	e57e      	b.n	8000e1c <__aeabi_ddiv+0xb4>
 800131e:	9a00      	ldr	r2, [sp, #0]
 8001320:	429a      	cmp	r2, r3
 8001322:	d3ea      	bcc.n	80012fa <__aeabi_ddiv+0x592>
 8001324:	0035      	movs	r5, r6
 8001326:	e7c4      	b.n	80012b2 <__aeabi_ddiv+0x54a>
 8001328:	0000043e 	.word	0x0000043e
 800132c:	0000041e 	.word	0x0000041e
 8001330:	000003ff 	.word	0x000003ff
 8001334:	000007ff 	.word	0x000007ff

08001338 <__eqdf2>:
 8001338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133a:	464f      	mov	r7, r9
 800133c:	4646      	mov	r6, r8
 800133e:	46d6      	mov	lr, sl
 8001340:	4694      	mov	ip, r2
 8001342:	4691      	mov	r9, r2
 8001344:	031a      	lsls	r2, r3, #12
 8001346:	0b12      	lsrs	r2, r2, #12
 8001348:	4d18      	ldr	r5, [pc, #96]	; (80013ac <__eqdf2+0x74>)
 800134a:	b5c0      	push	{r6, r7, lr}
 800134c:	004c      	lsls	r4, r1, #1
 800134e:	030f      	lsls	r7, r1, #12
 8001350:	4692      	mov	sl, r2
 8001352:	005a      	lsls	r2, r3, #1
 8001354:	0006      	movs	r6, r0
 8001356:	4680      	mov	r8, r0
 8001358:	0b3f      	lsrs	r7, r7, #12
 800135a:	2001      	movs	r0, #1
 800135c:	0d64      	lsrs	r4, r4, #21
 800135e:	0fc9      	lsrs	r1, r1, #31
 8001360:	0d52      	lsrs	r2, r2, #21
 8001362:	0fdb      	lsrs	r3, r3, #31
 8001364:	42ac      	cmp	r4, r5
 8001366:	d00a      	beq.n	800137e <__eqdf2+0x46>
 8001368:	42aa      	cmp	r2, r5
 800136a:	d003      	beq.n	8001374 <__eqdf2+0x3c>
 800136c:	4294      	cmp	r4, r2
 800136e:	d101      	bne.n	8001374 <__eqdf2+0x3c>
 8001370:	4557      	cmp	r7, sl
 8001372:	d00d      	beq.n	8001390 <__eqdf2+0x58>
 8001374:	bce0      	pop	{r5, r6, r7}
 8001376:	46ba      	mov	sl, r7
 8001378:	46b1      	mov	r9, r6
 800137a:	46a8      	mov	r8, r5
 800137c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800137e:	003d      	movs	r5, r7
 8001380:	4335      	orrs	r5, r6
 8001382:	d1f7      	bne.n	8001374 <__eqdf2+0x3c>
 8001384:	42a2      	cmp	r2, r4
 8001386:	d1f5      	bne.n	8001374 <__eqdf2+0x3c>
 8001388:	4652      	mov	r2, sl
 800138a:	4665      	mov	r5, ip
 800138c:	432a      	orrs	r2, r5
 800138e:	d1f1      	bne.n	8001374 <__eqdf2+0x3c>
 8001390:	2001      	movs	r0, #1
 8001392:	45c8      	cmp	r8, r9
 8001394:	d1ee      	bne.n	8001374 <__eqdf2+0x3c>
 8001396:	4299      	cmp	r1, r3
 8001398:	d006      	beq.n	80013a8 <__eqdf2+0x70>
 800139a:	2c00      	cmp	r4, #0
 800139c:	d1ea      	bne.n	8001374 <__eqdf2+0x3c>
 800139e:	433e      	orrs	r6, r7
 80013a0:	0030      	movs	r0, r6
 80013a2:	1e46      	subs	r6, r0, #1
 80013a4:	41b0      	sbcs	r0, r6
 80013a6:	e7e5      	b.n	8001374 <__eqdf2+0x3c>
 80013a8:	2000      	movs	r0, #0
 80013aa:	e7e3      	b.n	8001374 <__eqdf2+0x3c>
 80013ac:	000007ff 	.word	0x000007ff

080013b0 <__gedf2>:
 80013b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013b2:	464e      	mov	r6, r9
 80013b4:	4645      	mov	r5, r8
 80013b6:	4657      	mov	r7, sl
 80013b8:	46de      	mov	lr, fp
 80013ba:	0004      	movs	r4, r0
 80013bc:	0018      	movs	r0, r3
 80013be:	b5e0      	push	{r5, r6, r7, lr}
 80013c0:	0016      	movs	r6, r2
 80013c2:	031b      	lsls	r3, r3, #12
 80013c4:	0b1b      	lsrs	r3, r3, #12
 80013c6:	4d32      	ldr	r5, [pc, #200]	; (8001490 <__gedf2+0xe0>)
 80013c8:	030f      	lsls	r7, r1, #12
 80013ca:	004a      	lsls	r2, r1, #1
 80013cc:	4699      	mov	r9, r3
 80013ce:	0043      	lsls	r3, r0, #1
 80013d0:	46a4      	mov	ip, r4
 80013d2:	46b0      	mov	r8, r6
 80013d4:	0b3f      	lsrs	r7, r7, #12
 80013d6:	0d52      	lsrs	r2, r2, #21
 80013d8:	0fc9      	lsrs	r1, r1, #31
 80013da:	0d5b      	lsrs	r3, r3, #21
 80013dc:	0fc0      	lsrs	r0, r0, #31
 80013de:	42aa      	cmp	r2, r5
 80013e0:	d029      	beq.n	8001436 <__gedf2+0x86>
 80013e2:	42ab      	cmp	r3, r5
 80013e4:	d018      	beq.n	8001418 <__gedf2+0x68>
 80013e6:	2a00      	cmp	r2, #0
 80013e8:	d12a      	bne.n	8001440 <__gedf2+0x90>
 80013ea:	433c      	orrs	r4, r7
 80013ec:	46a3      	mov	fp, r4
 80013ee:	4265      	negs	r5, r4
 80013f0:	4165      	adcs	r5, r4
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d102      	bne.n	80013fc <__gedf2+0x4c>
 80013f6:	464c      	mov	r4, r9
 80013f8:	4326      	orrs	r6, r4
 80013fa:	d027      	beq.n	800144c <__gedf2+0x9c>
 80013fc:	2d00      	cmp	r5, #0
 80013fe:	d115      	bne.n	800142c <__gedf2+0x7c>
 8001400:	4281      	cmp	r1, r0
 8001402:	d028      	beq.n	8001456 <__gedf2+0xa6>
 8001404:	2002      	movs	r0, #2
 8001406:	3901      	subs	r1, #1
 8001408:	4008      	ands	r0, r1
 800140a:	3801      	subs	r0, #1
 800140c:	bcf0      	pop	{r4, r5, r6, r7}
 800140e:	46bb      	mov	fp, r7
 8001410:	46b2      	mov	sl, r6
 8001412:	46a9      	mov	r9, r5
 8001414:	46a0      	mov	r8, r4
 8001416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001418:	464d      	mov	r5, r9
 800141a:	432e      	orrs	r6, r5
 800141c:	d12f      	bne.n	800147e <__gedf2+0xce>
 800141e:	2a00      	cmp	r2, #0
 8001420:	d1ee      	bne.n	8001400 <__gedf2+0x50>
 8001422:	433c      	orrs	r4, r7
 8001424:	4265      	negs	r5, r4
 8001426:	4165      	adcs	r5, r4
 8001428:	2d00      	cmp	r5, #0
 800142a:	d0e9      	beq.n	8001400 <__gedf2+0x50>
 800142c:	2800      	cmp	r0, #0
 800142e:	d1ed      	bne.n	800140c <__gedf2+0x5c>
 8001430:	2001      	movs	r0, #1
 8001432:	4240      	negs	r0, r0
 8001434:	e7ea      	b.n	800140c <__gedf2+0x5c>
 8001436:	003d      	movs	r5, r7
 8001438:	4325      	orrs	r5, r4
 800143a:	d120      	bne.n	800147e <__gedf2+0xce>
 800143c:	4293      	cmp	r3, r2
 800143e:	d0eb      	beq.n	8001418 <__gedf2+0x68>
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1dd      	bne.n	8001400 <__gedf2+0x50>
 8001444:	464c      	mov	r4, r9
 8001446:	4326      	orrs	r6, r4
 8001448:	d1da      	bne.n	8001400 <__gedf2+0x50>
 800144a:	e7db      	b.n	8001404 <__gedf2+0x54>
 800144c:	465b      	mov	r3, fp
 800144e:	2000      	movs	r0, #0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0db      	beq.n	800140c <__gedf2+0x5c>
 8001454:	e7d6      	b.n	8001404 <__gedf2+0x54>
 8001456:	429a      	cmp	r2, r3
 8001458:	dc0a      	bgt.n	8001470 <__gedf2+0xc0>
 800145a:	dbe7      	blt.n	800142c <__gedf2+0x7c>
 800145c:	454f      	cmp	r7, r9
 800145e:	d8d1      	bhi.n	8001404 <__gedf2+0x54>
 8001460:	d010      	beq.n	8001484 <__gedf2+0xd4>
 8001462:	2000      	movs	r0, #0
 8001464:	454f      	cmp	r7, r9
 8001466:	d2d1      	bcs.n	800140c <__gedf2+0x5c>
 8001468:	2900      	cmp	r1, #0
 800146a:	d0e1      	beq.n	8001430 <__gedf2+0x80>
 800146c:	0008      	movs	r0, r1
 800146e:	e7cd      	b.n	800140c <__gedf2+0x5c>
 8001470:	4243      	negs	r3, r0
 8001472:	4158      	adcs	r0, r3
 8001474:	2302      	movs	r3, #2
 8001476:	4240      	negs	r0, r0
 8001478:	4018      	ands	r0, r3
 800147a:	3801      	subs	r0, #1
 800147c:	e7c6      	b.n	800140c <__gedf2+0x5c>
 800147e:	2002      	movs	r0, #2
 8001480:	4240      	negs	r0, r0
 8001482:	e7c3      	b.n	800140c <__gedf2+0x5c>
 8001484:	45c4      	cmp	ip, r8
 8001486:	d8bd      	bhi.n	8001404 <__gedf2+0x54>
 8001488:	2000      	movs	r0, #0
 800148a:	45c4      	cmp	ip, r8
 800148c:	d2be      	bcs.n	800140c <__gedf2+0x5c>
 800148e:	e7eb      	b.n	8001468 <__gedf2+0xb8>
 8001490:	000007ff 	.word	0x000007ff

08001494 <__ledf2>:
 8001494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001496:	464e      	mov	r6, r9
 8001498:	4645      	mov	r5, r8
 800149a:	4657      	mov	r7, sl
 800149c:	46de      	mov	lr, fp
 800149e:	0004      	movs	r4, r0
 80014a0:	0018      	movs	r0, r3
 80014a2:	b5e0      	push	{r5, r6, r7, lr}
 80014a4:	0016      	movs	r6, r2
 80014a6:	031b      	lsls	r3, r3, #12
 80014a8:	0b1b      	lsrs	r3, r3, #12
 80014aa:	4d31      	ldr	r5, [pc, #196]	; (8001570 <__ledf2+0xdc>)
 80014ac:	030f      	lsls	r7, r1, #12
 80014ae:	004a      	lsls	r2, r1, #1
 80014b0:	4699      	mov	r9, r3
 80014b2:	0043      	lsls	r3, r0, #1
 80014b4:	46a4      	mov	ip, r4
 80014b6:	46b0      	mov	r8, r6
 80014b8:	0b3f      	lsrs	r7, r7, #12
 80014ba:	0d52      	lsrs	r2, r2, #21
 80014bc:	0fc9      	lsrs	r1, r1, #31
 80014be:	0d5b      	lsrs	r3, r3, #21
 80014c0:	0fc0      	lsrs	r0, r0, #31
 80014c2:	42aa      	cmp	r2, r5
 80014c4:	d011      	beq.n	80014ea <__ledf2+0x56>
 80014c6:	42ab      	cmp	r3, r5
 80014c8:	d014      	beq.n	80014f4 <__ledf2+0x60>
 80014ca:	2a00      	cmp	r2, #0
 80014cc:	d12f      	bne.n	800152e <__ledf2+0x9a>
 80014ce:	433c      	orrs	r4, r7
 80014d0:	46a3      	mov	fp, r4
 80014d2:	4265      	negs	r5, r4
 80014d4:	4165      	adcs	r5, r4
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d114      	bne.n	8001504 <__ledf2+0x70>
 80014da:	464c      	mov	r4, r9
 80014dc:	4326      	orrs	r6, r4
 80014de:	d111      	bne.n	8001504 <__ledf2+0x70>
 80014e0:	465b      	mov	r3, fp
 80014e2:	2000      	movs	r0, #0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d017      	beq.n	8001518 <__ledf2+0x84>
 80014e8:	e010      	b.n	800150c <__ledf2+0x78>
 80014ea:	003d      	movs	r5, r7
 80014ec:	4325      	orrs	r5, r4
 80014ee:	d112      	bne.n	8001516 <__ledf2+0x82>
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d11c      	bne.n	800152e <__ledf2+0x9a>
 80014f4:	464d      	mov	r5, r9
 80014f6:	432e      	orrs	r6, r5
 80014f8:	d10d      	bne.n	8001516 <__ledf2+0x82>
 80014fa:	2a00      	cmp	r2, #0
 80014fc:	d104      	bne.n	8001508 <__ledf2+0x74>
 80014fe:	433c      	orrs	r4, r7
 8001500:	4265      	negs	r5, r4
 8001502:	4165      	adcs	r5, r4
 8001504:	2d00      	cmp	r5, #0
 8001506:	d10d      	bne.n	8001524 <__ledf2+0x90>
 8001508:	4281      	cmp	r1, r0
 800150a:	d016      	beq.n	800153a <__ledf2+0xa6>
 800150c:	2002      	movs	r0, #2
 800150e:	3901      	subs	r1, #1
 8001510:	4008      	ands	r0, r1
 8001512:	3801      	subs	r0, #1
 8001514:	e000      	b.n	8001518 <__ledf2+0x84>
 8001516:	2002      	movs	r0, #2
 8001518:	bcf0      	pop	{r4, r5, r6, r7}
 800151a:	46bb      	mov	fp, r7
 800151c:	46b2      	mov	sl, r6
 800151e:	46a9      	mov	r9, r5
 8001520:	46a0      	mov	r8, r4
 8001522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001524:	2800      	cmp	r0, #0
 8001526:	d1f7      	bne.n	8001518 <__ledf2+0x84>
 8001528:	2001      	movs	r0, #1
 800152a:	4240      	negs	r0, r0
 800152c:	e7f4      	b.n	8001518 <__ledf2+0x84>
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1ea      	bne.n	8001508 <__ledf2+0x74>
 8001532:	464c      	mov	r4, r9
 8001534:	4326      	orrs	r6, r4
 8001536:	d1e7      	bne.n	8001508 <__ledf2+0x74>
 8001538:	e7e8      	b.n	800150c <__ledf2+0x78>
 800153a:	429a      	cmp	r2, r3
 800153c:	dd06      	ble.n	800154c <__ledf2+0xb8>
 800153e:	4243      	negs	r3, r0
 8001540:	4158      	adcs	r0, r3
 8001542:	2302      	movs	r3, #2
 8001544:	4240      	negs	r0, r0
 8001546:	4018      	ands	r0, r3
 8001548:	3801      	subs	r0, #1
 800154a:	e7e5      	b.n	8001518 <__ledf2+0x84>
 800154c:	429a      	cmp	r2, r3
 800154e:	dbe9      	blt.n	8001524 <__ledf2+0x90>
 8001550:	454f      	cmp	r7, r9
 8001552:	d8db      	bhi.n	800150c <__ledf2+0x78>
 8001554:	d006      	beq.n	8001564 <__ledf2+0xd0>
 8001556:	2000      	movs	r0, #0
 8001558:	454f      	cmp	r7, r9
 800155a:	d2dd      	bcs.n	8001518 <__ledf2+0x84>
 800155c:	2900      	cmp	r1, #0
 800155e:	d0e3      	beq.n	8001528 <__ledf2+0x94>
 8001560:	0008      	movs	r0, r1
 8001562:	e7d9      	b.n	8001518 <__ledf2+0x84>
 8001564:	45c4      	cmp	ip, r8
 8001566:	d8d1      	bhi.n	800150c <__ledf2+0x78>
 8001568:	2000      	movs	r0, #0
 800156a:	45c4      	cmp	ip, r8
 800156c:	d2d4      	bcs.n	8001518 <__ledf2+0x84>
 800156e:	e7f5      	b.n	800155c <__ledf2+0xc8>
 8001570:	000007ff 	.word	0x000007ff

08001574 <__aeabi_dmul>:
 8001574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001576:	4657      	mov	r7, sl
 8001578:	464e      	mov	r6, r9
 800157a:	4645      	mov	r5, r8
 800157c:	46de      	mov	lr, fp
 800157e:	b5e0      	push	{r5, r6, r7, lr}
 8001580:	4698      	mov	r8, r3
 8001582:	030c      	lsls	r4, r1, #12
 8001584:	004b      	lsls	r3, r1, #1
 8001586:	0006      	movs	r6, r0
 8001588:	4692      	mov	sl, r2
 800158a:	b087      	sub	sp, #28
 800158c:	0b24      	lsrs	r4, r4, #12
 800158e:	0d5b      	lsrs	r3, r3, #21
 8001590:	0fcf      	lsrs	r7, r1, #31
 8001592:	2b00      	cmp	r3, #0
 8001594:	d06c      	beq.n	8001670 <__aeabi_dmul+0xfc>
 8001596:	4add      	ldr	r2, [pc, #884]	; (800190c <__aeabi_dmul+0x398>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d100      	bne.n	800159e <__aeabi_dmul+0x2a>
 800159c:	e086      	b.n	80016ac <__aeabi_dmul+0x138>
 800159e:	0f42      	lsrs	r2, r0, #29
 80015a0:	00e4      	lsls	r4, r4, #3
 80015a2:	4314      	orrs	r4, r2
 80015a4:	2280      	movs	r2, #128	; 0x80
 80015a6:	0412      	lsls	r2, r2, #16
 80015a8:	4314      	orrs	r4, r2
 80015aa:	4ad9      	ldr	r2, [pc, #868]	; (8001910 <__aeabi_dmul+0x39c>)
 80015ac:	00c5      	lsls	r5, r0, #3
 80015ae:	4694      	mov	ip, r2
 80015b0:	4463      	add	r3, ip
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2300      	movs	r3, #0
 80015b6:	4699      	mov	r9, r3
 80015b8:	469b      	mov	fp, r3
 80015ba:	4643      	mov	r3, r8
 80015bc:	4642      	mov	r2, r8
 80015be:	031e      	lsls	r6, r3, #12
 80015c0:	0fd2      	lsrs	r2, r2, #31
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4650      	mov	r0, sl
 80015c6:	4690      	mov	r8, r2
 80015c8:	0b36      	lsrs	r6, r6, #12
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	d100      	bne.n	80015d0 <__aeabi_dmul+0x5c>
 80015ce:	e078      	b.n	80016c2 <__aeabi_dmul+0x14e>
 80015d0:	4ace      	ldr	r2, [pc, #824]	; (800190c <__aeabi_dmul+0x398>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d01d      	beq.n	8001612 <__aeabi_dmul+0x9e>
 80015d6:	49ce      	ldr	r1, [pc, #824]	; (8001910 <__aeabi_dmul+0x39c>)
 80015d8:	0f42      	lsrs	r2, r0, #29
 80015da:	468c      	mov	ip, r1
 80015dc:	9900      	ldr	r1, [sp, #0]
 80015de:	4463      	add	r3, ip
 80015e0:	00f6      	lsls	r6, r6, #3
 80015e2:	468c      	mov	ip, r1
 80015e4:	4316      	orrs	r6, r2
 80015e6:	2280      	movs	r2, #128	; 0x80
 80015e8:	449c      	add	ip, r3
 80015ea:	0412      	lsls	r2, r2, #16
 80015ec:	4663      	mov	r3, ip
 80015ee:	4316      	orrs	r6, r2
 80015f0:	00c2      	lsls	r2, r0, #3
 80015f2:	2000      	movs	r0, #0
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	9900      	ldr	r1, [sp, #0]
 80015f8:	4643      	mov	r3, r8
 80015fa:	3101      	adds	r1, #1
 80015fc:	468c      	mov	ip, r1
 80015fe:	4649      	mov	r1, r9
 8001600:	407b      	eors	r3, r7
 8001602:	9301      	str	r3, [sp, #4]
 8001604:	290f      	cmp	r1, #15
 8001606:	d900      	bls.n	800160a <__aeabi_dmul+0x96>
 8001608:	e07e      	b.n	8001708 <__aeabi_dmul+0x194>
 800160a:	4bc2      	ldr	r3, [pc, #776]	; (8001914 <__aeabi_dmul+0x3a0>)
 800160c:	0089      	lsls	r1, r1, #2
 800160e:	5859      	ldr	r1, [r3, r1]
 8001610:	468f      	mov	pc, r1
 8001612:	4652      	mov	r2, sl
 8001614:	9b00      	ldr	r3, [sp, #0]
 8001616:	4332      	orrs	r2, r6
 8001618:	d000      	beq.n	800161c <__aeabi_dmul+0xa8>
 800161a:	e156      	b.n	80018ca <__aeabi_dmul+0x356>
 800161c:	49bb      	ldr	r1, [pc, #748]	; (800190c <__aeabi_dmul+0x398>)
 800161e:	2600      	movs	r6, #0
 8001620:	468c      	mov	ip, r1
 8001622:	4463      	add	r3, ip
 8001624:	4649      	mov	r1, r9
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2302      	movs	r3, #2
 800162a:	4319      	orrs	r1, r3
 800162c:	4689      	mov	r9, r1
 800162e:	2002      	movs	r0, #2
 8001630:	e7e1      	b.n	80015f6 <__aeabi_dmul+0x82>
 8001632:	4643      	mov	r3, r8
 8001634:	9301      	str	r3, [sp, #4]
 8001636:	0034      	movs	r4, r6
 8001638:	0015      	movs	r5, r2
 800163a:	4683      	mov	fp, r0
 800163c:	465b      	mov	r3, fp
 800163e:	2b02      	cmp	r3, #2
 8001640:	d05e      	beq.n	8001700 <__aeabi_dmul+0x18c>
 8001642:	2b03      	cmp	r3, #3
 8001644:	d100      	bne.n	8001648 <__aeabi_dmul+0xd4>
 8001646:	e1f3      	b.n	8001a30 <__aeabi_dmul+0x4bc>
 8001648:	2b01      	cmp	r3, #1
 800164a:	d000      	beq.n	800164e <__aeabi_dmul+0xda>
 800164c:	e118      	b.n	8001880 <__aeabi_dmul+0x30c>
 800164e:	2200      	movs	r2, #0
 8001650:	2400      	movs	r4, #0
 8001652:	2500      	movs	r5, #0
 8001654:	9b01      	ldr	r3, [sp, #4]
 8001656:	0512      	lsls	r2, r2, #20
 8001658:	4322      	orrs	r2, r4
 800165a:	07db      	lsls	r3, r3, #31
 800165c:	431a      	orrs	r2, r3
 800165e:	0028      	movs	r0, r5
 8001660:	0011      	movs	r1, r2
 8001662:	b007      	add	sp, #28
 8001664:	bcf0      	pop	{r4, r5, r6, r7}
 8001666:	46bb      	mov	fp, r7
 8001668:	46b2      	mov	sl, r6
 800166a:	46a9      	mov	r9, r5
 800166c:	46a0      	mov	r8, r4
 800166e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001670:	0025      	movs	r5, r4
 8001672:	4305      	orrs	r5, r0
 8001674:	d100      	bne.n	8001678 <__aeabi_dmul+0x104>
 8001676:	e141      	b.n	80018fc <__aeabi_dmul+0x388>
 8001678:	2c00      	cmp	r4, #0
 800167a:	d100      	bne.n	800167e <__aeabi_dmul+0x10a>
 800167c:	e1ad      	b.n	80019da <__aeabi_dmul+0x466>
 800167e:	0020      	movs	r0, r4
 8001680:	f000 fed2 	bl	8002428 <__clzsi2>
 8001684:	0001      	movs	r1, r0
 8001686:	0002      	movs	r2, r0
 8001688:	390b      	subs	r1, #11
 800168a:	231d      	movs	r3, #29
 800168c:	0010      	movs	r0, r2
 800168e:	1a5b      	subs	r3, r3, r1
 8001690:	0031      	movs	r1, r6
 8001692:	0035      	movs	r5, r6
 8001694:	3808      	subs	r0, #8
 8001696:	4084      	lsls	r4, r0
 8001698:	40d9      	lsrs	r1, r3
 800169a:	4085      	lsls	r5, r0
 800169c:	430c      	orrs	r4, r1
 800169e:	489e      	ldr	r0, [pc, #632]	; (8001918 <__aeabi_dmul+0x3a4>)
 80016a0:	1a83      	subs	r3, r0, r2
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2300      	movs	r3, #0
 80016a6:	4699      	mov	r9, r3
 80016a8:	469b      	mov	fp, r3
 80016aa:	e786      	b.n	80015ba <__aeabi_dmul+0x46>
 80016ac:	0005      	movs	r5, r0
 80016ae:	4325      	orrs	r5, r4
 80016b0:	d000      	beq.n	80016b4 <__aeabi_dmul+0x140>
 80016b2:	e11c      	b.n	80018ee <__aeabi_dmul+0x37a>
 80016b4:	2208      	movs	r2, #8
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2302      	movs	r3, #2
 80016ba:	2400      	movs	r4, #0
 80016bc:	4691      	mov	r9, r2
 80016be:	469b      	mov	fp, r3
 80016c0:	e77b      	b.n	80015ba <__aeabi_dmul+0x46>
 80016c2:	4652      	mov	r2, sl
 80016c4:	4332      	orrs	r2, r6
 80016c6:	d100      	bne.n	80016ca <__aeabi_dmul+0x156>
 80016c8:	e10a      	b.n	80018e0 <__aeabi_dmul+0x36c>
 80016ca:	2e00      	cmp	r6, #0
 80016cc:	d100      	bne.n	80016d0 <__aeabi_dmul+0x15c>
 80016ce:	e176      	b.n	80019be <__aeabi_dmul+0x44a>
 80016d0:	0030      	movs	r0, r6
 80016d2:	f000 fea9 	bl	8002428 <__clzsi2>
 80016d6:	0002      	movs	r2, r0
 80016d8:	3a0b      	subs	r2, #11
 80016da:	231d      	movs	r3, #29
 80016dc:	0001      	movs	r1, r0
 80016de:	1a9b      	subs	r3, r3, r2
 80016e0:	4652      	mov	r2, sl
 80016e2:	3908      	subs	r1, #8
 80016e4:	40da      	lsrs	r2, r3
 80016e6:	408e      	lsls	r6, r1
 80016e8:	4316      	orrs	r6, r2
 80016ea:	4652      	mov	r2, sl
 80016ec:	408a      	lsls	r2, r1
 80016ee:	9b00      	ldr	r3, [sp, #0]
 80016f0:	4989      	ldr	r1, [pc, #548]	; (8001918 <__aeabi_dmul+0x3a4>)
 80016f2:	1a18      	subs	r0, r3, r0
 80016f4:	0003      	movs	r3, r0
 80016f6:	468c      	mov	ip, r1
 80016f8:	4463      	add	r3, ip
 80016fa:	2000      	movs	r0, #0
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	e77a      	b.n	80015f6 <__aeabi_dmul+0x82>
 8001700:	2400      	movs	r4, #0
 8001702:	2500      	movs	r5, #0
 8001704:	4a81      	ldr	r2, [pc, #516]	; (800190c <__aeabi_dmul+0x398>)
 8001706:	e7a5      	b.n	8001654 <__aeabi_dmul+0xe0>
 8001708:	0c2f      	lsrs	r7, r5, #16
 800170a:	042d      	lsls	r5, r5, #16
 800170c:	0c2d      	lsrs	r5, r5, #16
 800170e:	002b      	movs	r3, r5
 8001710:	0c11      	lsrs	r1, r2, #16
 8001712:	0412      	lsls	r2, r2, #16
 8001714:	0c12      	lsrs	r2, r2, #16
 8001716:	4353      	muls	r3, r2
 8001718:	4698      	mov	r8, r3
 800171a:	0013      	movs	r3, r2
 800171c:	0028      	movs	r0, r5
 800171e:	437b      	muls	r3, r7
 8001720:	4699      	mov	r9, r3
 8001722:	4348      	muls	r0, r1
 8001724:	4448      	add	r0, r9
 8001726:	4683      	mov	fp, r0
 8001728:	4640      	mov	r0, r8
 800172a:	000b      	movs	r3, r1
 800172c:	0c00      	lsrs	r0, r0, #16
 800172e:	4682      	mov	sl, r0
 8001730:	4658      	mov	r0, fp
 8001732:	437b      	muls	r3, r7
 8001734:	4450      	add	r0, sl
 8001736:	9302      	str	r3, [sp, #8]
 8001738:	4581      	cmp	r9, r0
 800173a:	d906      	bls.n	800174a <__aeabi_dmul+0x1d6>
 800173c:	469a      	mov	sl, r3
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	025b      	lsls	r3, r3, #9
 8001742:	4699      	mov	r9, r3
 8001744:	44ca      	add	sl, r9
 8001746:	4653      	mov	r3, sl
 8001748:	9302      	str	r3, [sp, #8]
 800174a:	0c03      	lsrs	r3, r0, #16
 800174c:	469b      	mov	fp, r3
 800174e:	4643      	mov	r3, r8
 8001750:	041b      	lsls	r3, r3, #16
 8001752:	0400      	lsls	r0, r0, #16
 8001754:	0c1b      	lsrs	r3, r3, #16
 8001756:	4698      	mov	r8, r3
 8001758:	0003      	movs	r3, r0
 800175a:	4443      	add	r3, r8
 800175c:	9304      	str	r3, [sp, #16]
 800175e:	0c33      	lsrs	r3, r6, #16
 8001760:	4699      	mov	r9, r3
 8001762:	002b      	movs	r3, r5
 8001764:	0436      	lsls	r6, r6, #16
 8001766:	0c36      	lsrs	r6, r6, #16
 8001768:	4373      	muls	r3, r6
 800176a:	4698      	mov	r8, r3
 800176c:	0033      	movs	r3, r6
 800176e:	437b      	muls	r3, r7
 8001770:	469a      	mov	sl, r3
 8001772:	464b      	mov	r3, r9
 8001774:	435d      	muls	r5, r3
 8001776:	435f      	muls	r7, r3
 8001778:	4643      	mov	r3, r8
 800177a:	4455      	add	r5, sl
 800177c:	0c18      	lsrs	r0, r3, #16
 800177e:	1940      	adds	r0, r0, r5
 8001780:	4582      	cmp	sl, r0
 8001782:	d903      	bls.n	800178c <__aeabi_dmul+0x218>
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	025b      	lsls	r3, r3, #9
 8001788:	469a      	mov	sl, r3
 800178a:	4457      	add	r7, sl
 800178c:	0c05      	lsrs	r5, r0, #16
 800178e:	19eb      	adds	r3, r5, r7
 8001790:	9305      	str	r3, [sp, #20]
 8001792:	4643      	mov	r3, r8
 8001794:	041d      	lsls	r5, r3, #16
 8001796:	0c2d      	lsrs	r5, r5, #16
 8001798:	0400      	lsls	r0, r0, #16
 800179a:	1940      	adds	r0, r0, r5
 800179c:	0c25      	lsrs	r5, r4, #16
 800179e:	0424      	lsls	r4, r4, #16
 80017a0:	0c24      	lsrs	r4, r4, #16
 80017a2:	0027      	movs	r7, r4
 80017a4:	4357      	muls	r7, r2
 80017a6:	436a      	muls	r2, r5
 80017a8:	4690      	mov	r8, r2
 80017aa:	002a      	movs	r2, r5
 80017ac:	0c3b      	lsrs	r3, r7, #16
 80017ae:	469a      	mov	sl, r3
 80017b0:	434a      	muls	r2, r1
 80017b2:	4361      	muls	r1, r4
 80017b4:	4441      	add	r1, r8
 80017b6:	4451      	add	r1, sl
 80017b8:	4483      	add	fp, r0
 80017ba:	4588      	cmp	r8, r1
 80017bc:	d903      	bls.n	80017c6 <__aeabi_dmul+0x252>
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	025b      	lsls	r3, r3, #9
 80017c2:	4698      	mov	r8, r3
 80017c4:	4442      	add	r2, r8
 80017c6:	043f      	lsls	r7, r7, #16
 80017c8:	0c0b      	lsrs	r3, r1, #16
 80017ca:	0c3f      	lsrs	r7, r7, #16
 80017cc:	0409      	lsls	r1, r1, #16
 80017ce:	19c9      	adds	r1, r1, r7
 80017d0:	0027      	movs	r7, r4
 80017d2:	4698      	mov	r8, r3
 80017d4:	464b      	mov	r3, r9
 80017d6:	4377      	muls	r7, r6
 80017d8:	435c      	muls	r4, r3
 80017da:	436e      	muls	r6, r5
 80017dc:	435d      	muls	r5, r3
 80017de:	0c3b      	lsrs	r3, r7, #16
 80017e0:	4699      	mov	r9, r3
 80017e2:	19a4      	adds	r4, r4, r6
 80017e4:	444c      	add	r4, r9
 80017e6:	4442      	add	r2, r8
 80017e8:	9503      	str	r5, [sp, #12]
 80017ea:	42a6      	cmp	r6, r4
 80017ec:	d904      	bls.n	80017f8 <__aeabi_dmul+0x284>
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	025b      	lsls	r3, r3, #9
 80017f2:	4698      	mov	r8, r3
 80017f4:	4445      	add	r5, r8
 80017f6:	9503      	str	r5, [sp, #12]
 80017f8:	9b02      	ldr	r3, [sp, #8]
 80017fa:	043f      	lsls	r7, r7, #16
 80017fc:	445b      	add	r3, fp
 80017fe:	001e      	movs	r6, r3
 8001800:	4283      	cmp	r3, r0
 8001802:	4180      	sbcs	r0, r0
 8001804:	0423      	lsls	r3, r4, #16
 8001806:	4698      	mov	r8, r3
 8001808:	9b05      	ldr	r3, [sp, #20]
 800180a:	0c3f      	lsrs	r7, r7, #16
 800180c:	4447      	add	r7, r8
 800180e:	4698      	mov	r8, r3
 8001810:	1876      	adds	r6, r6, r1
 8001812:	428e      	cmp	r6, r1
 8001814:	4189      	sbcs	r1, r1
 8001816:	4447      	add	r7, r8
 8001818:	4240      	negs	r0, r0
 800181a:	183d      	adds	r5, r7, r0
 800181c:	46a8      	mov	r8, r5
 800181e:	4693      	mov	fp, r2
 8001820:	4249      	negs	r1, r1
 8001822:	468a      	mov	sl, r1
 8001824:	44c3      	add	fp, r8
 8001826:	429f      	cmp	r7, r3
 8001828:	41bf      	sbcs	r7, r7
 800182a:	4580      	cmp	r8, r0
 800182c:	4180      	sbcs	r0, r0
 800182e:	9b03      	ldr	r3, [sp, #12]
 8001830:	44da      	add	sl, fp
 8001832:	4698      	mov	r8, r3
 8001834:	4653      	mov	r3, sl
 8001836:	4240      	negs	r0, r0
 8001838:	427f      	negs	r7, r7
 800183a:	4307      	orrs	r7, r0
 800183c:	0c24      	lsrs	r4, r4, #16
 800183e:	4593      	cmp	fp, r2
 8001840:	4192      	sbcs	r2, r2
 8001842:	458a      	cmp	sl, r1
 8001844:	4189      	sbcs	r1, r1
 8001846:	193f      	adds	r7, r7, r4
 8001848:	0ddc      	lsrs	r4, r3, #23
 800184a:	9b04      	ldr	r3, [sp, #16]
 800184c:	0275      	lsls	r5, r6, #9
 800184e:	431d      	orrs	r5, r3
 8001850:	1e68      	subs	r0, r5, #1
 8001852:	4185      	sbcs	r5, r0
 8001854:	4653      	mov	r3, sl
 8001856:	4252      	negs	r2, r2
 8001858:	4249      	negs	r1, r1
 800185a:	430a      	orrs	r2, r1
 800185c:	18bf      	adds	r7, r7, r2
 800185e:	4447      	add	r7, r8
 8001860:	0df6      	lsrs	r6, r6, #23
 8001862:	027f      	lsls	r7, r7, #9
 8001864:	4335      	orrs	r5, r6
 8001866:	025a      	lsls	r2, r3, #9
 8001868:	433c      	orrs	r4, r7
 800186a:	4315      	orrs	r5, r2
 800186c:	01fb      	lsls	r3, r7, #7
 800186e:	d400      	bmi.n	8001872 <__aeabi_dmul+0x2fe>
 8001870:	e0c1      	b.n	80019f6 <__aeabi_dmul+0x482>
 8001872:	2101      	movs	r1, #1
 8001874:	086a      	lsrs	r2, r5, #1
 8001876:	400d      	ands	r5, r1
 8001878:	4315      	orrs	r5, r2
 800187a:	07e2      	lsls	r2, r4, #31
 800187c:	4315      	orrs	r5, r2
 800187e:	0864      	lsrs	r4, r4, #1
 8001880:	4926      	ldr	r1, [pc, #152]	; (800191c <__aeabi_dmul+0x3a8>)
 8001882:	4461      	add	r1, ip
 8001884:	2900      	cmp	r1, #0
 8001886:	dd56      	ble.n	8001936 <__aeabi_dmul+0x3c2>
 8001888:	076b      	lsls	r3, r5, #29
 800188a:	d009      	beq.n	80018a0 <__aeabi_dmul+0x32c>
 800188c:	220f      	movs	r2, #15
 800188e:	402a      	ands	r2, r5
 8001890:	2a04      	cmp	r2, #4
 8001892:	d005      	beq.n	80018a0 <__aeabi_dmul+0x32c>
 8001894:	1d2a      	adds	r2, r5, #4
 8001896:	42aa      	cmp	r2, r5
 8001898:	41ad      	sbcs	r5, r5
 800189a:	426d      	negs	r5, r5
 800189c:	1964      	adds	r4, r4, r5
 800189e:	0015      	movs	r5, r2
 80018a0:	01e3      	lsls	r3, r4, #7
 80018a2:	d504      	bpl.n	80018ae <__aeabi_dmul+0x33a>
 80018a4:	2180      	movs	r1, #128	; 0x80
 80018a6:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <__aeabi_dmul+0x3ac>)
 80018a8:	00c9      	lsls	r1, r1, #3
 80018aa:	4014      	ands	r4, r2
 80018ac:	4461      	add	r1, ip
 80018ae:	4a1d      	ldr	r2, [pc, #116]	; (8001924 <__aeabi_dmul+0x3b0>)
 80018b0:	4291      	cmp	r1, r2
 80018b2:	dd00      	ble.n	80018b6 <__aeabi_dmul+0x342>
 80018b4:	e724      	b.n	8001700 <__aeabi_dmul+0x18c>
 80018b6:	0762      	lsls	r2, r4, #29
 80018b8:	08ed      	lsrs	r5, r5, #3
 80018ba:	0264      	lsls	r4, r4, #9
 80018bc:	0549      	lsls	r1, r1, #21
 80018be:	4315      	orrs	r5, r2
 80018c0:	0b24      	lsrs	r4, r4, #12
 80018c2:	0d4a      	lsrs	r2, r1, #21
 80018c4:	e6c6      	b.n	8001654 <__aeabi_dmul+0xe0>
 80018c6:	9701      	str	r7, [sp, #4]
 80018c8:	e6b8      	b.n	800163c <__aeabi_dmul+0xc8>
 80018ca:	4a10      	ldr	r2, [pc, #64]	; (800190c <__aeabi_dmul+0x398>)
 80018cc:	2003      	movs	r0, #3
 80018ce:	4694      	mov	ip, r2
 80018d0:	4463      	add	r3, ip
 80018d2:	464a      	mov	r2, r9
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	2303      	movs	r3, #3
 80018d8:	431a      	orrs	r2, r3
 80018da:	4691      	mov	r9, r2
 80018dc:	4652      	mov	r2, sl
 80018de:	e68a      	b.n	80015f6 <__aeabi_dmul+0x82>
 80018e0:	4649      	mov	r1, r9
 80018e2:	2301      	movs	r3, #1
 80018e4:	4319      	orrs	r1, r3
 80018e6:	4689      	mov	r9, r1
 80018e8:	2600      	movs	r6, #0
 80018ea:	2001      	movs	r0, #1
 80018ec:	e683      	b.n	80015f6 <__aeabi_dmul+0x82>
 80018ee:	220c      	movs	r2, #12
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	2303      	movs	r3, #3
 80018f4:	0005      	movs	r5, r0
 80018f6:	4691      	mov	r9, r2
 80018f8:	469b      	mov	fp, r3
 80018fa:	e65e      	b.n	80015ba <__aeabi_dmul+0x46>
 80018fc:	2304      	movs	r3, #4
 80018fe:	4699      	mov	r9, r3
 8001900:	2300      	movs	r3, #0
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	3301      	adds	r3, #1
 8001906:	2400      	movs	r4, #0
 8001908:	469b      	mov	fp, r3
 800190a:	e656      	b.n	80015ba <__aeabi_dmul+0x46>
 800190c:	000007ff 	.word	0x000007ff
 8001910:	fffffc01 	.word	0xfffffc01
 8001914:	08005570 	.word	0x08005570
 8001918:	fffffc0d 	.word	0xfffffc0d
 800191c:	000003ff 	.word	0x000003ff
 8001920:	feffffff 	.word	0xfeffffff
 8001924:	000007fe 	.word	0x000007fe
 8001928:	2300      	movs	r3, #0
 800192a:	2480      	movs	r4, #128	; 0x80
 800192c:	2500      	movs	r5, #0
 800192e:	4a44      	ldr	r2, [pc, #272]	; (8001a40 <__aeabi_dmul+0x4cc>)
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	0324      	lsls	r4, r4, #12
 8001934:	e68e      	b.n	8001654 <__aeabi_dmul+0xe0>
 8001936:	2001      	movs	r0, #1
 8001938:	1a40      	subs	r0, r0, r1
 800193a:	2838      	cmp	r0, #56	; 0x38
 800193c:	dd00      	ble.n	8001940 <__aeabi_dmul+0x3cc>
 800193e:	e686      	b.n	800164e <__aeabi_dmul+0xda>
 8001940:	281f      	cmp	r0, #31
 8001942:	dd5b      	ble.n	80019fc <__aeabi_dmul+0x488>
 8001944:	221f      	movs	r2, #31
 8001946:	0023      	movs	r3, r4
 8001948:	4252      	negs	r2, r2
 800194a:	1a51      	subs	r1, r2, r1
 800194c:	40cb      	lsrs	r3, r1
 800194e:	0019      	movs	r1, r3
 8001950:	2820      	cmp	r0, #32
 8001952:	d003      	beq.n	800195c <__aeabi_dmul+0x3e8>
 8001954:	4a3b      	ldr	r2, [pc, #236]	; (8001a44 <__aeabi_dmul+0x4d0>)
 8001956:	4462      	add	r2, ip
 8001958:	4094      	lsls	r4, r2
 800195a:	4325      	orrs	r5, r4
 800195c:	1e6a      	subs	r2, r5, #1
 800195e:	4195      	sbcs	r5, r2
 8001960:	002a      	movs	r2, r5
 8001962:	430a      	orrs	r2, r1
 8001964:	2107      	movs	r1, #7
 8001966:	000d      	movs	r5, r1
 8001968:	2400      	movs	r4, #0
 800196a:	4015      	ands	r5, r2
 800196c:	4211      	tst	r1, r2
 800196e:	d05b      	beq.n	8001a28 <__aeabi_dmul+0x4b4>
 8001970:	210f      	movs	r1, #15
 8001972:	2400      	movs	r4, #0
 8001974:	4011      	ands	r1, r2
 8001976:	2904      	cmp	r1, #4
 8001978:	d053      	beq.n	8001a22 <__aeabi_dmul+0x4ae>
 800197a:	1d11      	adds	r1, r2, #4
 800197c:	4291      	cmp	r1, r2
 800197e:	4192      	sbcs	r2, r2
 8001980:	4252      	negs	r2, r2
 8001982:	18a4      	adds	r4, r4, r2
 8001984:	000a      	movs	r2, r1
 8001986:	0223      	lsls	r3, r4, #8
 8001988:	d54b      	bpl.n	8001a22 <__aeabi_dmul+0x4ae>
 800198a:	2201      	movs	r2, #1
 800198c:	2400      	movs	r4, #0
 800198e:	2500      	movs	r5, #0
 8001990:	e660      	b.n	8001654 <__aeabi_dmul+0xe0>
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	031b      	lsls	r3, r3, #12
 8001996:	421c      	tst	r4, r3
 8001998:	d009      	beq.n	80019ae <__aeabi_dmul+0x43a>
 800199a:	421e      	tst	r6, r3
 800199c:	d107      	bne.n	80019ae <__aeabi_dmul+0x43a>
 800199e:	4333      	orrs	r3, r6
 80019a0:	031c      	lsls	r4, r3, #12
 80019a2:	4643      	mov	r3, r8
 80019a4:	0015      	movs	r5, r2
 80019a6:	0b24      	lsrs	r4, r4, #12
 80019a8:	4a25      	ldr	r2, [pc, #148]	; (8001a40 <__aeabi_dmul+0x4cc>)
 80019aa:	9301      	str	r3, [sp, #4]
 80019ac:	e652      	b.n	8001654 <__aeabi_dmul+0xe0>
 80019ae:	2280      	movs	r2, #128	; 0x80
 80019b0:	0312      	lsls	r2, r2, #12
 80019b2:	4314      	orrs	r4, r2
 80019b4:	0324      	lsls	r4, r4, #12
 80019b6:	4a22      	ldr	r2, [pc, #136]	; (8001a40 <__aeabi_dmul+0x4cc>)
 80019b8:	0b24      	lsrs	r4, r4, #12
 80019ba:	9701      	str	r7, [sp, #4]
 80019bc:	e64a      	b.n	8001654 <__aeabi_dmul+0xe0>
 80019be:	f000 fd33 	bl	8002428 <__clzsi2>
 80019c2:	0003      	movs	r3, r0
 80019c4:	001a      	movs	r2, r3
 80019c6:	3215      	adds	r2, #21
 80019c8:	3020      	adds	r0, #32
 80019ca:	2a1c      	cmp	r2, #28
 80019cc:	dc00      	bgt.n	80019d0 <__aeabi_dmul+0x45c>
 80019ce:	e684      	b.n	80016da <__aeabi_dmul+0x166>
 80019d0:	4656      	mov	r6, sl
 80019d2:	3b08      	subs	r3, #8
 80019d4:	2200      	movs	r2, #0
 80019d6:	409e      	lsls	r6, r3
 80019d8:	e689      	b.n	80016ee <__aeabi_dmul+0x17a>
 80019da:	f000 fd25 	bl	8002428 <__clzsi2>
 80019de:	0001      	movs	r1, r0
 80019e0:	0002      	movs	r2, r0
 80019e2:	3115      	adds	r1, #21
 80019e4:	3220      	adds	r2, #32
 80019e6:	291c      	cmp	r1, #28
 80019e8:	dc00      	bgt.n	80019ec <__aeabi_dmul+0x478>
 80019ea:	e64e      	b.n	800168a <__aeabi_dmul+0x116>
 80019ec:	0034      	movs	r4, r6
 80019ee:	3808      	subs	r0, #8
 80019f0:	2500      	movs	r5, #0
 80019f2:	4084      	lsls	r4, r0
 80019f4:	e653      	b.n	800169e <__aeabi_dmul+0x12a>
 80019f6:	9b00      	ldr	r3, [sp, #0]
 80019f8:	469c      	mov	ip, r3
 80019fa:	e741      	b.n	8001880 <__aeabi_dmul+0x30c>
 80019fc:	4912      	ldr	r1, [pc, #72]	; (8001a48 <__aeabi_dmul+0x4d4>)
 80019fe:	0022      	movs	r2, r4
 8001a00:	4461      	add	r1, ip
 8001a02:	002e      	movs	r6, r5
 8001a04:	408d      	lsls	r5, r1
 8001a06:	408a      	lsls	r2, r1
 8001a08:	40c6      	lsrs	r6, r0
 8001a0a:	1e69      	subs	r1, r5, #1
 8001a0c:	418d      	sbcs	r5, r1
 8001a0e:	4332      	orrs	r2, r6
 8001a10:	432a      	orrs	r2, r5
 8001a12:	40c4      	lsrs	r4, r0
 8001a14:	0753      	lsls	r3, r2, #29
 8001a16:	d0b6      	beq.n	8001986 <__aeabi_dmul+0x412>
 8001a18:	210f      	movs	r1, #15
 8001a1a:	4011      	ands	r1, r2
 8001a1c:	2904      	cmp	r1, #4
 8001a1e:	d1ac      	bne.n	800197a <__aeabi_dmul+0x406>
 8001a20:	e7b1      	b.n	8001986 <__aeabi_dmul+0x412>
 8001a22:	0765      	lsls	r5, r4, #29
 8001a24:	0264      	lsls	r4, r4, #9
 8001a26:	0b24      	lsrs	r4, r4, #12
 8001a28:	08d2      	lsrs	r2, r2, #3
 8001a2a:	4315      	orrs	r5, r2
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	e611      	b.n	8001654 <__aeabi_dmul+0xe0>
 8001a30:	2280      	movs	r2, #128	; 0x80
 8001a32:	0312      	lsls	r2, r2, #12
 8001a34:	4314      	orrs	r4, r2
 8001a36:	0324      	lsls	r4, r4, #12
 8001a38:	4a01      	ldr	r2, [pc, #4]	; (8001a40 <__aeabi_dmul+0x4cc>)
 8001a3a:	0b24      	lsrs	r4, r4, #12
 8001a3c:	e60a      	b.n	8001654 <__aeabi_dmul+0xe0>
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	000007ff 	.word	0x000007ff
 8001a44:	0000043e 	.word	0x0000043e
 8001a48:	0000041e 	.word	0x0000041e

08001a4c <__aeabi_dsub>:
 8001a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a4e:	4657      	mov	r7, sl
 8001a50:	464e      	mov	r6, r9
 8001a52:	4645      	mov	r5, r8
 8001a54:	46de      	mov	lr, fp
 8001a56:	0004      	movs	r4, r0
 8001a58:	b5e0      	push	{r5, r6, r7, lr}
 8001a5a:	001f      	movs	r7, r3
 8001a5c:	0010      	movs	r0, r2
 8001a5e:	030b      	lsls	r3, r1, #12
 8001a60:	0f62      	lsrs	r2, r4, #29
 8001a62:	004e      	lsls	r6, r1, #1
 8001a64:	0fcd      	lsrs	r5, r1, #31
 8001a66:	0a5b      	lsrs	r3, r3, #9
 8001a68:	0339      	lsls	r1, r7, #12
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	0a49      	lsrs	r1, r1, #9
 8001a6e:	00e2      	lsls	r2, r4, #3
 8001a70:	0f44      	lsrs	r4, r0, #29
 8001a72:	4321      	orrs	r1, r4
 8001a74:	4cc2      	ldr	r4, [pc, #776]	; (8001d80 <__aeabi_dsub+0x334>)
 8001a76:	4691      	mov	r9, r2
 8001a78:	4692      	mov	sl, r2
 8001a7a:	00c0      	lsls	r0, r0, #3
 8001a7c:	007a      	lsls	r2, r7, #1
 8001a7e:	4680      	mov	r8, r0
 8001a80:	0d76      	lsrs	r6, r6, #21
 8001a82:	0d52      	lsrs	r2, r2, #21
 8001a84:	0fff      	lsrs	r7, r7, #31
 8001a86:	42a2      	cmp	r2, r4
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dsub+0x40>
 8001a8a:	e0b4      	b.n	8001bf6 <__aeabi_dsub+0x1aa>
 8001a8c:	2401      	movs	r4, #1
 8001a8e:	4067      	eors	r7, r4
 8001a90:	46bb      	mov	fp, r7
 8001a92:	42bd      	cmp	r5, r7
 8001a94:	d100      	bne.n	8001a98 <__aeabi_dsub+0x4c>
 8001a96:	e088      	b.n	8001baa <__aeabi_dsub+0x15e>
 8001a98:	1ab4      	subs	r4, r6, r2
 8001a9a:	46a4      	mov	ip, r4
 8001a9c:	2c00      	cmp	r4, #0
 8001a9e:	dc00      	bgt.n	8001aa2 <__aeabi_dsub+0x56>
 8001aa0:	e0b2      	b.n	8001c08 <__aeabi_dsub+0x1bc>
 8001aa2:	2a00      	cmp	r2, #0
 8001aa4:	d100      	bne.n	8001aa8 <__aeabi_dsub+0x5c>
 8001aa6:	e0c5      	b.n	8001c34 <__aeabi_dsub+0x1e8>
 8001aa8:	4ab5      	ldr	r2, [pc, #724]	; (8001d80 <__aeabi_dsub+0x334>)
 8001aaa:	4296      	cmp	r6, r2
 8001aac:	d100      	bne.n	8001ab0 <__aeabi_dsub+0x64>
 8001aae:	e28b      	b.n	8001fc8 <__aeabi_dsub+0x57c>
 8001ab0:	2280      	movs	r2, #128	; 0x80
 8001ab2:	0412      	lsls	r2, r2, #16
 8001ab4:	4311      	orrs	r1, r2
 8001ab6:	4662      	mov	r2, ip
 8001ab8:	2a38      	cmp	r2, #56	; 0x38
 8001aba:	dd00      	ble.n	8001abe <__aeabi_dsub+0x72>
 8001abc:	e1a1      	b.n	8001e02 <__aeabi_dsub+0x3b6>
 8001abe:	2a1f      	cmp	r2, #31
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dsub+0x78>
 8001ac2:	e216      	b.n	8001ef2 <__aeabi_dsub+0x4a6>
 8001ac4:	2720      	movs	r7, #32
 8001ac6:	000c      	movs	r4, r1
 8001ac8:	1abf      	subs	r7, r7, r2
 8001aca:	40bc      	lsls	r4, r7
 8001acc:	0002      	movs	r2, r0
 8001ace:	46a0      	mov	r8, r4
 8001ad0:	4664      	mov	r4, ip
 8001ad2:	40b8      	lsls	r0, r7
 8001ad4:	40e2      	lsrs	r2, r4
 8001ad6:	4644      	mov	r4, r8
 8001ad8:	4314      	orrs	r4, r2
 8001ada:	0002      	movs	r2, r0
 8001adc:	1e50      	subs	r0, r2, #1
 8001ade:	4182      	sbcs	r2, r0
 8001ae0:	4660      	mov	r0, ip
 8001ae2:	40c1      	lsrs	r1, r0
 8001ae4:	4322      	orrs	r2, r4
 8001ae6:	1a5b      	subs	r3, r3, r1
 8001ae8:	4649      	mov	r1, r9
 8001aea:	1a8c      	subs	r4, r1, r2
 8001aec:	45a1      	cmp	r9, r4
 8001aee:	4192      	sbcs	r2, r2
 8001af0:	4252      	negs	r2, r2
 8001af2:	1a9b      	subs	r3, r3, r2
 8001af4:	4698      	mov	r8, r3
 8001af6:	4643      	mov	r3, r8
 8001af8:	021b      	lsls	r3, r3, #8
 8001afa:	d400      	bmi.n	8001afe <__aeabi_dsub+0xb2>
 8001afc:	e117      	b.n	8001d2e <__aeabi_dsub+0x2e2>
 8001afe:	4643      	mov	r3, r8
 8001b00:	025b      	lsls	r3, r3, #9
 8001b02:	0a5b      	lsrs	r3, r3, #9
 8001b04:	4698      	mov	r8, r3
 8001b06:	4643      	mov	r3, r8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d100      	bne.n	8001b0e <__aeabi_dsub+0xc2>
 8001b0c:	e16c      	b.n	8001de8 <__aeabi_dsub+0x39c>
 8001b0e:	4640      	mov	r0, r8
 8001b10:	f000 fc8a 	bl	8002428 <__clzsi2>
 8001b14:	0002      	movs	r2, r0
 8001b16:	3a08      	subs	r2, #8
 8001b18:	2120      	movs	r1, #32
 8001b1a:	0020      	movs	r0, r4
 8001b1c:	4643      	mov	r3, r8
 8001b1e:	1a89      	subs	r1, r1, r2
 8001b20:	4093      	lsls	r3, r2
 8001b22:	40c8      	lsrs	r0, r1
 8001b24:	4094      	lsls	r4, r2
 8001b26:	4303      	orrs	r3, r0
 8001b28:	4296      	cmp	r6, r2
 8001b2a:	dd00      	ble.n	8001b2e <__aeabi_dsub+0xe2>
 8001b2c:	e157      	b.n	8001dde <__aeabi_dsub+0x392>
 8001b2e:	1b96      	subs	r6, r2, r6
 8001b30:	1c71      	adds	r1, r6, #1
 8001b32:	291f      	cmp	r1, #31
 8001b34:	dd00      	ble.n	8001b38 <__aeabi_dsub+0xec>
 8001b36:	e1cb      	b.n	8001ed0 <__aeabi_dsub+0x484>
 8001b38:	2220      	movs	r2, #32
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	0026      	movs	r6, r4
 8001b3e:	1a52      	subs	r2, r2, r1
 8001b40:	4094      	lsls	r4, r2
 8001b42:	4090      	lsls	r0, r2
 8001b44:	40ce      	lsrs	r6, r1
 8001b46:	40cb      	lsrs	r3, r1
 8001b48:	1e62      	subs	r2, r4, #1
 8001b4a:	4194      	sbcs	r4, r2
 8001b4c:	4330      	orrs	r0, r6
 8001b4e:	4698      	mov	r8, r3
 8001b50:	2600      	movs	r6, #0
 8001b52:	4304      	orrs	r4, r0
 8001b54:	0763      	lsls	r3, r4, #29
 8001b56:	d009      	beq.n	8001b6c <__aeabi_dsub+0x120>
 8001b58:	230f      	movs	r3, #15
 8001b5a:	4023      	ands	r3, r4
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	d005      	beq.n	8001b6c <__aeabi_dsub+0x120>
 8001b60:	1d23      	adds	r3, r4, #4
 8001b62:	42a3      	cmp	r3, r4
 8001b64:	41a4      	sbcs	r4, r4
 8001b66:	4264      	negs	r4, r4
 8001b68:	44a0      	add	r8, r4
 8001b6a:	001c      	movs	r4, r3
 8001b6c:	4643      	mov	r3, r8
 8001b6e:	021b      	lsls	r3, r3, #8
 8001b70:	d400      	bmi.n	8001b74 <__aeabi_dsub+0x128>
 8001b72:	e0df      	b.n	8001d34 <__aeabi_dsub+0x2e8>
 8001b74:	4b82      	ldr	r3, [pc, #520]	; (8001d80 <__aeabi_dsub+0x334>)
 8001b76:	3601      	adds	r6, #1
 8001b78:	429e      	cmp	r6, r3
 8001b7a:	d100      	bne.n	8001b7e <__aeabi_dsub+0x132>
 8001b7c:	e0fb      	b.n	8001d76 <__aeabi_dsub+0x32a>
 8001b7e:	4642      	mov	r2, r8
 8001b80:	4b80      	ldr	r3, [pc, #512]	; (8001d84 <__aeabi_dsub+0x338>)
 8001b82:	08e4      	lsrs	r4, r4, #3
 8001b84:	401a      	ands	r2, r3
 8001b86:	0013      	movs	r3, r2
 8001b88:	0571      	lsls	r1, r6, #21
 8001b8a:	0752      	lsls	r2, r2, #29
 8001b8c:	025b      	lsls	r3, r3, #9
 8001b8e:	4322      	orrs	r2, r4
 8001b90:	0b1b      	lsrs	r3, r3, #12
 8001b92:	0d49      	lsrs	r1, r1, #21
 8001b94:	0509      	lsls	r1, r1, #20
 8001b96:	07ed      	lsls	r5, r5, #31
 8001b98:	4319      	orrs	r1, r3
 8001b9a:	4329      	orrs	r1, r5
 8001b9c:	0010      	movs	r0, r2
 8001b9e:	bcf0      	pop	{r4, r5, r6, r7}
 8001ba0:	46bb      	mov	fp, r7
 8001ba2:	46b2      	mov	sl, r6
 8001ba4:	46a9      	mov	r9, r5
 8001ba6:	46a0      	mov	r8, r4
 8001ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001baa:	1ab4      	subs	r4, r6, r2
 8001bac:	46a4      	mov	ip, r4
 8001bae:	2c00      	cmp	r4, #0
 8001bb0:	dd58      	ble.n	8001c64 <__aeabi_dsub+0x218>
 8001bb2:	2a00      	cmp	r2, #0
 8001bb4:	d100      	bne.n	8001bb8 <__aeabi_dsub+0x16c>
 8001bb6:	e09e      	b.n	8001cf6 <__aeabi_dsub+0x2aa>
 8001bb8:	4a71      	ldr	r2, [pc, #452]	; (8001d80 <__aeabi_dsub+0x334>)
 8001bba:	4296      	cmp	r6, r2
 8001bbc:	d100      	bne.n	8001bc0 <__aeabi_dsub+0x174>
 8001bbe:	e13b      	b.n	8001e38 <__aeabi_dsub+0x3ec>
 8001bc0:	2280      	movs	r2, #128	; 0x80
 8001bc2:	0412      	lsls	r2, r2, #16
 8001bc4:	4311      	orrs	r1, r2
 8001bc6:	4662      	mov	r2, ip
 8001bc8:	2a38      	cmp	r2, #56	; 0x38
 8001bca:	dd00      	ble.n	8001bce <__aeabi_dsub+0x182>
 8001bcc:	e0c1      	b.n	8001d52 <__aeabi_dsub+0x306>
 8001bce:	2a1f      	cmp	r2, #31
 8001bd0:	dc00      	bgt.n	8001bd4 <__aeabi_dsub+0x188>
 8001bd2:	e1bb      	b.n	8001f4c <__aeabi_dsub+0x500>
 8001bd4:	000c      	movs	r4, r1
 8001bd6:	3a20      	subs	r2, #32
 8001bd8:	40d4      	lsrs	r4, r2
 8001bda:	0022      	movs	r2, r4
 8001bdc:	4664      	mov	r4, ip
 8001bde:	2c20      	cmp	r4, #32
 8001be0:	d004      	beq.n	8001bec <__aeabi_dsub+0x1a0>
 8001be2:	2740      	movs	r7, #64	; 0x40
 8001be4:	1b3f      	subs	r7, r7, r4
 8001be6:	40b9      	lsls	r1, r7
 8001be8:	4308      	orrs	r0, r1
 8001bea:	4680      	mov	r8, r0
 8001bec:	4644      	mov	r4, r8
 8001bee:	1e61      	subs	r1, r4, #1
 8001bf0:	418c      	sbcs	r4, r1
 8001bf2:	4314      	orrs	r4, r2
 8001bf4:	e0b1      	b.n	8001d5a <__aeabi_dsub+0x30e>
 8001bf6:	000c      	movs	r4, r1
 8001bf8:	4304      	orrs	r4, r0
 8001bfa:	d02a      	beq.n	8001c52 <__aeabi_dsub+0x206>
 8001bfc:	46bb      	mov	fp, r7
 8001bfe:	42bd      	cmp	r5, r7
 8001c00:	d02d      	beq.n	8001c5e <__aeabi_dsub+0x212>
 8001c02:	4c61      	ldr	r4, [pc, #388]	; (8001d88 <__aeabi_dsub+0x33c>)
 8001c04:	46a4      	mov	ip, r4
 8001c06:	44b4      	add	ip, r6
 8001c08:	4664      	mov	r4, ip
 8001c0a:	2c00      	cmp	r4, #0
 8001c0c:	d05c      	beq.n	8001cc8 <__aeabi_dsub+0x27c>
 8001c0e:	1b94      	subs	r4, r2, r6
 8001c10:	46a4      	mov	ip, r4
 8001c12:	2e00      	cmp	r6, #0
 8001c14:	d000      	beq.n	8001c18 <__aeabi_dsub+0x1cc>
 8001c16:	e115      	b.n	8001e44 <__aeabi_dsub+0x3f8>
 8001c18:	464d      	mov	r5, r9
 8001c1a:	431d      	orrs	r5, r3
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_dsub+0x1d4>
 8001c1e:	e1c3      	b.n	8001fa8 <__aeabi_dsub+0x55c>
 8001c20:	1e65      	subs	r5, r4, #1
 8001c22:	2c01      	cmp	r4, #1
 8001c24:	d100      	bne.n	8001c28 <__aeabi_dsub+0x1dc>
 8001c26:	e20c      	b.n	8002042 <__aeabi_dsub+0x5f6>
 8001c28:	4e55      	ldr	r6, [pc, #340]	; (8001d80 <__aeabi_dsub+0x334>)
 8001c2a:	42b4      	cmp	r4, r6
 8001c2c:	d100      	bne.n	8001c30 <__aeabi_dsub+0x1e4>
 8001c2e:	e1f8      	b.n	8002022 <__aeabi_dsub+0x5d6>
 8001c30:	46ac      	mov	ip, r5
 8001c32:	e10e      	b.n	8001e52 <__aeabi_dsub+0x406>
 8001c34:	000a      	movs	r2, r1
 8001c36:	4302      	orrs	r2, r0
 8001c38:	d100      	bne.n	8001c3c <__aeabi_dsub+0x1f0>
 8001c3a:	e136      	b.n	8001eaa <__aeabi_dsub+0x45e>
 8001c3c:	0022      	movs	r2, r4
 8001c3e:	3a01      	subs	r2, #1
 8001c40:	2c01      	cmp	r4, #1
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dsub+0x1fa>
 8001c44:	e1c6      	b.n	8001fd4 <__aeabi_dsub+0x588>
 8001c46:	4c4e      	ldr	r4, [pc, #312]	; (8001d80 <__aeabi_dsub+0x334>)
 8001c48:	45a4      	cmp	ip, r4
 8001c4a:	d100      	bne.n	8001c4e <__aeabi_dsub+0x202>
 8001c4c:	e0f4      	b.n	8001e38 <__aeabi_dsub+0x3ec>
 8001c4e:	4694      	mov	ip, r2
 8001c50:	e731      	b.n	8001ab6 <__aeabi_dsub+0x6a>
 8001c52:	2401      	movs	r4, #1
 8001c54:	4067      	eors	r7, r4
 8001c56:	46bb      	mov	fp, r7
 8001c58:	42bd      	cmp	r5, r7
 8001c5a:	d000      	beq.n	8001c5e <__aeabi_dsub+0x212>
 8001c5c:	e71c      	b.n	8001a98 <__aeabi_dsub+0x4c>
 8001c5e:	4c4a      	ldr	r4, [pc, #296]	; (8001d88 <__aeabi_dsub+0x33c>)
 8001c60:	46a4      	mov	ip, r4
 8001c62:	44b4      	add	ip, r6
 8001c64:	4664      	mov	r4, ip
 8001c66:	2c00      	cmp	r4, #0
 8001c68:	d100      	bne.n	8001c6c <__aeabi_dsub+0x220>
 8001c6a:	e0cf      	b.n	8001e0c <__aeabi_dsub+0x3c0>
 8001c6c:	1b94      	subs	r4, r2, r6
 8001c6e:	46a4      	mov	ip, r4
 8001c70:	2e00      	cmp	r6, #0
 8001c72:	d100      	bne.n	8001c76 <__aeabi_dsub+0x22a>
 8001c74:	e15c      	b.n	8001f30 <__aeabi_dsub+0x4e4>
 8001c76:	4e42      	ldr	r6, [pc, #264]	; (8001d80 <__aeabi_dsub+0x334>)
 8001c78:	42b2      	cmp	r2, r6
 8001c7a:	d100      	bne.n	8001c7e <__aeabi_dsub+0x232>
 8001c7c:	e1ec      	b.n	8002058 <__aeabi_dsub+0x60c>
 8001c7e:	2680      	movs	r6, #128	; 0x80
 8001c80:	0436      	lsls	r6, r6, #16
 8001c82:	4333      	orrs	r3, r6
 8001c84:	4664      	mov	r4, ip
 8001c86:	2c38      	cmp	r4, #56	; 0x38
 8001c88:	dd00      	ble.n	8001c8c <__aeabi_dsub+0x240>
 8001c8a:	e1b3      	b.n	8001ff4 <__aeabi_dsub+0x5a8>
 8001c8c:	2c1f      	cmp	r4, #31
 8001c8e:	dd00      	ble.n	8001c92 <__aeabi_dsub+0x246>
 8001c90:	e238      	b.n	8002104 <__aeabi_dsub+0x6b8>
 8001c92:	2620      	movs	r6, #32
 8001c94:	1b36      	subs	r6, r6, r4
 8001c96:	001c      	movs	r4, r3
 8001c98:	40b4      	lsls	r4, r6
 8001c9a:	464f      	mov	r7, r9
 8001c9c:	46a0      	mov	r8, r4
 8001c9e:	4664      	mov	r4, ip
 8001ca0:	40e7      	lsrs	r7, r4
 8001ca2:	4644      	mov	r4, r8
 8001ca4:	433c      	orrs	r4, r7
 8001ca6:	464f      	mov	r7, r9
 8001ca8:	40b7      	lsls	r7, r6
 8001caa:	003e      	movs	r6, r7
 8001cac:	1e77      	subs	r7, r6, #1
 8001cae:	41be      	sbcs	r6, r7
 8001cb0:	4334      	orrs	r4, r6
 8001cb2:	4666      	mov	r6, ip
 8001cb4:	40f3      	lsrs	r3, r6
 8001cb6:	18c9      	adds	r1, r1, r3
 8001cb8:	1824      	adds	r4, r4, r0
 8001cba:	4284      	cmp	r4, r0
 8001cbc:	419b      	sbcs	r3, r3
 8001cbe:	425b      	negs	r3, r3
 8001cc0:	4698      	mov	r8, r3
 8001cc2:	0016      	movs	r6, r2
 8001cc4:	4488      	add	r8, r1
 8001cc6:	e04e      	b.n	8001d66 <__aeabi_dsub+0x31a>
 8001cc8:	4a30      	ldr	r2, [pc, #192]	; (8001d8c <__aeabi_dsub+0x340>)
 8001cca:	1c74      	adds	r4, r6, #1
 8001ccc:	4214      	tst	r4, r2
 8001cce:	d000      	beq.n	8001cd2 <__aeabi_dsub+0x286>
 8001cd0:	e0d6      	b.n	8001e80 <__aeabi_dsub+0x434>
 8001cd2:	464a      	mov	r2, r9
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	2e00      	cmp	r6, #0
 8001cd8:	d000      	beq.n	8001cdc <__aeabi_dsub+0x290>
 8001cda:	e15b      	b.n	8001f94 <__aeabi_dsub+0x548>
 8001cdc:	2a00      	cmp	r2, #0
 8001cde:	d100      	bne.n	8001ce2 <__aeabi_dsub+0x296>
 8001ce0:	e1a5      	b.n	800202e <__aeabi_dsub+0x5e2>
 8001ce2:	000a      	movs	r2, r1
 8001ce4:	4302      	orrs	r2, r0
 8001ce6:	d000      	beq.n	8001cea <__aeabi_dsub+0x29e>
 8001ce8:	e1bb      	b.n	8002062 <__aeabi_dsub+0x616>
 8001cea:	464a      	mov	r2, r9
 8001cec:	0759      	lsls	r1, r3, #29
 8001cee:	08d2      	lsrs	r2, r2, #3
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	08db      	lsrs	r3, r3, #3
 8001cf4:	e027      	b.n	8001d46 <__aeabi_dsub+0x2fa>
 8001cf6:	000a      	movs	r2, r1
 8001cf8:	4302      	orrs	r2, r0
 8001cfa:	d100      	bne.n	8001cfe <__aeabi_dsub+0x2b2>
 8001cfc:	e174      	b.n	8001fe8 <__aeabi_dsub+0x59c>
 8001cfe:	0022      	movs	r2, r4
 8001d00:	3a01      	subs	r2, #1
 8001d02:	2c01      	cmp	r4, #1
 8001d04:	d005      	beq.n	8001d12 <__aeabi_dsub+0x2c6>
 8001d06:	4c1e      	ldr	r4, [pc, #120]	; (8001d80 <__aeabi_dsub+0x334>)
 8001d08:	45a4      	cmp	ip, r4
 8001d0a:	d100      	bne.n	8001d0e <__aeabi_dsub+0x2c2>
 8001d0c:	e094      	b.n	8001e38 <__aeabi_dsub+0x3ec>
 8001d0e:	4694      	mov	ip, r2
 8001d10:	e759      	b.n	8001bc6 <__aeabi_dsub+0x17a>
 8001d12:	4448      	add	r0, r9
 8001d14:	4548      	cmp	r0, r9
 8001d16:	4192      	sbcs	r2, r2
 8001d18:	185b      	adds	r3, r3, r1
 8001d1a:	4698      	mov	r8, r3
 8001d1c:	0004      	movs	r4, r0
 8001d1e:	4252      	negs	r2, r2
 8001d20:	4490      	add	r8, r2
 8001d22:	4643      	mov	r3, r8
 8001d24:	2602      	movs	r6, #2
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	d500      	bpl.n	8001d2c <__aeabi_dsub+0x2e0>
 8001d2a:	e0c4      	b.n	8001eb6 <__aeabi_dsub+0x46a>
 8001d2c:	3e01      	subs	r6, #1
 8001d2e:	0763      	lsls	r3, r4, #29
 8001d30:	d000      	beq.n	8001d34 <__aeabi_dsub+0x2e8>
 8001d32:	e711      	b.n	8001b58 <__aeabi_dsub+0x10c>
 8001d34:	4643      	mov	r3, r8
 8001d36:	46b4      	mov	ip, r6
 8001d38:	0759      	lsls	r1, r3, #29
 8001d3a:	08e2      	lsrs	r2, r4, #3
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	08db      	lsrs	r3, r3, #3
 8001d40:	490f      	ldr	r1, [pc, #60]	; (8001d80 <__aeabi_dsub+0x334>)
 8001d42:	458c      	cmp	ip, r1
 8001d44:	d040      	beq.n	8001dc8 <__aeabi_dsub+0x37c>
 8001d46:	4661      	mov	r1, ip
 8001d48:	031b      	lsls	r3, r3, #12
 8001d4a:	0549      	lsls	r1, r1, #21
 8001d4c:	0b1b      	lsrs	r3, r3, #12
 8001d4e:	0d49      	lsrs	r1, r1, #21
 8001d50:	e720      	b.n	8001b94 <__aeabi_dsub+0x148>
 8001d52:	4301      	orrs	r1, r0
 8001d54:	000c      	movs	r4, r1
 8001d56:	1e61      	subs	r1, r4, #1
 8001d58:	418c      	sbcs	r4, r1
 8001d5a:	444c      	add	r4, r9
 8001d5c:	454c      	cmp	r4, r9
 8001d5e:	4192      	sbcs	r2, r2
 8001d60:	4252      	negs	r2, r2
 8001d62:	4690      	mov	r8, r2
 8001d64:	4498      	add	r8, r3
 8001d66:	4643      	mov	r3, r8
 8001d68:	021b      	lsls	r3, r3, #8
 8001d6a:	d5e0      	bpl.n	8001d2e <__aeabi_dsub+0x2e2>
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <__aeabi_dsub+0x334>)
 8001d6e:	3601      	adds	r6, #1
 8001d70:	429e      	cmp	r6, r3
 8001d72:	d000      	beq.n	8001d76 <__aeabi_dsub+0x32a>
 8001d74:	e09f      	b.n	8001eb6 <__aeabi_dsub+0x46a>
 8001d76:	0031      	movs	r1, r6
 8001d78:	2300      	movs	r3, #0
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	e70a      	b.n	8001b94 <__aeabi_dsub+0x148>
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	000007ff 	.word	0x000007ff
 8001d84:	ff7fffff 	.word	0xff7fffff
 8001d88:	fffff801 	.word	0xfffff801
 8001d8c:	000007fe 	.word	0x000007fe
 8001d90:	2a00      	cmp	r2, #0
 8001d92:	d100      	bne.n	8001d96 <__aeabi_dsub+0x34a>
 8001d94:	e160      	b.n	8002058 <__aeabi_dsub+0x60c>
 8001d96:	000a      	movs	r2, r1
 8001d98:	4302      	orrs	r2, r0
 8001d9a:	d04d      	beq.n	8001e38 <__aeabi_dsub+0x3ec>
 8001d9c:	464a      	mov	r2, r9
 8001d9e:	075c      	lsls	r4, r3, #29
 8001da0:	08d2      	lsrs	r2, r2, #3
 8001da2:	4322      	orrs	r2, r4
 8001da4:	2480      	movs	r4, #128	; 0x80
 8001da6:	08db      	lsrs	r3, r3, #3
 8001da8:	0324      	lsls	r4, r4, #12
 8001daa:	4223      	tst	r3, r4
 8001dac:	d007      	beq.n	8001dbe <__aeabi_dsub+0x372>
 8001dae:	08ce      	lsrs	r6, r1, #3
 8001db0:	4226      	tst	r6, r4
 8001db2:	d104      	bne.n	8001dbe <__aeabi_dsub+0x372>
 8001db4:	465d      	mov	r5, fp
 8001db6:	0033      	movs	r3, r6
 8001db8:	08c2      	lsrs	r2, r0, #3
 8001dba:	0749      	lsls	r1, r1, #29
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	0f51      	lsrs	r1, r2, #29
 8001dc0:	00d2      	lsls	r2, r2, #3
 8001dc2:	08d2      	lsrs	r2, r2, #3
 8001dc4:	0749      	lsls	r1, r1, #29
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	0011      	movs	r1, r2
 8001dca:	4319      	orrs	r1, r3
 8001dcc:	d100      	bne.n	8001dd0 <__aeabi_dsub+0x384>
 8001dce:	e1c8      	b.n	8002162 <__aeabi_dsub+0x716>
 8001dd0:	2180      	movs	r1, #128	; 0x80
 8001dd2:	0309      	lsls	r1, r1, #12
 8001dd4:	430b      	orrs	r3, r1
 8001dd6:	031b      	lsls	r3, r3, #12
 8001dd8:	49d5      	ldr	r1, [pc, #852]	; (8002130 <__aeabi_dsub+0x6e4>)
 8001dda:	0b1b      	lsrs	r3, r3, #12
 8001ddc:	e6da      	b.n	8001b94 <__aeabi_dsub+0x148>
 8001dde:	49d5      	ldr	r1, [pc, #852]	; (8002134 <__aeabi_dsub+0x6e8>)
 8001de0:	1ab6      	subs	r6, r6, r2
 8001de2:	400b      	ands	r3, r1
 8001de4:	4698      	mov	r8, r3
 8001de6:	e6b5      	b.n	8001b54 <__aeabi_dsub+0x108>
 8001de8:	0020      	movs	r0, r4
 8001dea:	f000 fb1d 	bl	8002428 <__clzsi2>
 8001dee:	0002      	movs	r2, r0
 8001df0:	3218      	adds	r2, #24
 8001df2:	2a1f      	cmp	r2, #31
 8001df4:	dc00      	bgt.n	8001df8 <__aeabi_dsub+0x3ac>
 8001df6:	e68f      	b.n	8001b18 <__aeabi_dsub+0xcc>
 8001df8:	0023      	movs	r3, r4
 8001dfa:	3808      	subs	r0, #8
 8001dfc:	4083      	lsls	r3, r0
 8001dfe:	2400      	movs	r4, #0
 8001e00:	e692      	b.n	8001b28 <__aeabi_dsub+0xdc>
 8001e02:	4308      	orrs	r0, r1
 8001e04:	0002      	movs	r2, r0
 8001e06:	1e50      	subs	r0, r2, #1
 8001e08:	4182      	sbcs	r2, r0
 8001e0a:	e66d      	b.n	8001ae8 <__aeabi_dsub+0x9c>
 8001e0c:	4cca      	ldr	r4, [pc, #808]	; (8002138 <__aeabi_dsub+0x6ec>)
 8001e0e:	1c72      	adds	r2, r6, #1
 8001e10:	4222      	tst	r2, r4
 8001e12:	d000      	beq.n	8001e16 <__aeabi_dsub+0x3ca>
 8001e14:	e0ad      	b.n	8001f72 <__aeabi_dsub+0x526>
 8001e16:	464a      	mov	r2, r9
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	2e00      	cmp	r6, #0
 8001e1c:	d1b8      	bne.n	8001d90 <__aeabi_dsub+0x344>
 8001e1e:	2a00      	cmp	r2, #0
 8001e20:	d100      	bne.n	8001e24 <__aeabi_dsub+0x3d8>
 8001e22:	e158      	b.n	80020d6 <__aeabi_dsub+0x68a>
 8001e24:	000a      	movs	r2, r1
 8001e26:	4302      	orrs	r2, r0
 8001e28:	d000      	beq.n	8001e2c <__aeabi_dsub+0x3e0>
 8001e2a:	e159      	b.n	80020e0 <__aeabi_dsub+0x694>
 8001e2c:	464a      	mov	r2, r9
 8001e2e:	0759      	lsls	r1, r3, #29
 8001e30:	08d2      	lsrs	r2, r2, #3
 8001e32:	430a      	orrs	r2, r1
 8001e34:	08db      	lsrs	r3, r3, #3
 8001e36:	e786      	b.n	8001d46 <__aeabi_dsub+0x2fa>
 8001e38:	464a      	mov	r2, r9
 8001e3a:	0759      	lsls	r1, r3, #29
 8001e3c:	08d2      	lsrs	r2, r2, #3
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	08db      	lsrs	r3, r3, #3
 8001e42:	e7c1      	b.n	8001dc8 <__aeabi_dsub+0x37c>
 8001e44:	4dba      	ldr	r5, [pc, #744]	; (8002130 <__aeabi_dsub+0x6e4>)
 8001e46:	42aa      	cmp	r2, r5
 8001e48:	d100      	bne.n	8001e4c <__aeabi_dsub+0x400>
 8001e4a:	e11e      	b.n	800208a <__aeabi_dsub+0x63e>
 8001e4c:	2580      	movs	r5, #128	; 0x80
 8001e4e:	042d      	lsls	r5, r5, #16
 8001e50:	432b      	orrs	r3, r5
 8001e52:	4664      	mov	r4, ip
 8001e54:	2c38      	cmp	r4, #56	; 0x38
 8001e56:	dc5d      	bgt.n	8001f14 <__aeabi_dsub+0x4c8>
 8001e58:	2c1f      	cmp	r4, #31
 8001e5a:	dd00      	ble.n	8001e5e <__aeabi_dsub+0x412>
 8001e5c:	e0d0      	b.n	8002000 <__aeabi_dsub+0x5b4>
 8001e5e:	2520      	movs	r5, #32
 8001e60:	4667      	mov	r7, ip
 8001e62:	1b2d      	subs	r5, r5, r4
 8001e64:	464e      	mov	r6, r9
 8001e66:	001c      	movs	r4, r3
 8001e68:	40fe      	lsrs	r6, r7
 8001e6a:	40ac      	lsls	r4, r5
 8001e6c:	4334      	orrs	r4, r6
 8001e6e:	464e      	mov	r6, r9
 8001e70:	40ae      	lsls	r6, r5
 8001e72:	0035      	movs	r5, r6
 8001e74:	40fb      	lsrs	r3, r7
 8001e76:	1e6e      	subs	r6, r5, #1
 8001e78:	41b5      	sbcs	r5, r6
 8001e7a:	1ac9      	subs	r1, r1, r3
 8001e7c:	432c      	orrs	r4, r5
 8001e7e:	e04e      	b.n	8001f1e <__aeabi_dsub+0x4d2>
 8001e80:	464a      	mov	r2, r9
 8001e82:	1a14      	subs	r4, r2, r0
 8001e84:	45a1      	cmp	r9, r4
 8001e86:	4192      	sbcs	r2, r2
 8001e88:	4252      	negs	r2, r2
 8001e8a:	4690      	mov	r8, r2
 8001e8c:	1a5f      	subs	r7, r3, r1
 8001e8e:	003a      	movs	r2, r7
 8001e90:	4647      	mov	r7, r8
 8001e92:	1bd2      	subs	r2, r2, r7
 8001e94:	4690      	mov	r8, r2
 8001e96:	0212      	lsls	r2, r2, #8
 8001e98:	d500      	bpl.n	8001e9c <__aeabi_dsub+0x450>
 8001e9a:	e08b      	b.n	8001fb4 <__aeabi_dsub+0x568>
 8001e9c:	4642      	mov	r2, r8
 8001e9e:	4322      	orrs	r2, r4
 8001ea0:	d000      	beq.n	8001ea4 <__aeabi_dsub+0x458>
 8001ea2:	e630      	b.n	8001b06 <__aeabi_dsub+0xba>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	2500      	movs	r5, #0
 8001ea8:	e74d      	b.n	8001d46 <__aeabi_dsub+0x2fa>
 8001eaa:	464a      	mov	r2, r9
 8001eac:	0759      	lsls	r1, r3, #29
 8001eae:	08d2      	lsrs	r2, r2, #3
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	08db      	lsrs	r3, r3, #3
 8001eb4:	e744      	b.n	8001d40 <__aeabi_dsub+0x2f4>
 8001eb6:	4642      	mov	r2, r8
 8001eb8:	4b9e      	ldr	r3, [pc, #632]	; (8002134 <__aeabi_dsub+0x6e8>)
 8001eba:	0861      	lsrs	r1, r4, #1
 8001ebc:	401a      	ands	r2, r3
 8001ebe:	0013      	movs	r3, r2
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	4014      	ands	r4, r2
 8001ec4:	430c      	orrs	r4, r1
 8001ec6:	07da      	lsls	r2, r3, #31
 8001ec8:	085b      	lsrs	r3, r3, #1
 8001eca:	4698      	mov	r8, r3
 8001ecc:	4314      	orrs	r4, r2
 8001ece:	e641      	b.n	8001b54 <__aeabi_dsub+0x108>
 8001ed0:	001a      	movs	r2, r3
 8001ed2:	3e1f      	subs	r6, #31
 8001ed4:	40f2      	lsrs	r2, r6
 8001ed6:	0016      	movs	r6, r2
 8001ed8:	2920      	cmp	r1, #32
 8001eda:	d003      	beq.n	8001ee4 <__aeabi_dsub+0x498>
 8001edc:	2240      	movs	r2, #64	; 0x40
 8001ede:	1a51      	subs	r1, r2, r1
 8001ee0:	408b      	lsls	r3, r1
 8001ee2:	431c      	orrs	r4, r3
 8001ee4:	1e62      	subs	r2, r4, #1
 8001ee6:	4194      	sbcs	r4, r2
 8001ee8:	2300      	movs	r3, #0
 8001eea:	4334      	orrs	r4, r6
 8001eec:	4698      	mov	r8, r3
 8001eee:	2600      	movs	r6, #0
 8001ef0:	e71d      	b.n	8001d2e <__aeabi_dsub+0x2e2>
 8001ef2:	000c      	movs	r4, r1
 8001ef4:	3a20      	subs	r2, #32
 8001ef6:	40d4      	lsrs	r4, r2
 8001ef8:	0022      	movs	r2, r4
 8001efa:	4664      	mov	r4, ip
 8001efc:	2c20      	cmp	r4, #32
 8001efe:	d004      	beq.n	8001f0a <__aeabi_dsub+0x4be>
 8001f00:	2740      	movs	r7, #64	; 0x40
 8001f02:	1b3f      	subs	r7, r7, r4
 8001f04:	40b9      	lsls	r1, r7
 8001f06:	4308      	orrs	r0, r1
 8001f08:	4680      	mov	r8, r0
 8001f0a:	4644      	mov	r4, r8
 8001f0c:	1e61      	subs	r1, r4, #1
 8001f0e:	418c      	sbcs	r4, r1
 8001f10:	4322      	orrs	r2, r4
 8001f12:	e5e9      	b.n	8001ae8 <__aeabi_dsub+0x9c>
 8001f14:	464c      	mov	r4, r9
 8001f16:	4323      	orrs	r3, r4
 8001f18:	001c      	movs	r4, r3
 8001f1a:	1e63      	subs	r3, r4, #1
 8001f1c:	419c      	sbcs	r4, r3
 8001f1e:	1b04      	subs	r4, r0, r4
 8001f20:	42a0      	cmp	r0, r4
 8001f22:	419b      	sbcs	r3, r3
 8001f24:	425b      	negs	r3, r3
 8001f26:	1acb      	subs	r3, r1, r3
 8001f28:	4698      	mov	r8, r3
 8001f2a:	465d      	mov	r5, fp
 8001f2c:	0016      	movs	r6, r2
 8001f2e:	e5e2      	b.n	8001af6 <__aeabi_dsub+0xaa>
 8001f30:	464e      	mov	r6, r9
 8001f32:	431e      	orrs	r6, r3
 8001f34:	d100      	bne.n	8001f38 <__aeabi_dsub+0x4ec>
 8001f36:	e0ae      	b.n	8002096 <__aeabi_dsub+0x64a>
 8001f38:	1e66      	subs	r6, r4, #1
 8001f3a:	2c01      	cmp	r4, #1
 8001f3c:	d100      	bne.n	8001f40 <__aeabi_dsub+0x4f4>
 8001f3e:	e0fd      	b.n	800213c <__aeabi_dsub+0x6f0>
 8001f40:	4f7b      	ldr	r7, [pc, #492]	; (8002130 <__aeabi_dsub+0x6e4>)
 8001f42:	42bc      	cmp	r4, r7
 8001f44:	d100      	bne.n	8001f48 <__aeabi_dsub+0x4fc>
 8001f46:	e107      	b.n	8002158 <__aeabi_dsub+0x70c>
 8001f48:	46b4      	mov	ip, r6
 8001f4a:	e69b      	b.n	8001c84 <__aeabi_dsub+0x238>
 8001f4c:	4664      	mov	r4, ip
 8001f4e:	2220      	movs	r2, #32
 8001f50:	1b12      	subs	r2, r2, r4
 8001f52:	000c      	movs	r4, r1
 8001f54:	4094      	lsls	r4, r2
 8001f56:	0007      	movs	r7, r0
 8001f58:	4090      	lsls	r0, r2
 8001f5a:	46a0      	mov	r8, r4
 8001f5c:	4664      	mov	r4, ip
 8001f5e:	1e42      	subs	r2, r0, #1
 8001f60:	4190      	sbcs	r0, r2
 8001f62:	4662      	mov	r2, ip
 8001f64:	40e7      	lsrs	r7, r4
 8001f66:	4644      	mov	r4, r8
 8001f68:	40d1      	lsrs	r1, r2
 8001f6a:	433c      	orrs	r4, r7
 8001f6c:	4304      	orrs	r4, r0
 8001f6e:	185b      	adds	r3, r3, r1
 8001f70:	e6f3      	b.n	8001d5a <__aeabi_dsub+0x30e>
 8001f72:	4c6f      	ldr	r4, [pc, #444]	; (8002130 <__aeabi_dsub+0x6e4>)
 8001f74:	42a2      	cmp	r2, r4
 8001f76:	d100      	bne.n	8001f7a <__aeabi_dsub+0x52e>
 8001f78:	e0d5      	b.n	8002126 <__aeabi_dsub+0x6da>
 8001f7a:	4448      	add	r0, r9
 8001f7c:	185b      	adds	r3, r3, r1
 8001f7e:	4548      	cmp	r0, r9
 8001f80:	4189      	sbcs	r1, r1
 8001f82:	4249      	negs	r1, r1
 8001f84:	185b      	adds	r3, r3, r1
 8001f86:	07dc      	lsls	r4, r3, #31
 8001f88:	0840      	lsrs	r0, r0, #1
 8001f8a:	085b      	lsrs	r3, r3, #1
 8001f8c:	4698      	mov	r8, r3
 8001f8e:	0016      	movs	r6, r2
 8001f90:	4304      	orrs	r4, r0
 8001f92:	e6cc      	b.n	8001d2e <__aeabi_dsub+0x2e2>
 8001f94:	2a00      	cmp	r2, #0
 8001f96:	d000      	beq.n	8001f9a <__aeabi_dsub+0x54e>
 8001f98:	e082      	b.n	80020a0 <__aeabi_dsub+0x654>
 8001f9a:	000a      	movs	r2, r1
 8001f9c:	4302      	orrs	r2, r0
 8001f9e:	d140      	bne.n	8002022 <__aeabi_dsub+0x5d6>
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	2500      	movs	r5, #0
 8001fa4:	031b      	lsls	r3, r3, #12
 8001fa6:	e713      	b.n	8001dd0 <__aeabi_dsub+0x384>
 8001fa8:	074b      	lsls	r3, r1, #29
 8001faa:	08c2      	lsrs	r2, r0, #3
 8001fac:	431a      	orrs	r2, r3
 8001fae:	465d      	mov	r5, fp
 8001fb0:	08cb      	lsrs	r3, r1, #3
 8001fb2:	e6c5      	b.n	8001d40 <__aeabi_dsub+0x2f4>
 8001fb4:	464a      	mov	r2, r9
 8001fb6:	1a84      	subs	r4, r0, r2
 8001fb8:	42a0      	cmp	r0, r4
 8001fba:	4192      	sbcs	r2, r2
 8001fbc:	1acb      	subs	r3, r1, r3
 8001fbe:	4252      	negs	r2, r2
 8001fc0:	1a9b      	subs	r3, r3, r2
 8001fc2:	4698      	mov	r8, r3
 8001fc4:	465d      	mov	r5, fp
 8001fc6:	e59e      	b.n	8001b06 <__aeabi_dsub+0xba>
 8001fc8:	464a      	mov	r2, r9
 8001fca:	0759      	lsls	r1, r3, #29
 8001fcc:	08d2      	lsrs	r2, r2, #3
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	08db      	lsrs	r3, r3, #3
 8001fd2:	e6f9      	b.n	8001dc8 <__aeabi_dsub+0x37c>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	1a14      	subs	r4, r2, r0
 8001fd8:	45a1      	cmp	r9, r4
 8001fda:	4192      	sbcs	r2, r2
 8001fdc:	1a5b      	subs	r3, r3, r1
 8001fde:	4252      	negs	r2, r2
 8001fe0:	1a9b      	subs	r3, r3, r2
 8001fe2:	4698      	mov	r8, r3
 8001fe4:	2601      	movs	r6, #1
 8001fe6:	e586      	b.n	8001af6 <__aeabi_dsub+0xaa>
 8001fe8:	464a      	mov	r2, r9
 8001fea:	0759      	lsls	r1, r3, #29
 8001fec:	08d2      	lsrs	r2, r2, #3
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	08db      	lsrs	r3, r3, #3
 8001ff2:	e6a5      	b.n	8001d40 <__aeabi_dsub+0x2f4>
 8001ff4:	464c      	mov	r4, r9
 8001ff6:	4323      	orrs	r3, r4
 8001ff8:	001c      	movs	r4, r3
 8001ffa:	1e63      	subs	r3, r4, #1
 8001ffc:	419c      	sbcs	r4, r3
 8001ffe:	e65b      	b.n	8001cb8 <__aeabi_dsub+0x26c>
 8002000:	4665      	mov	r5, ip
 8002002:	001e      	movs	r6, r3
 8002004:	3d20      	subs	r5, #32
 8002006:	40ee      	lsrs	r6, r5
 8002008:	2c20      	cmp	r4, #32
 800200a:	d005      	beq.n	8002018 <__aeabi_dsub+0x5cc>
 800200c:	2540      	movs	r5, #64	; 0x40
 800200e:	1b2d      	subs	r5, r5, r4
 8002010:	40ab      	lsls	r3, r5
 8002012:	464c      	mov	r4, r9
 8002014:	431c      	orrs	r4, r3
 8002016:	46a2      	mov	sl, r4
 8002018:	4654      	mov	r4, sl
 800201a:	1e63      	subs	r3, r4, #1
 800201c:	419c      	sbcs	r4, r3
 800201e:	4334      	orrs	r4, r6
 8002020:	e77d      	b.n	8001f1e <__aeabi_dsub+0x4d2>
 8002022:	074b      	lsls	r3, r1, #29
 8002024:	08c2      	lsrs	r2, r0, #3
 8002026:	431a      	orrs	r2, r3
 8002028:	465d      	mov	r5, fp
 800202a:	08cb      	lsrs	r3, r1, #3
 800202c:	e6cc      	b.n	8001dc8 <__aeabi_dsub+0x37c>
 800202e:	000a      	movs	r2, r1
 8002030:	4302      	orrs	r2, r0
 8002032:	d100      	bne.n	8002036 <__aeabi_dsub+0x5ea>
 8002034:	e736      	b.n	8001ea4 <__aeabi_dsub+0x458>
 8002036:	074b      	lsls	r3, r1, #29
 8002038:	08c2      	lsrs	r2, r0, #3
 800203a:	431a      	orrs	r2, r3
 800203c:	465d      	mov	r5, fp
 800203e:	08cb      	lsrs	r3, r1, #3
 8002040:	e681      	b.n	8001d46 <__aeabi_dsub+0x2fa>
 8002042:	464a      	mov	r2, r9
 8002044:	1a84      	subs	r4, r0, r2
 8002046:	42a0      	cmp	r0, r4
 8002048:	4192      	sbcs	r2, r2
 800204a:	1acb      	subs	r3, r1, r3
 800204c:	4252      	negs	r2, r2
 800204e:	1a9b      	subs	r3, r3, r2
 8002050:	4698      	mov	r8, r3
 8002052:	465d      	mov	r5, fp
 8002054:	2601      	movs	r6, #1
 8002056:	e54e      	b.n	8001af6 <__aeabi_dsub+0xaa>
 8002058:	074b      	lsls	r3, r1, #29
 800205a:	08c2      	lsrs	r2, r0, #3
 800205c:	431a      	orrs	r2, r3
 800205e:	08cb      	lsrs	r3, r1, #3
 8002060:	e6b2      	b.n	8001dc8 <__aeabi_dsub+0x37c>
 8002062:	464a      	mov	r2, r9
 8002064:	1a14      	subs	r4, r2, r0
 8002066:	45a1      	cmp	r9, r4
 8002068:	4192      	sbcs	r2, r2
 800206a:	1a5f      	subs	r7, r3, r1
 800206c:	4252      	negs	r2, r2
 800206e:	1aba      	subs	r2, r7, r2
 8002070:	4690      	mov	r8, r2
 8002072:	0212      	lsls	r2, r2, #8
 8002074:	d56b      	bpl.n	800214e <__aeabi_dsub+0x702>
 8002076:	464a      	mov	r2, r9
 8002078:	1a84      	subs	r4, r0, r2
 800207a:	42a0      	cmp	r0, r4
 800207c:	4192      	sbcs	r2, r2
 800207e:	1acb      	subs	r3, r1, r3
 8002080:	4252      	negs	r2, r2
 8002082:	1a9b      	subs	r3, r3, r2
 8002084:	4698      	mov	r8, r3
 8002086:	465d      	mov	r5, fp
 8002088:	e564      	b.n	8001b54 <__aeabi_dsub+0x108>
 800208a:	074b      	lsls	r3, r1, #29
 800208c:	08c2      	lsrs	r2, r0, #3
 800208e:	431a      	orrs	r2, r3
 8002090:	465d      	mov	r5, fp
 8002092:	08cb      	lsrs	r3, r1, #3
 8002094:	e698      	b.n	8001dc8 <__aeabi_dsub+0x37c>
 8002096:	074b      	lsls	r3, r1, #29
 8002098:	08c2      	lsrs	r2, r0, #3
 800209a:	431a      	orrs	r2, r3
 800209c:	08cb      	lsrs	r3, r1, #3
 800209e:	e64f      	b.n	8001d40 <__aeabi_dsub+0x2f4>
 80020a0:	000a      	movs	r2, r1
 80020a2:	4302      	orrs	r2, r0
 80020a4:	d090      	beq.n	8001fc8 <__aeabi_dsub+0x57c>
 80020a6:	464a      	mov	r2, r9
 80020a8:	075c      	lsls	r4, r3, #29
 80020aa:	08d2      	lsrs	r2, r2, #3
 80020ac:	4314      	orrs	r4, r2
 80020ae:	2280      	movs	r2, #128	; 0x80
 80020b0:	08db      	lsrs	r3, r3, #3
 80020b2:	0312      	lsls	r2, r2, #12
 80020b4:	4213      	tst	r3, r2
 80020b6:	d008      	beq.n	80020ca <__aeabi_dsub+0x67e>
 80020b8:	08ce      	lsrs	r6, r1, #3
 80020ba:	4216      	tst	r6, r2
 80020bc:	d105      	bne.n	80020ca <__aeabi_dsub+0x67e>
 80020be:	08c0      	lsrs	r0, r0, #3
 80020c0:	0749      	lsls	r1, r1, #29
 80020c2:	4308      	orrs	r0, r1
 80020c4:	0004      	movs	r4, r0
 80020c6:	465d      	mov	r5, fp
 80020c8:	0033      	movs	r3, r6
 80020ca:	0f61      	lsrs	r1, r4, #29
 80020cc:	00e2      	lsls	r2, r4, #3
 80020ce:	0749      	lsls	r1, r1, #29
 80020d0:	08d2      	lsrs	r2, r2, #3
 80020d2:	430a      	orrs	r2, r1
 80020d4:	e678      	b.n	8001dc8 <__aeabi_dsub+0x37c>
 80020d6:	074b      	lsls	r3, r1, #29
 80020d8:	08c2      	lsrs	r2, r0, #3
 80020da:	431a      	orrs	r2, r3
 80020dc:	08cb      	lsrs	r3, r1, #3
 80020de:	e632      	b.n	8001d46 <__aeabi_dsub+0x2fa>
 80020e0:	4448      	add	r0, r9
 80020e2:	185b      	adds	r3, r3, r1
 80020e4:	4548      	cmp	r0, r9
 80020e6:	4192      	sbcs	r2, r2
 80020e8:	4698      	mov	r8, r3
 80020ea:	4252      	negs	r2, r2
 80020ec:	4490      	add	r8, r2
 80020ee:	4643      	mov	r3, r8
 80020f0:	0004      	movs	r4, r0
 80020f2:	021b      	lsls	r3, r3, #8
 80020f4:	d400      	bmi.n	80020f8 <__aeabi_dsub+0x6ac>
 80020f6:	e61a      	b.n	8001d2e <__aeabi_dsub+0x2e2>
 80020f8:	4642      	mov	r2, r8
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <__aeabi_dsub+0x6e8>)
 80020fc:	2601      	movs	r6, #1
 80020fe:	401a      	ands	r2, r3
 8002100:	4690      	mov	r8, r2
 8002102:	e614      	b.n	8001d2e <__aeabi_dsub+0x2e2>
 8002104:	4666      	mov	r6, ip
 8002106:	001f      	movs	r7, r3
 8002108:	3e20      	subs	r6, #32
 800210a:	40f7      	lsrs	r7, r6
 800210c:	2c20      	cmp	r4, #32
 800210e:	d005      	beq.n	800211c <__aeabi_dsub+0x6d0>
 8002110:	2640      	movs	r6, #64	; 0x40
 8002112:	1b36      	subs	r6, r6, r4
 8002114:	40b3      	lsls	r3, r6
 8002116:	464c      	mov	r4, r9
 8002118:	431c      	orrs	r4, r3
 800211a:	46a2      	mov	sl, r4
 800211c:	4654      	mov	r4, sl
 800211e:	1e63      	subs	r3, r4, #1
 8002120:	419c      	sbcs	r4, r3
 8002122:	433c      	orrs	r4, r7
 8002124:	e5c8      	b.n	8001cb8 <__aeabi_dsub+0x26c>
 8002126:	0011      	movs	r1, r2
 8002128:	2300      	movs	r3, #0
 800212a:	2200      	movs	r2, #0
 800212c:	e532      	b.n	8001b94 <__aeabi_dsub+0x148>
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	000007ff 	.word	0x000007ff
 8002134:	ff7fffff 	.word	0xff7fffff
 8002138:	000007fe 	.word	0x000007fe
 800213c:	464a      	mov	r2, r9
 800213e:	1814      	adds	r4, r2, r0
 8002140:	4284      	cmp	r4, r0
 8002142:	4192      	sbcs	r2, r2
 8002144:	185b      	adds	r3, r3, r1
 8002146:	4698      	mov	r8, r3
 8002148:	4252      	negs	r2, r2
 800214a:	4490      	add	r8, r2
 800214c:	e5e9      	b.n	8001d22 <__aeabi_dsub+0x2d6>
 800214e:	4642      	mov	r2, r8
 8002150:	4322      	orrs	r2, r4
 8002152:	d100      	bne.n	8002156 <__aeabi_dsub+0x70a>
 8002154:	e6a6      	b.n	8001ea4 <__aeabi_dsub+0x458>
 8002156:	e5ea      	b.n	8001d2e <__aeabi_dsub+0x2e2>
 8002158:	074b      	lsls	r3, r1, #29
 800215a:	08c2      	lsrs	r2, r0, #3
 800215c:	431a      	orrs	r2, r3
 800215e:	08cb      	lsrs	r3, r1, #3
 8002160:	e632      	b.n	8001dc8 <__aeabi_dsub+0x37c>
 8002162:	2200      	movs	r2, #0
 8002164:	4901      	ldr	r1, [pc, #4]	; (800216c <__aeabi_dsub+0x720>)
 8002166:	0013      	movs	r3, r2
 8002168:	e514      	b.n	8001b94 <__aeabi_dsub+0x148>
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	000007ff 	.word	0x000007ff

08002170 <__aeabi_d2iz>:
 8002170:	000a      	movs	r2, r1
 8002172:	b530      	push	{r4, r5, lr}
 8002174:	4c13      	ldr	r4, [pc, #76]	; (80021c4 <__aeabi_d2iz+0x54>)
 8002176:	0053      	lsls	r3, r2, #1
 8002178:	0309      	lsls	r1, r1, #12
 800217a:	0005      	movs	r5, r0
 800217c:	0b09      	lsrs	r1, r1, #12
 800217e:	2000      	movs	r0, #0
 8002180:	0d5b      	lsrs	r3, r3, #21
 8002182:	0fd2      	lsrs	r2, r2, #31
 8002184:	42a3      	cmp	r3, r4
 8002186:	dd04      	ble.n	8002192 <__aeabi_d2iz+0x22>
 8002188:	480f      	ldr	r0, [pc, #60]	; (80021c8 <__aeabi_d2iz+0x58>)
 800218a:	4283      	cmp	r3, r0
 800218c:	dd02      	ble.n	8002194 <__aeabi_d2iz+0x24>
 800218e:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <__aeabi_d2iz+0x5c>)
 8002190:	18d0      	adds	r0, r2, r3
 8002192:	bd30      	pop	{r4, r5, pc}
 8002194:	2080      	movs	r0, #128	; 0x80
 8002196:	0340      	lsls	r0, r0, #13
 8002198:	4301      	orrs	r1, r0
 800219a:	480d      	ldr	r0, [pc, #52]	; (80021d0 <__aeabi_d2iz+0x60>)
 800219c:	1ac0      	subs	r0, r0, r3
 800219e:	281f      	cmp	r0, #31
 80021a0:	dd08      	ble.n	80021b4 <__aeabi_d2iz+0x44>
 80021a2:	480c      	ldr	r0, [pc, #48]	; (80021d4 <__aeabi_d2iz+0x64>)
 80021a4:	1ac3      	subs	r3, r0, r3
 80021a6:	40d9      	lsrs	r1, r3
 80021a8:	000b      	movs	r3, r1
 80021aa:	4258      	negs	r0, r3
 80021ac:	2a00      	cmp	r2, #0
 80021ae:	d1f0      	bne.n	8002192 <__aeabi_d2iz+0x22>
 80021b0:	0018      	movs	r0, r3
 80021b2:	e7ee      	b.n	8002192 <__aeabi_d2iz+0x22>
 80021b4:	4c08      	ldr	r4, [pc, #32]	; (80021d8 <__aeabi_d2iz+0x68>)
 80021b6:	40c5      	lsrs	r5, r0
 80021b8:	46a4      	mov	ip, r4
 80021ba:	4463      	add	r3, ip
 80021bc:	4099      	lsls	r1, r3
 80021be:	000b      	movs	r3, r1
 80021c0:	432b      	orrs	r3, r5
 80021c2:	e7f2      	b.n	80021aa <__aeabi_d2iz+0x3a>
 80021c4:	000003fe 	.word	0x000003fe
 80021c8:	0000041d 	.word	0x0000041d
 80021cc:	7fffffff 	.word	0x7fffffff
 80021d0:	00000433 	.word	0x00000433
 80021d4:	00000413 	.word	0x00000413
 80021d8:	fffffbed 	.word	0xfffffbed

080021dc <__aeabi_i2d>:
 80021dc:	b570      	push	{r4, r5, r6, lr}
 80021de:	2800      	cmp	r0, #0
 80021e0:	d016      	beq.n	8002210 <__aeabi_i2d+0x34>
 80021e2:	17c3      	asrs	r3, r0, #31
 80021e4:	18c5      	adds	r5, r0, r3
 80021e6:	405d      	eors	r5, r3
 80021e8:	0fc4      	lsrs	r4, r0, #31
 80021ea:	0028      	movs	r0, r5
 80021ec:	f000 f91c 	bl	8002428 <__clzsi2>
 80021f0:	4a11      	ldr	r2, [pc, #68]	; (8002238 <__aeabi_i2d+0x5c>)
 80021f2:	1a12      	subs	r2, r2, r0
 80021f4:	280a      	cmp	r0, #10
 80021f6:	dc16      	bgt.n	8002226 <__aeabi_i2d+0x4a>
 80021f8:	0003      	movs	r3, r0
 80021fa:	002e      	movs	r6, r5
 80021fc:	3315      	adds	r3, #21
 80021fe:	409e      	lsls	r6, r3
 8002200:	230b      	movs	r3, #11
 8002202:	1a18      	subs	r0, r3, r0
 8002204:	40c5      	lsrs	r5, r0
 8002206:	0553      	lsls	r3, r2, #21
 8002208:	032d      	lsls	r5, r5, #12
 800220a:	0b2d      	lsrs	r5, r5, #12
 800220c:	0d5b      	lsrs	r3, r3, #21
 800220e:	e003      	b.n	8002218 <__aeabi_i2d+0x3c>
 8002210:	2400      	movs	r4, #0
 8002212:	2300      	movs	r3, #0
 8002214:	2500      	movs	r5, #0
 8002216:	2600      	movs	r6, #0
 8002218:	051b      	lsls	r3, r3, #20
 800221a:	432b      	orrs	r3, r5
 800221c:	07e4      	lsls	r4, r4, #31
 800221e:	4323      	orrs	r3, r4
 8002220:	0030      	movs	r0, r6
 8002222:	0019      	movs	r1, r3
 8002224:	bd70      	pop	{r4, r5, r6, pc}
 8002226:	380b      	subs	r0, #11
 8002228:	4085      	lsls	r5, r0
 800222a:	0553      	lsls	r3, r2, #21
 800222c:	032d      	lsls	r5, r5, #12
 800222e:	2600      	movs	r6, #0
 8002230:	0b2d      	lsrs	r5, r5, #12
 8002232:	0d5b      	lsrs	r3, r3, #21
 8002234:	e7f0      	b.n	8002218 <__aeabi_i2d+0x3c>
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	0000041e 	.word	0x0000041e

0800223c <__aeabi_ui2d>:
 800223c:	b510      	push	{r4, lr}
 800223e:	1e04      	subs	r4, r0, #0
 8002240:	d010      	beq.n	8002264 <__aeabi_ui2d+0x28>
 8002242:	f000 f8f1 	bl	8002428 <__clzsi2>
 8002246:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <__aeabi_ui2d+0x48>)
 8002248:	1a1b      	subs	r3, r3, r0
 800224a:	280a      	cmp	r0, #10
 800224c:	dc11      	bgt.n	8002272 <__aeabi_ui2d+0x36>
 800224e:	220b      	movs	r2, #11
 8002250:	0021      	movs	r1, r4
 8002252:	1a12      	subs	r2, r2, r0
 8002254:	40d1      	lsrs	r1, r2
 8002256:	3015      	adds	r0, #21
 8002258:	030a      	lsls	r2, r1, #12
 800225a:	055b      	lsls	r3, r3, #21
 800225c:	4084      	lsls	r4, r0
 800225e:	0b12      	lsrs	r2, r2, #12
 8002260:	0d5b      	lsrs	r3, r3, #21
 8002262:	e001      	b.n	8002268 <__aeabi_ui2d+0x2c>
 8002264:	2300      	movs	r3, #0
 8002266:	2200      	movs	r2, #0
 8002268:	051b      	lsls	r3, r3, #20
 800226a:	4313      	orrs	r3, r2
 800226c:	0020      	movs	r0, r4
 800226e:	0019      	movs	r1, r3
 8002270:	bd10      	pop	{r4, pc}
 8002272:	0022      	movs	r2, r4
 8002274:	380b      	subs	r0, #11
 8002276:	4082      	lsls	r2, r0
 8002278:	055b      	lsls	r3, r3, #21
 800227a:	0312      	lsls	r2, r2, #12
 800227c:	2400      	movs	r4, #0
 800227e:	0b12      	lsrs	r2, r2, #12
 8002280:	0d5b      	lsrs	r3, r3, #21
 8002282:	e7f1      	b.n	8002268 <__aeabi_ui2d+0x2c>
 8002284:	0000041e 	.word	0x0000041e

08002288 <__aeabi_f2d>:
 8002288:	b570      	push	{r4, r5, r6, lr}
 800228a:	0043      	lsls	r3, r0, #1
 800228c:	0246      	lsls	r6, r0, #9
 800228e:	0fc4      	lsrs	r4, r0, #31
 8002290:	20fe      	movs	r0, #254	; 0xfe
 8002292:	0e1b      	lsrs	r3, r3, #24
 8002294:	1c59      	adds	r1, r3, #1
 8002296:	0a75      	lsrs	r5, r6, #9
 8002298:	4208      	tst	r0, r1
 800229a:	d00c      	beq.n	80022b6 <__aeabi_f2d+0x2e>
 800229c:	22e0      	movs	r2, #224	; 0xe0
 800229e:	0092      	lsls	r2, r2, #2
 80022a0:	4694      	mov	ip, r2
 80022a2:	076d      	lsls	r5, r5, #29
 80022a4:	0b36      	lsrs	r6, r6, #12
 80022a6:	4463      	add	r3, ip
 80022a8:	051b      	lsls	r3, r3, #20
 80022aa:	4333      	orrs	r3, r6
 80022ac:	07e4      	lsls	r4, r4, #31
 80022ae:	4323      	orrs	r3, r4
 80022b0:	0028      	movs	r0, r5
 80022b2:	0019      	movs	r1, r3
 80022b4:	bd70      	pop	{r4, r5, r6, pc}
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d114      	bne.n	80022e4 <__aeabi_f2d+0x5c>
 80022ba:	2d00      	cmp	r5, #0
 80022bc:	d01b      	beq.n	80022f6 <__aeabi_f2d+0x6e>
 80022be:	0028      	movs	r0, r5
 80022c0:	f000 f8b2 	bl	8002428 <__clzsi2>
 80022c4:	280a      	cmp	r0, #10
 80022c6:	dc1c      	bgt.n	8002302 <__aeabi_f2d+0x7a>
 80022c8:	230b      	movs	r3, #11
 80022ca:	002a      	movs	r2, r5
 80022cc:	1a1b      	subs	r3, r3, r0
 80022ce:	40da      	lsrs	r2, r3
 80022d0:	0003      	movs	r3, r0
 80022d2:	3315      	adds	r3, #21
 80022d4:	409d      	lsls	r5, r3
 80022d6:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <__aeabi_f2d+0x88>)
 80022d8:	0312      	lsls	r2, r2, #12
 80022da:	1a1b      	subs	r3, r3, r0
 80022dc:	055b      	lsls	r3, r3, #21
 80022de:	0b16      	lsrs	r6, r2, #12
 80022e0:	0d5b      	lsrs	r3, r3, #21
 80022e2:	e7e1      	b.n	80022a8 <__aeabi_f2d+0x20>
 80022e4:	2d00      	cmp	r5, #0
 80022e6:	d009      	beq.n	80022fc <__aeabi_f2d+0x74>
 80022e8:	0b32      	lsrs	r2, r6, #12
 80022ea:	2680      	movs	r6, #128	; 0x80
 80022ec:	0336      	lsls	r6, r6, #12
 80022ee:	4b09      	ldr	r3, [pc, #36]	; (8002314 <__aeabi_f2d+0x8c>)
 80022f0:	076d      	lsls	r5, r5, #29
 80022f2:	4316      	orrs	r6, r2
 80022f4:	e7d8      	b.n	80022a8 <__aeabi_f2d+0x20>
 80022f6:	2300      	movs	r3, #0
 80022f8:	2600      	movs	r6, #0
 80022fa:	e7d5      	b.n	80022a8 <__aeabi_f2d+0x20>
 80022fc:	2600      	movs	r6, #0
 80022fe:	4b05      	ldr	r3, [pc, #20]	; (8002314 <__aeabi_f2d+0x8c>)
 8002300:	e7d2      	b.n	80022a8 <__aeabi_f2d+0x20>
 8002302:	0003      	movs	r3, r0
 8002304:	002a      	movs	r2, r5
 8002306:	3b0b      	subs	r3, #11
 8002308:	409a      	lsls	r2, r3
 800230a:	2500      	movs	r5, #0
 800230c:	e7e3      	b.n	80022d6 <__aeabi_f2d+0x4e>
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	00000389 	.word	0x00000389
 8002314:	000007ff 	.word	0x000007ff

08002318 <__aeabi_d2f>:
 8002318:	0002      	movs	r2, r0
 800231a:	004b      	lsls	r3, r1, #1
 800231c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800231e:	0308      	lsls	r0, r1, #12
 8002320:	0d5b      	lsrs	r3, r3, #21
 8002322:	4e3d      	ldr	r6, [pc, #244]	; (8002418 <__aeabi_d2f+0x100>)
 8002324:	0fcc      	lsrs	r4, r1, #31
 8002326:	0a40      	lsrs	r0, r0, #9
 8002328:	0f51      	lsrs	r1, r2, #29
 800232a:	1c5f      	adds	r7, r3, #1
 800232c:	4308      	orrs	r0, r1
 800232e:	00d5      	lsls	r5, r2, #3
 8002330:	4237      	tst	r7, r6
 8002332:	d00a      	beq.n	800234a <__aeabi_d2f+0x32>
 8002334:	4939      	ldr	r1, [pc, #228]	; (800241c <__aeabi_d2f+0x104>)
 8002336:	185e      	adds	r6, r3, r1
 8002338:	2efe      	cmp	r6, #254	; 0xfe
 800233a:	dd16      	ble.n	800236a <__aeabi_d2f+0x52>
 800233c:	23ff      	movs	r3, #255	; 0xff
 800233e:	2100      	movs	r1, #0
 8002340:	05db      	lsls	r3, r3, #23
 8002342:	430b      	orrs	r3, r1
 8002344:	07e0      	lsls	r0, r4, #31
 8002346:	4318      	orrs	r0, r3
 8002348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800234a:	2b00      	cmp	r3, #0
 800234c:	d106      	bne.n	800235c <__aeabi_d2f+0x44>
 800234e:	4328      	orrs	r0, r5
 8002350:	d027      	beq.n	80023a2 <__aeabi_d2f+0x8a>
 8002352:	2105      	movs	r1, #5
 8002354:	0189      	lsls	r1, r1, #6
 8002356:	0a49      	lsrs	r1, r1, #9
 8002358:	b2db      	uxtb	r3, r3
 800235a:	e7f1      	b.n	8002340 <__aeabi_d2f+0x28>
 800235c:	4305      	orrs	r5, r0
 800235e:	d0ed      	beq.n	800233c <__aeabi_d2f+0x24>
 8002360:	2180      	movs	r1, #128	; 0x80
 8002362:	03c9      	lsls	r1, r1, #15
 8002364:	23ff      	movs	r3, #255	; 0xff
 8002366:	4301      	orrs	r1, r0
 8002368:	e7ea      	b.n	8002340 <__aeabi_d2f+0x28>
 800236a:	2e00      	cmp	r6, #0
 800236c:	dd1c      	ble.n	80023a8 <__aeabi_d2f+0x90>
 800236e:	0192      	lsls	r2, r2, #6
 8002370:	0011      	movs	r1, r2
 8002372:	1e4a      	subs	r2, r1, #1
 8002374:	4191      	sbcs	r1, r2
 8002376:	00c0      	lsls	r0, r0, #3
 8002378:	0f6d      	lsrs	r5, r5, #29
 800237a:	4301      	orrs	r1, r0
 800237c:	4329      	orrs	r1, r5
 800237e:	074b      	lsls	r3, r1, #29
 8002380:	d048      	beq.n	8002414 <__aeabi_d2f+0xfc>
 8002382:	230f      	movs	r3, #15
 8002384:	400b      	ands	r3, r1
 8002386:	2b04      	cmp	r3, #4
 8002388:	d000      	beq.n	800238c <__aeabi_d2f+0x74>
 800238a:	3104      	adds	r1, #4
 800238c:	2380      	movs	r3, #128	; 0x80
 800238e:	04db      	lsls	r3, r3, #19
 8002390:	400b      	ands	r3, r1
 8002392:	d03f      	beq.n	8002414 <__aeabi_d2f+0xfc>
 8002394:	1c72      	adds	r2, r6, #1
 8002396:	2efe      	cmp	r6, #254	; 0xfe
 8002398:	d0d0      	beq.n	800233c <__aeabi_d2f+0x24>
 800239a:	0189      	lsls	r1, r1, #6
 800239c:	0a49      	lsrs	r1, r1, #9
 800239e:	b2d3      	uxtb	r3, r2
 80023a0:	e7ce      	b.n	8002340 <__aeabi_d2f+0x28>
 80023a2:	2300      	movs	r3, #0
 80023a4:	2100      	movs	r1, #0
 80023a6:	e7cb      	b.n	8002340 <__aeabi_d2f+0x28>
 80023a8:	0032      	movs	r2, r6
 80023aa:	3217      	adds	r2, #23
 80023ac:	db22      	blt.n	80023f4 <__aeabi_d2f+0xdc>
 80023ae:	2180      	movs	r1, #128	; 0x80
 80023b0:	221e      	movs	r2, #30
 80023b2:	0409      	lsls	r1, r1, #16
 80023b4:	4308      	orrs	r0, r1
 80023b6:	1b92      	subs	r2, r2, r6
 80023b8:	2a1f      	cmp	r2, #31
 80023ba:	dd1d      	ble.n	80023f8 <__aeabi_d2f+0xe0>
 80023bc:	2102      	movs	r1, #2
 80023be:	4249      	negs	r1, r1
 80023c0:	1b8e      	subs	r6, r1, r6
 80023c2:	0001      	movs	r1, r0
 80023c4:	40f1      	lsrs	r1, r6
 80023c6:	000e      	movs	r6, r1
 80023c8:	2a20      	cmp	r2, #32
 80023ca:	d004      	beq.n	80023d6 <__aeabi_d2f+0xbe>
 80023cc:	4a14      	ldr	r2, [pc, #80]	; (8002420 <__aeabi_d2f+0x108>)
 80023ce:	4694      	mov	ip, r2
 80023d0:	4463      	add	r3, ip
 80023d2:	4098      	lsls	r0, r3
 80023d4:	4305      	orrs	r5, r0
 80023d6:	0029      	movs	r1, r5
 80023d8:	1e4d      	subs	r5, r1, #1
 80023da:	41a9      	sbcs	r1, r5
 80023dc:	4331      	orrs	r1, r6
 80023de:	2600      	movs	r6, #0
 80023e0:	074b      	lsls	r3, r1, #29
 80023e2:	d1ce      	bne.n	8002382 <__aeabi_d2f+0x6a>
 80023e4:	2080      	movs	r0, #128	; 0x80
 80023e6:	000b      	movs	r3, r1
 80023e8:	04c0      	lsls	r0, r0, #19
 80023ea:	2201      	movs	r2, #1
 80023ec:	4003      	ands	r3, r0
 80023ee:	4201      	tst	r1, r0
 80023f0:	d1d3      	bne.n	800239a <__aeabi_d2f+0x82>
 80023f2:	e7af      	b.n	8002354 <__aeabi_d2f+0x3c>
 80023f4:	2300      	movs	r3, #0
 80023f6:	e7ac      	b.n	8002352 <__aeabi_d2f+0x3a>
 80023f8:	490a      	ldr	r1, [pc, #40]	; (8002424 <__aeabi_d2f+0x10c>)
 80023fa:	468c      	mov	ip, r1
 80023fc:	0029      	movs	r1, r5
 80023fe:	4463      	add	r3, ip
 8002400:	40d1      	lsrs	r1, r2
 8002402:	409d      	lsls	r5, r3
 8002404:	000a      	movs	r2, r1
 8002406:	0029      	movs	r1, r5
 8002408:	4098      	lsls	r0, r3
 800240a:	1e4d      	subs	r5, r1, #1
 800240c:	41a9      	sbcs	r1, r5
 800240e:	4301      	orrs	r1, r0
 8002410:	4311      	orrs	r1, r2
 8002412:	e7e4      	b.n	80023de <__aeabi_d2f+0xc6>
 8002414:	0033      	movs	r3, r6
 8002416:	e79d      	b.n	8002354 <__aeabi_d2f+0x3c>
 8002418:	000007fe 	.word	0x000007fe
 800241c:	fffffc80 	.word	0xfffffc80
 8002420:	fffffca2 	.word	0xfffffca2
 8002424:	fffffc82 	.word	0xfffffc82

08002428 <__clzsi2>:
 8002428:	211c      	movs	r1, #28
 800242a:	2301      	movs	r3, #1
 800242c:	041b      	lsls	r3, r3, #16
 800242e:	4298      	cmp	r0, r3
 8002430:	d301      	bcc.n	8002436 <__clzsi2+0xe>
 8002432:	0c00      	lsrs	r0, r0, #16
 8002434:	3910      	subs	r1, #16
 8002436:	0a1b      	lsrs	r3, r3, #8
 8002438:	4298      	cmp	r0, r3
 800243a:	d301      	bcc.n	8002440 <__clzsi2+0x18>
 800243c:	0a00      	lsrs	r0, r0, #8
 800243e:	3908      	subs	r1, #8
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	4298      	cmp	r0, r3
 8002444:	d301      	bcc.n	800244a <__clzsi2+0x22>
 8002446:	0900      	lsrs	r0, r0, #4
 8002448:	3904      	subs	r1, #4
 800244a:	a202      	add	r2, pc, #8	; (adr r2, 8002454 <__clzsi2+0x2c>)
 800244c:	5c10      	ldrb	r0, [r2, r0]
 800244e:	1840      	adds	r0, r0, r1
 8002450:	4770      	bx	lr
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	02020304 	.word	0x02020304
 8002458:	01010101 	.word	0x01010101
	...

08002464 <__clzdi2>:
 8002464:	b510      	push	{r4, lr}
 8002466:	2900      	cmp	r1, #0
 8002468:	d103      	bne.n	8002472 <__clzdi2+0xe>
 800246a:	f7ff ffdd 	bl	8002428 <__clzsi2>
 800246e:	3020      	adds	r0, #32
 8002470:	e002      	b.n	8002478 <__clzdi2+0x14>
 8002472:	1c08      	adds	r0, r1, #0
 8002474:	f7ff ffd8 	bl	8002428 <__clzsi2>
 8002478:	bd10      	pop	{r4, pc}
 800247a:	46c0      	nop			; (mov r8, r8)

0800247c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800247c:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800247e:	2001      	movs	r0, #1
 8002480:	4a08      	ldr	r2, [pc, #32]	; (80024a4 <MX_DMA_Init+0x28>)
 8002482:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002484:	4301      	orrs	r1, r0
 8002486:	6391      	str	r1, [r2, #56]	; 0x38
 8002488:	6b93      	ldr	r3, [r2, #56]	; 0x38

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800248a:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800248c:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800248e:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002490:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002492:	3008      	adds	r0, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002494:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002496:	f001 fdf3 	bl	8004080 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800249a:	2009      	movs	r0, #9
 800249c:	f001 fe1a 	bl	80040d4 <HAL_NVIC_EnableIRQ>

}
 80024a0:	bd07      	pop	{r0, r1, r2, pc}
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	40021000 	.word	0x40021000

080024a8 <SystemClock_Config>:
{
 80024a8:	b510      	push	{r4, lr}
 80024aa:	b092      	sub	sp, #72	; 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ac:	2238      	movs	r2, #56	; 0x38
 80024ae:	2100      	movs	r1, #0
 80024b0:	a804      	add	r0, sp, #16
 80024b2:	f003 f827 	bl	8005504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024b6:	2210      	movs	r2, #16
 80024b8:	2100      	movs	r1, #0
 80024ba:	4668      	mov	r0, sp
 80024bc:	f003 f822 	bl	8005504 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024c0:	2080      	movs	r0, #128	; 0x80
 80024c2:	0080      	lsls	r0, r0, #2
 80024c4:	f002 fa84 	bl	80049d0 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80024ce:	2300      	movs	r3, #0
 80024d0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80024d2:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 8;
 80024d4:	3308      	adds	r3, #8
 80024d6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	029b      	lsls	r3, r3, #10
 80024dc:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80024de:	2380      	movs	r3, #128	; 0x80
 80024e0:	049b      	lsls	r3, r3, #18
 80024e2:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80024e4:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024e6:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024e8:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80024ea:	059b      	lsls	r3, r3, #22
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024ec:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024ee:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024f0:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024f2:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024f4:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80024f6:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024f8:	f002 fa96 	bl	8004a28 <HAL_RCC_OscConfig>
 80024fc:	2800      	cmp	r0, #0
 80024fe:	d001      	beq.n	8002504 <SystemClock_Config+0x5c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002500:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002502:	e7fe      	b.n	8002502 <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002504:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002506:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002508:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800250a:	0021      	movs	r1, r4
 800250c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800250e:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002510:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002512:	f002 fcf3 	bl	8004efc <HAL_RCC_ClockConfig>
 8002516:	2800      	cmp	r0, #0
 8002518:	d001      	beq.n	800251e <SystemClock_Config+0x76>
 800251a:	b672      	cpsid	i
  while (1)
 800251c:	e7fe      	b.n	800251c <SystemClock_Config+0x74>
}
 800251e:	b012      	add	sp, #72	; 0x48
 8002520:	bd10      	pop	{r4, pc}
	...

08002524 <main>:
{
 8002524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002526:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8002528:	f001 fa08 	bl	800393c <HAL_Init>
  SystemClock_Config();
 800252c:	f7ff ffbc 	bl	80024a8 <SystemClock_Config>
  MX_DMA_Init();
 8002530:	f7ff ffa4 	bl	800247c <MX_DMA_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002534:	2214      	movs	r2, #20
 8002536:	2100      	movs	r1, #0
 8002538:	a802      	add	r0, sp, #8
 800253a:	f002 ffe3 	bl	8005504 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800253e:	2002      	movs	r0, #2
 8002540:	4b61      	ldr	r3, [pc, #388]	; (80026c8 <main+0x1a4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002542:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002544:	6b59      	ldr	r1, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(OVP_GPIO_Port, OVP_Pin, GPIO_PIN_RESET);
 8002546:	2480      	movs	r4, #128	; 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002548:	4301      	orrs	r1, r0
 800254a:	6359      	str	r1, [r3, #52]	; 0x34
 800254c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(OVP_GPIO_Port, OVP_Pin, GPIO_PIN_RESET);
 800254e:	01a4      	lsls	r4, r4, #6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002550:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(OVP_GPIO_Port, OVP_Pin, GPIO_PIN_RESET);
 8002552:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002554:	9200      	str	r2, [sp, #0]
 8002556:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(OVP_GPIO_Port, OVP_Pin, GPIO_PIN_RESET);
 800255a:	0021      	movs	r1, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800255c:	4332      	orrs	r2, r6
 800255e:	635a      	str	r2, [r3, #52]	; 0x34
 8002560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(OVP_GPIO_Port, OVP_Pin, GPIO_PIN_RESET);
 8002562:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002564:	4033      	ands	r3, r6
 8002566:	9301      	str	r3, [sp, #4]
  HAL_GPIO_WritePin(OVP_GPIO_Port, OVP_Pin, GPIO_PIN_RESET);
 8002568:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800256a:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(OVP_GPIO_Port, OVP_Pin, GPIO_PIN_RESET);
 800256c:	f001 ffbc 	bl	80044e8 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(OVP_GPIO_Port, &GPIO_InitStruct);
 8002570:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2500      	movs	r5, #0
  HAL_GPIO_Init(OVP_GPIO_Port, &GPIO_InitStruct);
 8002574:	a902      	add	r1, sp, #8
 8002576:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = OVP_Pin;
 8002578:	9402      	str	r4, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800257a:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257e:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(OVP_GPIO_Port, &GPIO_InitStruct);
 8002580:	f001 ff04 	bl	800438c <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002584:	220c      	movs	r2, #12
 8002586:	0029      	movs	r1, r5
 8002588:	a802      	add	r0, sp, #8
 800258a:	f002 ffbb 	bl	8005504 <memset>
  hadc1.Instance = ADC1;
 800258e:	4c4f      	ldr	r4, [pc, #316]	; (80026cc <main+0x1a8>)
 8002590:	4b4f      	ldr	r3, [pc, #316]	; (80026d0 <main+0x1ac>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002592:	0020      	movs	r0, r4
  hadc1.Instance = ADC1;
 8002594:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002596:	2380      	movs	r3, #128	; 0x80
 8002598:	05db      	lsls	r3, r3, #23
 800259a:	6063      	str	r3, [r4, #4]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800259c:	2304      	movs	r3, #4
 800259e:	6163      	str	r3, [r4, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80025a0:	19a3      	adds	r3, r4, r6
 80025a2:	77dd      	strb	r5, [r3, #31]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80025a4:	0023      	movs	r3, r4
 80025a6:	332c      	adds	r3, #44	; 0x2c
 80025a8:	701e      	strb	r6, [r3, #0]
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80025aa:	2307      	movs	r3, #7
 80025ac:	6363      	str	r3, [r4, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80025ae:	0023      	movs	r3, r4
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80025b0:	8325      	strh	r5, [r4, #24]
  hadc1.Init.OversamplingMode = DISABLE;
 80025b2:	333c      	adds	r3, #60	; 0x3c
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80025b4:	60a5      	str	r5, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025b6:	60e5      	str	r5, [r4, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80025b8:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80025ba:	76a6      	strb	r6, [r4, #26]
  hadc1.Init.NbrOfConversion = 1;
 80025bc:	61e6      	str	r6, [r4, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025be:	6265      	str	r5, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025c0:	62a5      	str	r5, [r4, #40]	; 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80025c2:	6325      	str	r5, [r4, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80025c4:	63a5      	str	r5, [r4, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80025c6:	701d      	strb	r5, [r3, #0]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80025c8:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80025ca:	f001 f9f3 	bl	80039b4 <HAL_ADC_Init>
 80025ce:	42a8      	cmp	r0, r5
 80025d0:	d001      	beq.n	80025d6 <main+0xb2>
 80025d2:	b672      	cpsid	i
  while (1)
 80025d4:	e7fe      	b.n	80025d4 <main+0xb0>
  sConfig.Channel = ADC_CHANNEL_11;
 80025d6:	4b3f      	ldr	r3, [pc, #252]	; (80026d4 <main+0x1b0>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025d8:	9003      	str	r0, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80025da:	9004      	str	r0, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025dc:	a902      	add	r1, sp, #8
 80025de:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_11;
 80025e0:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025e2:	f001 fb73 	bl	8003ccc <HAL_ADC_ConfigChannel>
 80025e6:	1e07      	subs	r7, r0, #0
 80025e8:	d001      	beq.n	80025ee <main+0xca>
 80025ea:	b672      	cpsid	i
  while (1)
 80025ec:	e7fe      	b.n	80025ec <main+0xc8>
  MX_DMA_Init();
 80025ee:	f7ff ff45 	bl	800247c <MX_DMA_Init>
  hi2c2.Instance = I2C2;
 80025f2:	4d39      	ldr	r5, [pc, #228]	; (80026d8 <main+0x1b4>)
 80025f4:	4b39      	ldr	r3, [pc, #228]	; (80026dc <main+0x1b8>)
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80025f6:	0028      	movs	r0, r5
  hi2c2.Instance = I2C2;
 80025f8:	602b      	str	r3, [r5, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 80025fa:	4b39      	ldr	r3, [pc, #228]	; (80026e0 <main+0x1bc>)
  hi2c2.Init.OwnAddress1 = 0;
 80025fc:	60af      	str	r7, [r5, #8]
  hi2c2.Init.Timing = 0x10707DBC;
 80025fe:	606b      	str	r3, [r5, #4]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002600:	60ee      	str	r6, [r5, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002602:	612f      	str	r7, [r5, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002604:	616f      	str	r7, [r5, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002606:	61af      	str	r7, [r5, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002608:	61ef      	str	r7, [r5, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800260a:	622f      	str	r7, [r5, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800260c:	f002 f886 	bl	800471c <HAL_I2C_Init>
 8002610:	1e01      	subs	r1, r0, #0
 8002612:	d001      	beq.n	8002618 <main+0xf4>
 8002614:	b672      	cpsid	i
  while (1)
 8002616:	e7fe      	b.n	8002616 <main+0xf2>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002618:	0028      	movs	r0, r5
 800261a:	f002 f98f 	bl	800493c <HAL_I2CEx_ConfigAnalogFilter>
 800261e:	1e01      	subs	r1, r0, #0
 8002620:	d001      	beq.n	8002626 <main+0x102>
 8002622:	b672      	cpsid	i
  while (1)
 8002624:	e7fe      	b.n	8002624 <main+0x100>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002626:	0028      	movs	r0, r5
 8002628:	f002 f9ae 	bl	8004988 <HAL_I2CEx_ConfigDigitalFilter>
 800262c:	2800      	cmp	r0, #0
 800262e:	d001      	beq.n	8002634 <main+0x110>
 8002630:	b672      	cpsid	i
  while (1)
 8002632:	e7fe      	b.n	8002632 <main+0x10e>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8002634:	2240      	movs	r2, #64	; 0x40
 8002636:	492b      	ldr	r1, [pc, #172]	; (80026e4 <main+0x1c0>)
 8002638:	0020      	movs	r0, r4
 800263a:	f001 fcc9 	bl	8003fd0 <HAL_ADC_Start_DMA>
  ssd1306_Init();
 800263e:	f002 fed9 	bl	80053f4 <ssd1306_Init>
	  voltage = voltage_mv/1000.0;
 8002642:	4929      	ldr	r1, [pc, #164]	; (80026e8 <main+0x1c4>)
 8002644:	2200      	movs	r2, #0
 8002646:	6808      	ldr	r0, [r1, #0]
 8002648:	6849      	ldr	r1, [r1, #4]
 800264a:	4b28      	ldr	r3, [pc, #160]	; (80026ec <main+0x1c8>)
 800264c:	f7fe fb8c 	bl	8000d68 <__aeabi_ddiv>
 8002650:	f7ff fe62 	bl	8002318 <__aeabi_d2f>
	  sprintf_(str, "%.2f V", voltage);
 8002654:	f7ff fe18 	bl	8002288 <__aeabi_f2d>
 8002658:	0002      	movs	r2, r0
 800265a:	000b      	movs	r3, r1
 800265c:	a802      	add	r0, sp, #8
 800265e:	4924      	ldr	r1, [pc, #144]	; (80026f0 <main+0x1cc>)
 8002660:	f001 f84a 	bl	80036f8 <sprintf_>
	  ssd1306_Fill(Black);
 8002664:	2000      	movs	r0, #0
 8002666:	f002 fdff 	bl	8005268 <ssd1306_Fill>
	  ssd1306_SetCursor(2, y);
 800266a:	2100      	movs	r1, #0
 800266c:	2002      	movs	r0, #2
 800266e:	f002 fea3 	bl	80053b8 <ssd1306_SetCursor>
	  ssd1306_WriteString((char *)str, Font_16x26, White);
 8002672:	4a20      	ldr	r2, [pc, #128]	; (80026f4 <main+0x1d0>)
 8002674:	2301      	movs	r3, #1
 8002676:	ca06      	ldmia	r2, {r1, r2}
 8002678:	a802      	add	r0, sp, #8
 800267a:	f002 fe89 	bl	8005390 <ssd1306_WriteString>
	  if(overvoltage_active)
 800267e:	4b1e      	ldr	r3, [pc, #120]	; (80026f8 <main+0x1d4>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d009      	beq.n	800269a <main+0x176>
		  ssd1306_SetCursor(2, y);
 8002686:	211a      	movs	r1, #26
 8002688:	2002      	movs	r0, #2
 800268a:	f002 fe95 	bl	80053b8 <ssd1306_SetCursor>
		  ssd1306_WriteString("OVERVOLTAGE", Font_11x18, White);
 800268e:	4a1b      	ldr	r2, [pc, #108]	; (80026fc <main+0x1d8>)
 8002690:	2301      	movs	r3, #1
 8002692:	ca06      	ldmia	r2, {r1, r2}
 8002694:	481a      	ldr	r0, [pc, #104]	; (8002700 <main+0x1dc>)
 8002696:	f002 fe7b 	bl	8005390 <ssd1306_WriteString>
	 sprintf_(str, "OVP: %.2f V", OVP_MV/1000.0);
 800269a:	4a1a      	ldr	r2, [pc, #104]	; (8002704 <main+0x1e0>)
 800269c:	4b1a      	ldr	r3, [pc, #104]	; (8002708 <main+0x1e4>)
 800269e:	491b      	ldr	r1, [pc, #108]	; (800270c <main+0x1e8>)
 80026a0:	a802      	add	r0, sp, #8
 80026a2:	f001 f829 	bl	80036f8 <sprintf_>
	 ssd1306_SetCursor(2, y);
 80026a6:	2134      	movs	r1, #52	; 0x34
 80026a8:	2002      	movs	r0, #2
 80026aa:	f002 fe85 	bl	80053b8 <ssd1306_SetCursor>
	 ssd1306_WriteString((char *)str, Font_7x10, White);
 80026ae:	4a18      	ldr	r2, [pc, #96]	; (8002710 <main+0x1ec>)
 80026b0:	2301      	movs	r3, #1
 80026b2:	ca06      	ldmia	r2, {r1, r2}
 80026b4:	a802      	add	r0, sp, #8
 80026b6:	f002 fe6b 	bl	8005390 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 80026ba:	f002 fde3 	bl	8005284 <ssd1306_UpdateScreen>
	  HAL_Delay(50);
 80026be:	2032      	movs	r0, #50	; 0x32
 80026c0:	f001 f962 	bl	8003988 <HAL_Delay>
  {
 80026c4:	e7bd      	b.n	8002642 <main+0x11e>
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	40021000 	.word	0x40021000
 80026cc:	200004ac 	.word	0x200004ac
 80026d0:	40012400 	.word	0x40012400
 80026d4:	2c000800 	.word	0x2c000800
 80026d8:	20000460 	.word	0x20000460
 80026dc:	40005800 	.word	0x40005800
 80026e0:	10707dbc 	.word	0x10707dbc
 80026e4:	2000056c 	.word	0x2000056c
 80026e8:	20000048 	.word	0x20000048
 80026ec:	408f4000 	.word	0x408f4000
 80026f0:	080055c1 	.word	0x080055c1
 80026f4:	20000014 	.word	0x20000014
 80026f8:	20000044 	.word	0x20000044
 80026fc:	2000000c 	.word	0x2000000c
 8002700:	080055b0 	.word	0x080055b0
 8002704:	cccccccd 	.word	0xcccccccd
 8002708:	4030cccc 	.word	0x4030cccc
 800270c:	080055bc 	.word	0x080055bc
 8002710:	2000001c 	.word	0x2000001c

08002714 <HAL_ADC_ConvHalfCpltCallback>:
}
 8002714:	4770      	bx	lr
	...

08002718 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002718:	b570      	push	{r4, r5, r6, lr}
uint32_t sum = 0;
 800271a:	2000      	movs	r0, #0
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800271c:	2440      	movs	r4, #64	; 0x40
 800271e:	4b1d      	ldr	r3, [pc, #116]	; (8002794 <HAL_ADC_ConvCpltCallback+0x7c>)
	sum += adc_buf[i];
 8002720:	881a      	ldrh	r2, [r3, #0]
 8002722:	3c01      	subs	r4, #1
 8002724:	b2a4      	uxth	r4, r4
 8002726:	1880      	adds	r0, r0, r2
for(uint16_t i = 0; i < ADC_BUF_LEN; i++)
 8002728:	3302      	adds	r3, #2
 800272a:	2c00      	cmp	r4, #0
 800272c:	d1f8      	bne.n	8002720 <HAL_ADC_ConvCpltCallback+0x8>
voltage_raw = sum / (double)ADC_BUF_LEN;
 800272e:	f7ff fd85 	bl	800223c <__aeabi_ui2d>
 8002732:	2200      	movs	r2, #0
 8002734:	4b18      	ldr	r3, [pc, #96]	; (8002798 <HAL_ADC_ConvCpltCallback+0x80>)
 8002736:	f7fe ff1d 	bl	8001574 <__aeabi_dmul>
 800273a:	4b18      	ldr	r3, [pc, #96]	; (800279c <HAL_ADC_ConvCpltCallback+0x84>)
voltage_mv = (voltage_raw * VOLT_SLOPE) + VOLT_OFFSET;
 800273c:	2200      	movs	r2, #0
voltage_raw = sum / (double)ADC_BUF_LEN;
 800273e:	6018      	str	r0, [r3, #0]
 8002740:	6059      	str	r1, [r3, #4]
voltage_mv = (voltage_raw * VOLT_SLOPE) + VOLT_OFFSET;
 8002742:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <HAL_ADC_ConvCpltCallback+0x88>)
 8002744:	f7fe ff16 	bl	8001574 <__aeabi_dmul>
 8002748:	2200      	movs	r2, #0
 800274a:	4b16      	ldr	r3, [pc, #88]	; (80027a4 <HAL_ADC_ConvCpltCallback+0x8c>)
 800274c:	f7fe fb0c 	bl	8000d68 <__aeabi_ddiv>
 8002750:	4a15      	ldr	r2, [pc, #84]	; (80027a8 <HAL_ADC_ConvCpltCallback+0x90>)
 8002752:	4b16      	ldr	r3, [pc, #88]	; (80027ac <HAL_ADC_ConvCpltCallback+0x94>)
 8002754:	f7ff f97a 	bl	8001a4c <__aeabi_dsub>
 8002758:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <HAL_ADC_ConvCpltCallback+0x98>)
if(voltage_mv > OVP_MV)
 800275a:	2200      	movs	r2, #0
voltage_mv = (voltage_raw * VOLT_SLOPE) + VOLT_OFFSET;
 800275c:	6018      	str	r0, [r3, #0]
 800275e:	6059      	str	r1, [r3, #4]
if(voltage_mv > OVP_MV)
 8002760:	4b14      	ldr	r3, [pc, #80]	; (80027b4 <HAL_ADC_ConvCpltCallback+0x9c>)
 8002762:	f7fd fe79 	bl	8000458 <__aeabi_dcmpgt>
 8002766:	4d14      	ldr	r5, [pc, #80]	; (80027b8 <HAL_ADC_ConvCpltCallback+0xa0>)
 8002768:	2800      	cmp	r0, #0
 800276a:	d009      	beq.n	8002780 <HAL_ADC_ConvCpltCallback+0x68>
	HAL_GPIO_WritePin(OVP_GPIO_Port, OVP_Pin, GPIO_PIN_SET);
 800276c:	2180      	movs	r1, #128	; 0x80
 800276e:	20a0      	movs	r0, #160	; 0xa0
 8002770:	2201      	movs	r2, #1
 8002772:	0189      	lsls	r1, r1, #6
 8002774:	05c0      	lsls	r0, r0, #23
 8002776:	f001 feb7 	bl	80044e8 <HAL_GPIO_WritePin>
	overvoltage_active = 1;
 800277a:	2301      	movs	r3, #1
 800277c:	702b      	strb	r3, [r5, #0]
}
 800277e:	bd70      	pop	{r4, r5, r6, pc}
	HAL_GPIO_WritePin(OVP_GPIO_Port, OVP_Pin, GPIO_PIN_RESET);
 8002780:	2180      	movs	r1, #128	; 0x80
 8002782:	20a0      	movs	r0, #160	; 0xa0
 8002784:	0022      	movs	r2, r4
 8002786:	0189      	lsls	r1, r1, #6
 8002788:	05c0      	lsls	r0, r0, #23
 800278a:	f001 fead 	bl	80044e8 <HAL_GPIO_WritePin>
	overvoltage_active = 0;
 800278e:	702c      	strb	r4, [r5, #0]
}
 8002790:	e7f5      	b.n	800277e <HAL_ADC_ConvCpltCallback+0x66>
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	2000056c 	.word	0x2000056c
 8002798:	3f900000 	.word	0x3f900000
 800279c:	20000050 	.word	0x20000050
 80027a0:	c0c75800 	.word	0xc0c75800
 80027a4:	c09e9d00 	.word	0xc09e9d00
 80027a8:	10dafd60 	.word	0x10dafd60
 80027ac:	406b772c 	.word	0x406b772c
 80027b0:	20000048 	.word	0x20000048
 80027b4:	40d06800 	.word	0x40d06800
 80027b8:	20000044 	.word	0x20000044

080027bc <Error_Handler>:
 80027bc:	b672      	cpsid	i
  while (1)
 80027be:	e7fe      	b.n	80027be <Error_Handler+0x2>

080027c0 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d200      	bcs.n	80027c6 <_out_buffer+0x6>
    ((char*)buffer)[idx] = character;
 80027c4:	5488      	strb	r0, [r1, r2]
  }
}
 80027c6:	4770      	bx	lr

080027c8 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80027c8:	4770      	bx	lr

080027ca <_out_rev>:
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 80027ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027cc:	b085      	sub	sp, #20
 80027ce:	9302      	str	r3, [sp, #8]
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80027d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
{
 80027d2:	000f      	movs	r7, r1
 80027d4:	0014      	movs	r4, r2
 80027d6:	9001      	str	r0, [sp, #4]
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80027d8:	079b      	lsls	r3, r3, #30
 80027da:	d032      	beq.n	8002842 <_out_rev+0x78>
 80027dc:	9200      	str	r2, [sp, #0]
 80027de:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80027e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80027e2:	9b00      	ldr	r3, [sp, #0]
 80027e4:	189d      	adds	r5, r3, r2
 80027e6:	1baa      	subs	r2, r5, r6
      out(' ', buffer, idx++, maxlen);
    }
  }

  // reverse string
  while (len) {
 80027e8:	2e00      	cmp	r6, #0
 80027ea:	d12c      	bne.n	8002846 <_out_rev+0x7c>
    out(buf[--len], buffer, idx++, maxlen);
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80027ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80027ee:	079b      	lsls	r3, r3, #30
 80027f0:	d50f      	bpl.n	8002812 <_out_rev+0x48>
 80027f2:	1b2b      	subs	r3, r5, r4
 80027f4:	9303      	str	r3, [sp, #12]
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	9b00      	ldr	r3, [sp, #0]
    while (idx - start_idx < width) {
 80027fa:	9900      	ldr	r1, [sp, #0]
 80027fc:	18e2      	adds	r2, r4, r3
 80027fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002800:	428b      	cmp	r3, r1
 8002802:	d828      	bhi.n	8002856 <_out_rev+0x8c>
 8002804:	9903      	ldr	r1, [sp, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	428b      	cmp	r3, r1
 800280a:	d301      	bcc.n	8002810 <_out_rev+0x46>
 800280c:	18e4      	adds	r4, r4, r3
 800280e:	1b62      	subs	r2, r4, r5
 8002810:	18ad      	adds	r5, r5, r2
      out(' ', buffer, idx++, maxlen);
    }
  }

  return idx;
}
 8002812:	0028      	movs	r0, r5
 8002814:	b005      	add	sp, #20
 8002816:	bdf0      	pop	{r4, r5, r6, r7, pc}
      out(' ', buffer, idx++, maxlen);
 8002818:	0039      	movs	r1, r7
 800281a:	2020      	movs	r0, #32
 800281c:	9b02      	ldr	r3, [sp, #8]
 800281e:	9e01      	ldr	r6, [sp, #4]
 8002820:	47b0      	blx	r6
    for (size_t i = len; i < width; i++) {
 8002822:	3501      	adds	r5, #1
 8002824:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002826:	1ae2      	subs	r2, r4, r3
 8002828:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800282a:	1952      	adds	r2, r2, r5
 800282c:	429d      	cmp	r5, r3
 800282e:	d3f3      	bcc.n	8002818 <_out_rev+0x4e>
 8002830:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002832:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002834:	2300      	movs	r3, #0
 8002836:	428a      	cmp	r2, r1
 8002838:	d800      	bhi.n	800283c <_out_rev+0x72>
 800283a:	1a8b      	subs	r3, r1, r2
 800283c:	191b      	adds	r3, r3, r4
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	e7cd      	b.n	80027de <_out_rev+0x14>
 8002842:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002844:	e7ee      	b.n	8002824 <_out_rev+0x5a>
    out(buf[--len], buffer, idx++, maxlen);
 8002846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002848:	3e01      	subs	r6, #1
 800284a:	5d98      	ldrb	r0, [r3, r6]
 800284c:	0039      	movs	r1, r7
 800284e:	9b02      	ldr	r3, [sp, #8]
 8002850:	9d01      	ldr	r5, [sp, #4]
 8002852:	47a8      	blx	r5
 8002854:	e7c4      	b.n	80027e0 <_out_rev+0x16>
      out(' ', buffer, idx++, maxlen);
 8002856:	9b02      	ldr	r3, [sp, #8]
 8002858:	0039      	movs	r1, r7
 800285a:	2020      	movs	r0, #32
 800285c:	9e01      	ldr	r6, [sp, #4]
 800285e:	47b0      	blx	r6
 8002860:	9b00      	ldr	r3, [sp, #0]
 8002862:	3301      	adds	r3, #1
 8002864:	e7c7      	b.n	80027f6 <_out_rev+0x2c>

08002866 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002866:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002868:	b089      	sub	sp, #36	; 0x24
 800286a:	0007      	movs	r7, r0
 800286c:	a810      	add	r0, sp, #64	; 0x40
 800286e:	7806      	ldrb	r6, [r0, #0]
 8002870:	9814      	ldr	r0, [sp, #80]	; 0x50
 8002872:	9105      	str	r1, [sp, #20]
 8002874:	9206      	str	r2, [sp, #24]
 8002876:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002878:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800287a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800287c:	9307      	str	r3, [sp, #28]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800287e:	0783      	lsls	r3, r0, #30
 8002880:	d41e      	bmi.n	80028c0 <_ntoa_format+0x5a>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002882:	2501      	movs	r5, #1
 8002884:	4005      	ands	r5, r0
 8002886:	2c00      	cmp	r4, #0
 8002888:	d007      	beq.n	800289a <_ntoa_format+0x34>
 800288a:	2d00      	cmp	r5, #0
 800288c:	d005      	beq.n	800289a <_ntoa_format+0x34>
 800288e:	2e00      	cmp	r6, #0
 8002890:	d102      	bne.n	8002898 <_ntoa_format+0x32>
 8002892:	230c      	movs	r3, #12
 8002894:	4218      	tst	r0, r3
 8002896:	d000      	beq.n	800289a <_ntoa_format+0x34>
      width--;
 8002898:	3c01      	subs	r4, #1
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 800289a:	2330      	movs	r3, #48	; 0x30
 800289c:	469c      	mov	ip, r3
 800289e:	e002      	b.n	80028a6 <_ntoa_format+0x40>
 80028a0:	4663      	mov	r3, ip
 80028a2:	548b      	strb	r3, [r1, r2]
 80028a4:	3201      	adds	r2, #1
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80028a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d201      	bcs.n	80028b0 <_ntoa_format+0x4a>
 80028ac:	2a20      	cmp	r2, #32
 80028ae:	d1f7      	bne.n	80028a0 <_ntoa_format+0x3a>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 80028b0:	2330      	movs	r3, #48	; 0x30
 80028b2:	469c      	mov	ip, r3
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80028b4:	2d00      	cmp	r5, #0
 80028b6:	d003      	beq.n	80028c0 <_ntoa_format+0x5a>
 80028b8:	42a2      	cmp	r2, r4
 80028ba:	d201      	bcs.n	80028c0 <_ntoa_format+0x5a>
 80028bc:	2a1f      	cmp	r2, #31
 80028be:	d919      	bls.n	80028f4 <_ntoa_format+0x8e>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80028c0:	06c3      	lsls	r3, r0, #27
 80028c2:	d53a      	bpl.n	800293a <_ntoa_format+0xd4>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80028c4:	0543      	lsls	r3, r0, #21
 80028c6:	d41a      	bmi.n	80028fe <_ntoa_format+0x98>
 80028c8:	2a00      	cmp	r2, #0
 80028ca:	d018      	beq.n	80028fe <_ntoa_format+0x98>
 80028cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d001      	beq.n	80028d6 <_ntoa_format+0x70>
 80028d2:	42a2      	cmp	r2, r4
 80028d4:	d113      	bne.n	80028fe <_ntoa_format+0x98>
      len--;
 80028d6:	1e55      	subs	r5, r2, #1
      if (len && (base == 16U)) {
 80028d8:	2a01      	cmp	r2, #1
 80028da:	d00f      	beq.n	80028fc <_ntoa_format+0x96>
 80028dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
        len--;
 80028de:	3a02      	subs	r2, #2
      if (len && (base == 16U)) {
 80028e0:	2b10      	cmp	r3, #16
 80028e2:	d00f      	beq.n	8002904 <_ntoa_format+0x9e>
 80028e4:	002a      	movs	r2, r5
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80028e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d121      	bne.n	8002930 <_ntoa_format+0xca>
 80028ec:	2a1f      	cmp	r2, #31
 80028ee:	d80e      	bhi.n	800290e <_ntoa_format+0xa8>
      buf[len++] = 'b';
 80028f0:	2562      	movs	r5, #98	; 0x62
 80028f2:	e01b      	b.n	800292c <_ntoa_format+0xc6>
      buf[len++] = '0';
 80028f4:	4663      	mov	r3, ip
 80028f6:	548b      	strb	r3, [r1, r2]
 80028f8:	3201      	adds	r2, #1
 80028fa:	e7db      	b.n	80028b4 <_ntoa_format+0x4e>
 80028fc:	002a      	movs	r2, r5
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80028fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002900:	2b10      	cmp	r3, #16
 8002902:	d1f0      	bne.n	80028e6 <_ntoa_format+0x80>
 8002904:	0683      	lsls	r3, r0, #26
 8002906:	d40e      	bmi.n	8002926 <_ntoa_format+0xc0>
      buf[len++] = 'x';
 8002908:	2578      	movs	r5, #120	; 0x78
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800290a:	2a1f      	cmp	r2, #31
 800290c:	d90e      	bls.n	800292c <_ntoa_format+0xc6>
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800290e:	9003      	str	r0, [sp, #12]
 8002910:	9201      	str	r2, [sp, #4]
 8002912:	9100      	str	r1, [sp, #0]
 8002914:	0038      	movs	r0, r7
 8002916:	9b07      	ldr	r3, [sp, #28]
 8002918:	9a06      	ldr	r2, [sp, #24]
 800291a:	9905      	ldr	r1, [sp, #20]
 800291c:	9402      	str	r4, [sp, #8]
 800291e:	f7ff ff54 	bl	80027ca <_out_rev>
}
 8002922:	b009      	add	sp, #36	; 0x24
 8002924:	bdf0      	pop	{r4, r5, r6, r7, pc}
      buf[len++] = 'X';
 8002926:	2558      	movs	r5, #88	; 0x58
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002928:	2a1f      	cmp	r2, #31
 800292a:	d8f0      	bhi.n	800290e <_ntoa_format+0xa8>
      buf[len++] = 'b';
 800292c:	548d      	strb	r5, [r1, r2]
 800292e:	3201      	adds	r2, #1
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002930:	2a1f      	cmp	r2, #31
 8002932:	d8ec      	bhi.n	800290e <_ntoa_format+0xa8>
      buf[len++] = '0';
 8002934:	2530      	movs	r5, #48	; 0x30
 8002936:	548d      	strb	r5, [r1, r2]
 8002938:	3201      	adds	r2, #1
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800293a:	2a1f      	cmp	r2, #31
 800293c:	d8e7      	bhi.n	800290e <_ntoa_format+0xa8>
      buf[len++] = '-';
 800293e:	252d      	movs	r5, #45	; 0x2d
    if (negative) {
 8002940:	2e00      	cmp	r6, #0
 8002942:	d105      	bne.n	8002950 <_ntoa_format+0xea>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002944:	252b      	movs	r5, #43	; 0x2b
    else if (flags & FLAGS_PLUS) {
 8002946:	0743      	lsls	r3, r0, #29
 8002948:	d402      	bmi.n	8002950 <_ntoa_format+0xea>
    else if (flags & FLAGS_SPACE) {
 800294a:	0703      	lsls	r3, r0, #28
 800294c:	d5df      	bpl.n	800290e <_ntoa_format+0xa8>
      buf[len++] = ' ';
 800294e:	2520      	movs	r5, #32
 8002950:	548d      	strb	r5, [r1, r2]
 8002952:	3201      	adds	r2, #1
 8002954:	e7db      	b.n	800290e <_ntoa_format+0xa8>

08002956 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002956:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002958:	b097      	sub	sp, #92	; 0x5c
 800295a:	920a      	str	r2, [sp, #40]	; 0x28
 800295c:	aa1c      	add	r2, sp, #112	; 0x70
 800295e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002960:	ca08      	ldmia	r2!, {r3}
 8002962:	000d      	movs	r5, r1
 8002964:	7812      	ldrb	r2, [r2, #0]
 8002966:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8002968:	9009      	str	r0, [sp, #36]	; 0x24
 800296a:	920c      	str	r2, [sp, #48]	; 0x30
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <_ntoa_long+0x1e>
    flags &= ~FLAGS_HASH;
 8002970:	2210      	movs	r2, #16
 8002972:	4394      	bics	r4, r2
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002974:	0562      	lsls	r2, r4, #21
 8002976:	d501      	bpl.n	800297c <_ntoa_long+0x26>
 8002978:	2b00      	cmp	r3, #0
 800297a:	d01f      	beq.n	80029bc <_ntoa_long+0x66>
 800297c:	2261      	movs	r2, #97	; 0x61
 800297e:	06a1      	lsls	r1, r4, #26
 8002980:	d500      	bpl.n	8002984 <_ntoa_long+0x2e>
 8002982:	2241      	movs	r2, #65	; 0x41
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002984:	001e      	movs	r6, r3
 8002986:	2700      	movs	r7, #0
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	3a0a      	subs	r2, #10
 800298c:	920d      	str	r2, [sp, #52]	; 0x34
      const char digit = (char)(value % base);
 800298e:	0030      	movs	r0, r6
 8002990:	991e      	ldr	r1, [sp, #120]	; 0x78
 8002992:	f7fd fc47 	bl	8000224 <__aeabi_uidivmod>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002996:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      const char digit = (char)(value % base);
 8002998:	b2cb      	uxtb	r3, r1
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800299a:	189a      	adds	r2, r3, r2
 800299c:	4684      	mov	ip, r0
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	2909      	cmp	r1, #9
 80029a2:	d801      	bhi.n	80029a8 <_ntoa_long+0x52>
 80029a4:	3330      	adds	r3, #48	; 0x30
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	2020      	movs	r0, #32
 80029aa:	a906      	add	r1, sp, #24
 80029ac:	1809      	adds	r1, r1, r0
 80029ae:	55ca      	strb	r2, [r1, r7]
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80029b0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80029b2:	1c7b      	adds	r3, r7, #1
 80029b4:	4296      	cmp	r6, r2
 80029b6:	d301      	bcc.n	80029bc <_ntoa_long+0x66>
 80029b8:	4283      	cmp	r3, r0
 80029ba:	d113      	bne.n	80029e4 <_ntoa_long+0x8e>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80029bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80029be:	9301      	str	r3, [sp, #4]
 80029c0:	9205      	str	r2, [sp, #20]
 80029c2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80029c4:	ab0e      	add	r3, sp, #56	; 0x38
 80029c6:	9204      	str	r2, [sp, #16]
 80029c8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	9203      	str	r2, [sp, #12]
 80029ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80029d0:	0029      	movs	r1, r5
 80029d2:	9202      	str	r2, [sp, #8]
 80029d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80029d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80029d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029da:	9406      	str	r4, [sp, #24]
 80029dc:	f7ff ff43 	bl	8002866 <_ntoa_format>
}
 80029e0:	b017      	add	sp, #92	; 0x5c
 80029e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029e4:	001f      	movs	r7, r3
      value /= base;
 80029e6:	4666      	mov	r6, ip
 80029e8:	e7d1      	b.n	800298e <_ntoa_long+0x38>

080029ea <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80029ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ec:	b09b      	sub	sp, #108	; 0x6c
 80029ee:	930d      	str	r3, [sp, #52]	; 0x34
 80029f0:	ab22      	add	r3, sp, #136	; 0x88
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80029f6:	930e      	str	r3, [sp, #56]	; 0x38
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 80029f8:	002b      	movs	r3, r5
{
 80029fa:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80029fc:	9f24      	ldr	r7, [sp, #144]	; 0x90
 80029fe:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8002a00:	900a      	str	r0, [sp, #40]	; 0x28
 8002a02:	910b      	str	r1, [sp, #44]	; 0x2c
 8002a04:	920c      	str	r2, [sp, #48]	; 0x30
  if (!value) {
 8002a06:	4323      	orrs	r3, r4
 8002a08:	d103      	bne.n	8002a12 <_ntoa_long_long+0x28>
    flags &= ~FLAGS_HASH;
 8002a0a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8002a0c:	3310      	adds	r3, #16
 8002a0e:	439a      	bics	r2, r3
 8002a10:	9228      	str	r2, [sp, #160]	; 0xa0
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002a12:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002a14:	055b      	lsls	r3, r3, #21
 8002a16:	d504      	bpl.n	8002a22 <_ntoa_long_long+0x38>
 8002a18:	002a      	movs	r2, r5
  size_t len = 0U;
 8002a1a:	2300      	movs	r3, #0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002a1c:	4322      	orrs	r2, r4
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d02a      	beq.n	8002a78 <_ntoa_long_long+0x8e>
 8002a22:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8002a24:	2361      	movs	r3, #97	; 0x61
 8002a26:	0692      	lsls	r2, r2, #26
 8002a28:	d500      	bpl.n	8002a2c <_ntoa_long_long+0x42>
 8002a2a:	2341      	movs	r3, #65	; 0x41
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	3b0a      	subs	r3, #10
 8002a32:	9209      	str	r2, [sp, #36]	; 0x24
 8002a34:	930f      	str	r3, [sp, #60]	; 0x3c
      const char digit = (char)(value % base);
 8002a36:	003a      	movs	r2, r7
 8002a38:	0033      	movs	r3, r6
 8002a3a:	0028      	movs	r0, r5
 8002a3c:	0021      	movs	r1, r4
 8002a3e:	f7fd fd1f 	bl	8000480 <__aeabi_uldivmod>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002a42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      const char digit = (char)(value % base);
 8002a44:	b2d2      	uxtb	r2, r2
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002a46:	18d3      	adds	r3, r2, r3
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	469c      	mov	ip, r3
 8002a4c:	9010      	str	r0, [sp, #64]	; 0x40
 8002a4e:	9111      	str	r1, [sp, #68]	; 0x44
 8002a50:	2a09      	cmp	r2, #9
 8002a52:	d802      	bhi.n	8002a5a <_ntoa_long_long+0x70>
 8002a54:	3230      	adds	r2, #48	; 0x30
 8002a56:	b2d3      	uxtb	r3, r2
 8002a58:	469c      	mov	ip, r3
 8002a5a:	2020      	movs	r0, #32
 8002a5c:	aa0a      	add	r2, sp, #40	; 0x28
 8002a5e:	1812      	adds	r2, r2, r0
 8002a60:	4660      	mov	r0, ip
 8002a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002a66:	3301      	adds	r3, #1
 8002a68:	5450      	strb	r0, [r2, r1]
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002a6a:	42a6      	cmp	r6, r4
 8002a6c:	d804      	bhi.n	8002a78 <_ntoa_long_long+0x8e>
 8002a6e:	d101      	bne.n	8002a74 <_ntoa_long_long+0x8a>
 8002a70:	42af      	cmp	r7, r5
 8002a72:	d801      	bhi.n	8002a78 <_ntoa_long_long+0x8e>
 8002a74:	2b20      	cmp	r3, #32
 8002a76:	d113      	bne.n	8002aa0 <_ntoa_long_long+0xb6>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002a78:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8002a7a:	9301      	str	r3, [sp, #4]
 8002a7c:	9206      	str	r2, [sp, #24]
 8002a7e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8002a80:	ab12      	add	r3, sp, #72	; 0x48
 8002a82:	9205      	str	r2, [sp, #20]
 8002a84:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	9204      	str	r2, [sp, #16]
 8002a8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002a8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002a8e:	9202      	str	r2, [sp, #8]
 8002a90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002a92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002a94:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002a96:	9703      	str	r7, [sp, #12]
 8002a98:	f7ff fee5 	bl	8002866 <_ntoa_format>
}
 8002a9c:	b01b      	add	sp, #108	; 0x6c
 8002a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      value /= base;
 8002aa0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002aa2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8002aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8002aa6:	e7c6      	b.n	8002a36 <_ntoa_long_long+0x4c>

08002aa8 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aaa:	b09b      	sub	sp, #108	; 0x6c
 8002aac:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8002aae:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8002ab0:	9009      	str	r0, [sp, #36]	; 0x24
 8002ab2:	910a      	str	r1, [sp, #40]	; 0x28
 8002ab4:	920b      	str	r2, [sp, #44]	; 0x2c
 8002ab6:	930c      	str	r3, [sp, #48]	; 0x30

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8002ab8:	0032      	movs	r2, r6
 8002aba:	003b      	movs	r3, r7
 8002abc:	0030      	movs	r0, r6
 8002abe:	0039      	movs	r1, r7
{
 8002ac0:	9c22      	ldr	r4, [sp, #136]	; 0x88
  if (value != value)
 8002ac2:	f7fd fcaf 	bl	8000424 <__aeabi_dcmpeq>
 8002ac6:	2800      	cmp	r0, #0
 8002ac8:	d108      	bne.n	8002adc <_ftoa+0x34>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8002aca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002acc:	9303      	str	r3, [sp, #12]
 8002ace:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002ad0:	9302      	str	r3, [sp, #8]
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	9301      	str	r3, [sp, #4]
 8002ad6:	4bb0      	ldr	r3, [pc, #704]	; (8002d98 <_ftoa+0x2f0>)
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	e024      	b.n	8002b26 <_ftoa+0x7e>
  if (value < -DBL_MAX)
 8002adc:	2201      	movs	r2, #1
 8002ade:	0030      	movs	r0, r6
 8002ae0:	0039      	movs	r1, r7
 8002ae2:	4bae      	ldr	r3, [pc, #696]	; (8002d9c <_ftoa+0x2f4>)
 8002ae4:	4252      	negs	r2, r2
 8002ae6:	f7fd fca3 	bl	8000430 <__aeabi_dcmplt>
 8002aea:	2800      	cmp	r0, #0
 8002aec:	d007      	beq.n	8002afe <_ftoa+0x56>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8002aee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002af0:	9303      	str	r3, [sp, #12]
 8002af2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002af4:	9302      	str	r3, [sp, #8]
 8002af6:	2304      	movs	r3, #4
 8002af8:	9301      	str	r3, [sp, #4]
 8002afa:	4ba9      	ldr	r3, [pc, #676]	; (8002da0 <_ftoa+0x2f8>)
 8002afc:	e7ec      	b.n	8002ad8 <_ftoa+0x30>
  if (value > DBL_MAX)
 8002afe:	2201      	movs	r2, #1
 8002b00:	0030      	movs	r0, r6
 8002b02:	0039      	movs	r1, r7
 8002b04:	4ba7      	ldr	r3, [pc, #668]	; (8002da4 <_ftoa+0x2fc>)
 8002b06:	4252      	negs	r2, r2
 8002b08:	f7fd fca6 	bl	8000458 <__aeabi_dcmpgt>
 8002b0c:	2800      	cmp	r0, #0
 8002b0e:	d014      	beq.n	8002b3a <_ftoa+0x92>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002b10:	2304      	movs	r3, #4
 8002b12:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002b14:	421a      	tst	r2, r3
 8002b16:	d00d      	beq.n	8002b34 <_ftoa+0x8c>
 8002b18:	4aa3      	ldr	r2, [pc, #652]	; (8002da8 <_ftoa+0x300>)
 8002b1a:	9924      	ldr	r1, [sp, #144]	; 0x90
 8002b1c:	9301      	str	r3, [sp, #4]
 8002b1e:	9103      	str	r1, [sp, #12]
 8002b20:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8002b22:	9200      	str	r2, [sp, #0]
 8002b24:	9102      	str	r1, [sp, #8]
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002b26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002b2a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002b2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b2e:	f7ff fe4c 	bl	80027ca <_out_rev>
 8002b32:	e01f      	b.n	8002b74 <_ftoa+0xcc>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002b34:	2303      	movs	r3, #3
 8002b36:	4a9d      	ldr	r2, [pc, #628]	; (8002dac <_ftoa+0x304>)
 8002b38:	e7ef      	b.n	8002b1a <_ftoa+0x72>
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	0030      	movs	r0, r6
 8002b3e:	0039      	movs	r1, r7
 8002b40:	4b9b      	ldr	r3, [pc, #620]	; (8002db0 <_ftoa+0x308>)
 8002b42:	f7fd fc89 	bl	8000458 <__aeabi_dcmpgt>
 8002b46:	2800      	cmp	r0, #0
 8002b48:	d107      	bne.n	8002b5a <_ftoa+0xb2>
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	0030      	movs	r0, r6
 8002b4e:	0039      	movs	r1, r7
 8002b50:	4b98      	ldr	r3, [pc, #608]	; (8002db4 <_ftoa+0x30c>)
 8002b52:	f7fd fc6d 	bl	8000430 <__aeabi_dcmplt>
 8002b56:	2800      	cmp	r0, #0
 8002b58:	d00e      	beq.n	8002b78 <_ftoa+0xd0>
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002b5a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002b5c:	9600      	str	r6, [sp, #0]
 8002b5e:	9701      	str	r7, [sp, #4]
 8002b60:	9304      	str	r3, [sp, #16]
 8002b62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002b64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002b66:	9303      	str	r3, [sp, #12]
 8002b68:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b6e:	9402      	str	r4, [sp, #8]
 8002b70:	f000 f926 	bl	8002dc0 <_etoa>
}
 8002b74:	b01b      	add	sp, #108	; 0x6c
 8002b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (value < 0) {
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	0030      	movs	r0, r6
 8002b7e:	0039      	movs	r1, r7
 8002b80:	f7fd fc56 	bl	8000430 <__aeabi_dcmplt>
 8002b84:	2800      	cmp	r0, #0
 8002b86:	d077      	beq.n	8002c78 <_ftoa+0x1d0>
    value = 0 - value;
 8002b88:	003b      	movs	r3, r7
 8002b8a:	0032      	movs	r2, r6
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	2100      	movs	r1, #0
 8002b90:	f7fe ff5c 	bl	8001a4c <__aeabi_dsub>
    negative = true;
 8002b94:	2301      	movs	r3, #1
    value = 0 - value;
 8002b96:	0006      	movs	r6, r0
 8002b98:	000f      	movs	r7, r1
    negative = true;
 8002b9a:	930d      	str	r3, [sp, #52]	; 0x34
  if (!(flags & FLAGS_PRECISION)) {
 8002b9c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002b9e:	055b      	lsls	r3, r3, #21
 8002ba0:	d56c      	bpl.n	8002c7c <_ftoa+0x1d4>
 8002ba2:	0022      	movs	r2, r4
    buf[len++] = '0';
 8002ba4:	2130      	movs	r1, #48	; 0x30
 8002ba6:	ab12      	add	r3, sp, #72	; 0x48
 8002ba8:	3a20      	subs	r2, #32
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002baa:	9408      	str	r4, [sp, #32]
 8002bac:	9808      	ldr	r0, [sp, #32]
 8002bae:	1a25      	subs	r5, r4, r0
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002bb0:	2809      	cmp	r0, #9
 8002bb2:	d907      	bls.n	8002bc4 <_ftoa+0x11c>
    prec--;
 8002bb4:	9808      	ldr	r0, [sp, #32]
    buf[len++] = '0';
 8002bb6:	7019      	strb	r1, [r3, #0]
    prec--;
 8002bb8:	3801      	subs	r0, #1
 8002bba:	9008      	str	r0, [sp, #32]
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	4290      	cmp	r0, r2
 8002bc0:	d1f4      	bne.n	8002bac <_ftoa+0x104>
 8002bc2:	2520      	movs	r5, #32
  int whole = (int)value;
 8002bc4:	0039      	movs	r1, r7
 8002bc6:	0030      	movs	r0, r6
 8002bc8:	f7ff fad2 	bl	8002170 <__aeabi_d2iz>
  double tmp = (value - whole) * pow10[prec];
 8002bcc:	9b08      	ldr	r3, [sp, #32]
  int whole = (int)value;
 8002bce:	9007      	str	r0, [sp, #28]
  double tmp = (value - whole) * pow10[prec];
 8002bd0:	00da      	lsls	r2, r3, #3
 8002bd2:	4b79      	ldr	r3, [pc, #484]	; (8002db8 <_ftoa+0x310>)
 8002bd4:	189b      	adds	r3, r3, r2
 8002bd6:	685c      	ldr	r4, [r3, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	930e      	str	r3, [sp, #56]	; 0x38
 8002bdc:	940f      	str	r4, [sp, #60]	; 0x3c
 8002bde:	f7ff fafd 	bl	80021dc <__aeabi_i2d>
 8002be2:	0002      	movs	r2, r0
 8002be4:	000b      	movs	r3, r1
 8002be6:	0030      	movs	r0, r6
 8002be8:	0039      	movs	r1, r7
 8002bea:	f7fe ff2f 	bl	8001a4c <__aeabi_dsub>
 8002bee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002bf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002bf2:	f7fe fcbf 	bl	8001574 <__aeabi_dmul>
 8002bf6:	9010      	str	r0, [sp, #64]	; 0x40
 8002bf8:	9111      	str	r1, [sp, #68]	; 0x44
  unsigned long frac = (unsigned long)tmp;
 8002bfa:	f7fd fc61 	bl	80004c0 <__aeabi_d2uiz>
 8002bfe:	0004      	movs	r4, r0
  diff = tmp - frac;
 8002c00:	f7ff fb1c 	bl	800223c <__aeabi_ui2d>
 8002c04:	0002      	movs	r2, r0
 8002c06:	000b      	movs	r3, r1
 8002c08:	9810      	ldr	r0, [sp, #64]	; 0x40
 8002c0a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002c0c:	f7fe ff1e 	bl	8001a4c <__aeabi_dsub>
  if (diff > 0.5) {
 8002c10:	2200      	movs	r2, #0
 8002c12:	4b6a      	ldr	r3, [pc, #424]	; (8002dbc <_ftoa+0x314>)
  diff = tmp - frac;
 8002c14:	9010      	str	r0, [sp, #64]	; 0x40
 8002c16:	9111      	str	r1, [sp, #68]	; 0x44
  if (diff > 0.5) {
 8002c18:	f7fd fc1e 	bl	8000458 <__aeabi_dcmpgt>
 8002c1c:	2800      	cmp	r0, #0
 8002c1e:	d02f      	beq.n	8002c80 <_ftoa+0x1d8>
    ++frac;
 8002c20:	3401      	adds	r4, #1
    if (frac >= pow10[prec]) {
 8002c22:	0020      	movs	r0, r4
 8002c24:	f7ff fb0a 	bl	800223c <__aeabi_ui2d>
 8002c28:	0002      	movs	r2, r0
 8002c2a:	000b      	movs	r3, r1
 8002c2c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002c2e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002c30:	f7fd fc08 	bl	8000444 <__aeabi_dcmple>
 8002c34:	2800      	cmp	r0, #0
 8002c36:	d003      	beq.n	8002c40 <_ftoa+0x198>
      frac = 0;
 8002c38:	2400      	movs	r4, #0
      ++whole;
 8002c3a:	9b07      	ldr	r3, [sp, #28]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	9307      	str	r3, [sp, #28]
  if (prec == 0U) {
 8002c40:	9b08      	ldr	r3, [sp, #32]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d02a      	beq.n	8002c9c <_ftoa+0x1f4>
      buf[len++] = (char)(48U + (frac % 10U));
 8002c46:	270a      	movs	r7, #10
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002c48:	2d20      	cmp	r5, #32
 8002c4a:	d149      	bne.n	8002ce0 <_ftoa+0x238>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002c50:	4013      	ands	r3, r2
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d000      	beq.n	8002c58 <_ftoa+0x1b0>
 8002c56:	e08b      	b.n	8002d70 <_ftoa+0x2c8>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002c58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d100      	bne.n	8002c60 <_ftoa+0x1b8>
 8002c5e:	e087      	b.n	8002d70 <_ftoa+0x2c8>
 8002c60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <_ftoa+0x1c4>
 8002c66:	330c      	adds	r3, #12
 8002c68:	421a      	tst	r2, r3
 8002c6a:	d002      	beq.n	8002c72 <_ftoa+0x1ca>
      width--;
 8002c6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	9323      	str	r3, [sp, #140]	; 0x8c
      buf[len++] = '0';
 8002c72:	2230      	movs	r2, #48	; 0x30
 8002c74:	ab12      	add	r3, sp, #72	; 0x48
 8002c76:	e06f      	b.n	8002d58 <_ftoa+0x2b0>
  bool negative = false;
 8002c78:	900d      	str	r0, [sp, #52]	; 0x34
 8002c7a:	e78f      	b.n	8002b9c <_ftoa+0xf4>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002c7c:	2406      	movs	r4, #6
 8002c7e:	e790      	b.n	8002ba2 <_ftoa+0xfa>
  else if (diff < 0.5) {
 8002c80:	2200      	movs	r2, #0
 8002c82:	9810      	ldr	r0, [sp, #64]	; 0x40
 8002c84:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002c86:	4b4d      	ldr	r3, [pc, #308]	; (8002dbc <_ftoa+0x314>)
 8002c88:	f7fd fbd2 	bl	8000430 <__aeabi_dcmplt>
 8002c8c:	2800      	cmp	r0, #0
 8002c8e:	d1d7      	bne.n	8002c40 <_ftoa+0x198>
  else if ((frac == 0U) || (frac & 1U)) {
 8002c90:	2c00      	cmp	r4, #0
 8002c92:	d001      	beq.n	8002c98 <_ftoa+0x1f0>
 8002c94:	07e3      	lsls	r3, r4, #31
 8002c96:	d5d3      	bpl.n	8002c40 <_ftoa+0x198>
    ++frac;
 8002c98:	3401      	adds	r4, #1
 8002c9a:	e7d1      	b.n	8002c40 <_ftoa+0x198>
    diff = value - (double)whole;
 8002c9c:	9807      	ldr	r0, [sp, #28]
 8002c9e:	f7ff fa9d 	bl	80021dc <__aeabi_i2d>
 8002ca2:	0002      	movs	r2, r0
 8002ca4:	000b      	movs	r3, r1
 8002ca6:	0030      	movs	r0, r6
 8002ca8:	0039      	movs	r1, r7
 8002caa:	f7fe fecf 	bl	8001a4c <__aeabi_dsub>
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8002cae:	2200      	movs	r2, #0
 8002cb0:	4b42      	ldr	r3, [pc, #264]	; (8002dbc <_ftoa+0x314>)
    diff = value - (double)whole;
 8002cb2:	0006      	movs	r6, r0
 8002cb4:	000f      	movs	r7, r1
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8002cb6:	f7fd fbbb 	bl	8000430 <__aeabi_dcmplt>
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	d007      	beq.n	8002cce <_ftoa+0x226>
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	0030      	movs	r0, r6
 8002cc2:	0039      	movs	r1, r7
 8002cc4:	4b3d      	ldr	r3, [pc, #244]	; (8002dbc <_ftoa+0x314>)
 8002cc6:	f7fd fbc7 	bl	8000458 <__aeabi_dcmpgt>
 8002cca:	2800      	cmp	r0, #0
 8002ccc:	d004      	beq.n	8002cd8 <_ftoa+0x230>
      ++whole;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	9a07      	ldr	r2, [sp, #28]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	18d3      	adds	r3, r2, r3
 8002cd6:	9307      	str	r3, [sp, #28]
      buf[len++] = '.';
 8002cd8:	002c      	movs	r4, r5
    buf[len++] = (char)(48 + (whole % 10));
 8002cda:	260a      	movs	r6, #10
 8002cdc:	af12      	add	r7, sp, #72	; 0x48
 8002cde:	e036      	b.n	8002d4e <_ftoa+0x2a6>
      --count;
 8002ce0:	9b08      	ldr	r3, [sp, #32]
      buf[len++] = (char)(48U + (frac % 10U));
 8002ce2:	0039      	movs	r1, r7
      --count;
 8002ce4:	3b01      	subs	r3, #1
      buf[len++] = (char)(48U + (frac % 10U));
 8002ce6:	0020      	movs	r0, r4
      --count;
 8002ce8:	9308      	str	r3, [sp, #32]
      buf[len++] = (char)(48U + (frac % 10U));
 8002cea:	f7fd fa9b 	bl	8000224 <__aeabi_uidivmod>
 8002cee:	2218      	movs	r2, #24
 8002cf0:	ab0c      	add	r3, sp, #48	; 0x30
 8002cf2:	3130      	adds	r1, #48	; 0x30
 8002cf4:	189b      	adds	r3, r3, r2
 8002cf6:	5559      	strb	r1, [r3, r5]
      if (!(frac /= 10U)) {
 8002cf8:	0020      	movs	r0, r4
 8002cfa:	0039      	movs	r1, r7
      buf[len++] = (char)(48U + (frac % 10U));
 8002cfc:	1c6e      	adds	r6, r5, #1
      if (!(frac /= 10U)) {
 8002cfe:	f7fd fa0b 	bl	8000118 <__udivsi3>
 8002d02:	2c09      	cmp	r4, #9
 8002d04:	d80d      	bhi.n	8002d22 <_ftoa+0x27a>
      buf[len++] = (char)(48U + (frac % 10U));
 8002d06:	0035      	movs	r5, r6
      buf[len++] = '0';
 8002d08:	2030      	movs	r0, #48	; 0x30
 8002d0a:	9b08      	ldr	r3, [sp, #32]
 8002d0c:	a912      	add	r1, sp, #72	; 0x48
 8002d0e:	199b      	adds	r3, r3, r6
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002d10:	2d20      	cmp	r5, #32
 8002d12:	d09b      	beq.n	8002c4c <_ftoa+0x1a4>
 8002d14:	1c6a      	adds	r2, r5, #1
 8002d16:	429d      	cmp	r5, r3
 8002d18:	d106      	bne.n	8002d28 <_ftoa+0x280>
      buf[len++] = '.';
 8002d1a:	232e      	movs	r3, #46	; 0x2e
 8002d1c:	554b      	strb	r3, [r1, r5]
 8002d1e:	0015      	movs	r5, r2
 8002d20:	e7da      	b.n	8002cd8 <_ftoa+0x230>
      buf[len++] = (char)(48U + (frac % 10U));
 8002d22:	0035      	movs	r5, r6
      if (!(frac /= 10U)) {
 8002d24:	0004      	movs	r4, r0
 8002d26:	e78f      	b.n	8002c48 <_ftoa+0x1a0>
      buf[len++] = '0';
 8002d28:	5548      	strb	r0, [r1, r5]
 8002d2a:	0015      	movs	r5, r2
 8002d2c:	e7f0      	b.n	8002d10 <_ftoa+0x268>
    buf[len++] = (char)(48 + (whole % 10));
 8002d2e:	9807      	ldr	r0, [sp, #28]
 8002d30:	0031      	movs	r1, r6
 8002d32:	f7fd fb61 	bl	80003f8 <__aeabi_idivmod>
 8002d36:	3130      	adds	r1, #48	; 0x30
    if (!(whole /= 10)) {
 8002d38:	9807      	ldr	r0, [sp, #28]
    buf[len++] = (char)(48 + (whole % 10));
 8002d3a:	55e1      	strb	r1, [r4, r7]
    if (!(whole /= 10)) {
 8002d3c:	0031      	movs	r1, r6
 8002d3e:	f7fd fa75 	bl	800022c <__divsi3>
    buf[len++] = (char)(48 + (whole % 10));
 8002d42:	3501      	adds	r5, #1
    if (!(whole /= 10)) {
 8002d44:	9007      	str	r0, [sp, #28]
 8002d46:	2800      	cmp	r0, #0
 8002d48:	d100      	bne.n	8002d4c <_ftoa+0x2a4>
 8002d4a:	e77f      	b.n	8002c4c <_ftoa+0x1a4>
    buf[len++] = (char)(48 + (whole % 10));
 8002d4c:	002c      	movs	r4, r5
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002d4e:	2d20      	cmp	r5, #32
 8002d50:	d1ed      	bne.n	8002d2e <_ftoa+0x286>
 8002d52:	e77b      	b.n	8002c4c <_ftoa+0x1a4>
      buf[len++] = '0';
 8002d54:	54ea      	strb	r2, [r5, r3]
 8002d56:	3501      	adds	r5, #1
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002d58:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8002d5a:	42a9      	cmp	r1, r5
 8002d5c:	d908      	bls.n	8002d70 <_ftoa+0x2c8>
 8002d5e:	2d20      	cmp	r5, #32
 8002d60:	d1f8      	bne.n	8002d54 <_ftoa+0x2ac>
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002d62:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002d64:	9501      	str	r5, [sp, #4]
 8002d66:	9303      	str	r3, [sp, #12]
 8002d68:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002d6a:	9302      	str	r3, [sp, #8]
 8002d6c:	ab12      	add	r3, sp, #72	; 0x48
 8002d6e:	e6b3      	b.n	8002ad8 <_ftoa+0x30>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002d70:	2d20      	cmp	r5, #32
 8002d72:	d0f6      	beq.n	8002d62 <_ftoa+0x2ba>
    if (negative) {
 8002d74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002d76:	ab12      	add	r3, sp, #72	; 0x48
 8002d78:	2a00      	cmp	r2, #0
 8002d7a:	d003      	beq.n	8002d84 <_ftoa+0x2dc>
      buf[len++] = '-';
 8002d7c:	222d      	movs	r2, #45	; 0x2d
      buf[len++] = ' ';
 8002d7e:	555a      	strb	r2, [r3, r5]
 8002d80:	3501      	adds	r5, #1
 8002d82:	e7ee      	b.n	8002d62 <_ftoa+0x2ba>
    else if (flags & FLAGS_PLUS) {
 8002d84:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002d86:	0752      	lsls	r2, r2, #29
 8002d88:	d501      	bpl.n	8002d8e <_ftoa+0x2e6>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002d8a:	222b      	movs	r2, #43	; 0x2b
 8002d8c:	e7f7      	b.n	8002d7e <_ftoa+0x2d6>
    else if (flags & FLAGS_SPACE) {
 8002d8e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002d90:	0712      	lsls	r2, r2, #28
 8002d92:	d5e6      	bpl.n	8002d62 <_ftoa+0x2ba>
      buf[len++] = ' ';
 8002d94:	2220      	movs	r2, #32
 8002d96:	e7f2      	b.n	8002d7e <_ftoa+0x2d6>
 8002d98:	080055d1 	.word	0x080055d1
 8002d9c:	ffefffff 	.word	0xffefffff
 8002da0:	080055d5 	.word	0x080055d5
 8002da4:	7fefffff 	.word	0x7fefffff
 8002da8:	080055cc 	.word	0x080055cc
 8002dac:	080055c8 	.word	0x080055c8
 8002db0:	41cdcd65 	.word	0x41cdcd65
 8002db4:	c1cdcd65 	.word	0xc1cdcd65
 8002db8:	080055e0 	.word	0x080055e0
 8002dbc:	3fe00000 	.word	0x3fe00000

08002dc0 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dc2:	b095      	sub	sp, #84	; 0x54
 8002dc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8002dc6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8002dc8:	920e      	str	r2, [sp, #56]	; 0x38
 8002dca:	930a      	str	r3, [sp, #40]	; 0x28
 8002dcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002dce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
{
 8002dd0:	930b      	str	r3, [sp, #44]	; 0x2c
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
{
 8002dd4:	900c      	str	r0, [sp, #48]	; 0x30
 8002dd6:	910d      	str	r1, [sp, #52]	; 0x34
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002dd8:	0010      	movs	r0, r2
 8002dda:	0019      	movs	r1, r3
 8002ddc:	f7fd fb22 	bl	8000424 <__aeabi_dcmpeq>
 8002de0:	2800      	cmp	r0, #0
 8002de2:	d011      	beq.n	8002e08 <_etoa+0x48>
 8002de4:	2201      	movs	r2, #1
 8002de6:	4bd4      	ldr	r3, [pc, #848]	; (8003138 <_etoa+0x378>)
 8002de8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002dea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002dec:	4252      	negs	r2, r2
 8002dee:	f7fd fb33 	bl	8000458 <__aeabi_dcmpgt>
 8002df2:	2800      	cmp	r0, #0
 8002df4:	d108      	bne.n	8002e08 <_etoa+0x48>
 8002df6:	2201      	movs	r2, #1
 8002df8:	4bd0      	ldr	r3, [pc, #832]	; (800313c <_etoa+0x37c>)
 8002dfa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002dfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002dfe:	4252      	negs	r2, r2
 8002e00:	f7fd fb16 	bl	8000430 <__aeabi_dcmplt>
 8002e04:	2800      	cmp	r0, #0
 8002e06:	d013      	beq.n	8002e30 <_etoa+0x70>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002e08:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002e0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002e0c:	9304      	str	r3, [sp, #16]
 8002e0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002e10:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002e12:	9303      	str	r3, [sp, #12]
 8002e14:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8002e16:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002e18:	9302      	str	r3, [sp, #8]
 8002e1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e1c:	9200      	str	r2, [sp, #0]
 8002e1e:	9301      	str	r3, [sp, #4]
 8002e20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002e22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002e24:	f7ff fe40 	bl	8002aa8 <_ftoa>
 8002e28:	0006      	movs	r6, r0
    if (flags & FLAGS_LEFT) {
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
    }
  }
  return idx;
}
 8002e2a:	0030      	movs	r0, r6
 8002e2c:	b015      	add	sp, #84	; 0x54
 8002e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (negative) {
 8002e30:	2200      	movs	r2, #0
 8002e32:	2300      	movs	r3, #0
 8002e34:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002e36:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002e38:	f7fd fafa 	bl	8000430 <__aeabi_dcmplt>
 8002e3c:	2800      	cmp	r0, #0
 8002e3e:	d100      	bne.n	8002e42 <_etoa+0x82>
 8002e40:	e162      	b.n	8003108 <_etoa+0x348>
    value = -value;
 8002e42:	2280      	movs	r2, #128	; 0x80
 8002e44:	0612      	lsls	r2, r2, #24
 8002e46:	4694      	mov	ip, r2
 8002e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8002e4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e4e:	4463      	add	r3, ip
 8002e50:	9307      	str	r3, [sp, #28]
  if (!(flags & FLAGS_PRECISION)) {
 8002e52:	2380      	movs	r3, #128	; 0x80
 8002e54:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	401a      	ands	r2, r3
 8002e5a:	9211      	str	r2, [sp, #68]	; 0x44
 8002e5c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002e5e:	421a      	tst	r2, r3
 8002e60:	d101      	bne.n	8002e66 <_etoa+0xa6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002e62:	2306      	movs	r3, #6
 8002e64:	931c      	str	r3, [sp, #112]	; 0x70
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8002e66:	9b07      	ldr	r3, [sp, #28]
  conv.F = value;
 8002e68:	9e09      	ldr	r6, [sp, #36]	; 0x24
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8002e6a:	0058      	lsls	r0, r3, #1
 8002e6c:	4bb4      	ldr	r3, [pc, #720]	; (8003140 <_etoa+0x380>)
 8002e6e:	0d40      	lsrs	r0, r0, #21
 8002e70:	18c0      	adds	r0, r0, r3
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8002e72:	f7ff f9b3 	bl	80021dc <__aeabi_i2d>
 8002e76:	4ab3      	ldr	r2, [pc, #716]	; (8003144 <_etoa+0x384>)
 8002e78:	4bb3      	ldr	r3, [pc, #716]	; (8003148 <_etoa+0x388>)
 8002e7a:	f7fe fb7b 	bl	8001574 <__aeabi_dmul>
 8002e7e:	4ab3      	ldr	r2, [pc, #716]	; (800314c <_etoa+0x38c>)
 8002e80:	4bb3      	ldr	r3, [pc, #716]	; (8003150 <_etoa+0x390>)
 8002e82:	f7fd fc07 	bl	8000694 <__aeabi_dadd>
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8002e86:	9b07      	ldr	r3, [sp, #28]
 8002e88:	4ab2      	ldr	r2, [pc, #712]	; (8003154 <_etoa+0x394>)
 8002e8a:	031b      	lsls	r3, r3, #12
 8002e8c:	0b1b      	lsrs	r3, r3, #12
 8002e8e:	431a      	orrs	r2, r3
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8002e90:	0004      	movs	r4, r0
 8002e92:	000d      	movs	r5, r1
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8002e94:	0030      	movs	r0, r6
 8002e96:	0011      	movs	r1, r2
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8002e98:	4baf      	ldr	r3, [pc, #700]	; (8003158 <_etoa+0x398>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f7fe fdd6 	bl	8001a4c <__aeabi_dsub>
 8002ea0:	4aae      	ldr	r2, [pc, #696]	; (800315c <_etoa+0x39c>)
 8002ea2:	4baf      	ldr	r3, [pc, #700]	; (8003160 <_etoa+0x3a0>)
 8002ea4:	f7fe fb66 	bl	8001574 <__aeabi_dmul>
 8002ea8:	0002      	movs	r2, r0
 8002eaa:	000b      	movs	r3, r1
 8002eac:	0020      	movs	r0, r4
 8002eae:	0029      	movs	r1, r5
 8002eb0:	f7fd fbf0 	bl	8000694 <__aeabi_dadd>
 8002eb4:	f7ff f95c 	bl	8002170 <__aeabi_d2iz>
 8002eb8:	9008      	str	r0, [sp, #32]
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8002eba:	f7ff f98f 	bl	80021dc <__aeabi_i2d>
 8002ebe:	4aa9      	ldr	r2, [pc, #676]	; (8003164 <_etoa+0x3a4>)
 8002ec0:	4ba9      	ldr	r3, [pc, #676]	; (8003168 <_etoa+0x3a8>)
 8002ec2:	0006      	movs	r6, r0
 8002ec4:	000f      	movs	r7, r1
 8002ec6:	f7fe fb55 	bl	8001574 <__aeabi_dmul>
 8002eca:	2200      	movs	r2, #0
 8002ecc:	4ba7      	ldr	r3, [pc, #668]	; (800316c <_etoa+0x3ac>)
 8002ece:	f7fd fbe1 	bl	8000694 <__aeabi_dadd>
 8002ed2:	f7ff f94d 	bl	8002170 <__aeabi_d2iz>
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002ed6:	4aa6      	ldr	r2, [pc, #664]	; (8003170 <_etoa+0x3b0>)
 8002ed8:	4ba6      	ldr	r3, [pc, #664]	; (8003174 <_etoa+0x3b4>)
 8002eda:	0039      	movs	r1, r7
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8002edc:	9010      	str	r0, [sp, #64]	; 0x40
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002ede:	0030      	movs	r0, r6
 8002ee0:	f7fe fb48 	bl	8001574 <__aeabi_dmul>
 8002ee4:	0006      	movs	r6, r0
 8002ee6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8002ee8:	000f      	movs	r7, r1
 8002eea:	f7ff f977 	bl	80021dc <__aeabi_i2d>
 8002eee:	4aa2      	ldr	r2, [pc, #648]	; (8003178 <_etoa+0x3b8>)
 8002ef0:	4ba2      	ldr	r3, [pc, #648]	; (800317c <_etoa+0x3bc>)
 8002ef2:	f7fe fb3f 	bl	8001574 <__aeabi_dmul>
 8002ef6:	0002      	movs	r2, r0
 8002ef8:	000b      	movs	r3, r1
 8002efa:	0030      	movs	r0, r6
 8002efc:	0039      	movs	r1, r7
 8002efe:	f7fe fda5 	bl	8001a4c <__aeabi_dsub>
  const double z2 = z * z;
 8002f02:	0002      	movs	r2, r0
 8002f04:	000b      	movs	r3, r1
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002f06:	0004      	movs	r4, r0
 8002f08:	000d      	movs	r5, r1
  const double z2 = z * z;
 8002f0a:	f7fe fb33 	bl	8001574 <__aeabi_dmul>
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002f0e:	0022      	movs	r2, r4
  const double z2 = z * z;
 8002f10:	0006      	movs	r6, r0
 8002f12:	000f      	movs	r7, r1
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002f14:	002b      	movs	r3, r5
 8002f16:	0020      	movs	r0, r4
 8002f18:	0029      	movs	r1, r5
 8002f1a:	f7fd fbbb 	bl	8000694 <__aeabi_dadd>
 8002f1e:	2200      	movs	r2, #0
 8002f20:	9012      	str	r0, [sp, #72]	; 0x48
 8002f22:	9113      	str	r1, [sp, #76]	; 0x4c
 8002f24:	4b96      	ldr	r3, [pc, #600]	; (8003180 <_etoa+0x3c0>)
 8002f26:	0030      	movs	r0, r6
 8002f28:	0039      	movs	r1, r7
 8002f2a:	f7fd ff1d 	bl	8000d68 <__aeabi_ddiv>
 8002f2e:	2200      	movs	r2, #0
 8002f30:	4b94      	ldr	r3, [pc, #592]	; (8003184 <_etoa+0x3c4>)
 8002f32:	f7fd fbaf 	bl	8000694 <__aeabi_dadd>
 8002f36:	0002      	movs	r2, r0
 8002f38:	000b      	movs	r3, r1
 8002f3a:	0030      	movs	r0, r6
 8002f3c:	0039      	movs	r1, r7
 8002f3e:	f7fd ff13 	bl	8000d68 <__aeabi_ddiv>
 8002f42:	2200      	movs	r2, #0
 8002f44:	4b90      	ldr	r3, [pc, #576]	; (8003188 <_etoa+0x3c8>)
 8002f46:	f7fd fba5 	bl	8000694 <__aeabi_dadd>
 8002f4a:	0002      	movs	r2, r0
 8002f4c:	000b      	movs	r3, r1
 8002f4e:	0030      	movs	r0, r6
 8002f50:	0039      	movs	r1, r7
 8002f52:	f7fd ff09 	bl	8000d68 <__aeabi_ddiv>
 8002f56:	000f      	movs	r7, r1
 8002f58:	2180      	movs	r1, #128	; 0x80
 8002f5a:	0006      	movs	r6, r0
 8002f5c:	0022      	movs	r2, r4
 8002f5e:	002b      	movs	r3, r5
 8002f60:	2000      	movs	r0, #0
 8002f62:	05c9      	lsls	r1, r1, #23
 8002f64:	f7fe fd72 	bl	8001a4c <__aeabi_dsub>
 8002f68:	0002      	movs	r2, r0
 8002f6a:	000b      	movs	r3, r1
 8002f6c:	0030      	movs	r0, r6
 8002f6e:	0039      	movs	r1, r7
 8002f70:	f7fd fb90 	bl	8000694 <__aeabi_dadd>
 8002f74:	0002      	movs	r2, r0
 8002f76:	000b      	movs	r3, r1
 8002f78:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002f7a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8002f7c:	f7fd fef4 	bl	8000d68 <__aeabi_ddiv>
 8002f80:	2200      	movs	r2, #0
 8002f82:	4b74      	ldr	r3, [pc, #464]	; (8003154 <_etoa+0x394>)
 8002f84:	f7fd fb86 	bl	8000694 <__aeabi_dadd>
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8002f88:	4a80      	ldr	r2, [pc, #512]	; (800318c <_etoa+0x3cc>)
 8002f8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002f8c:	4694      	mov	ip, r2
 8002f8e:	4463      	add	r3, ip
 8002f90:	2200      	movs	r2, #0
 8002f92:	051b      	lsls	r3, r3, #20
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002f94:	f7fe faee 	bl	8001574 <__aeabi_dmul>
 8002f98:	0006      	movs	r6, r0
 8002f9a:	000f      	movs	r7, r1
  if (value < conv.F) {
 8002f9c:	0002      	movs	r2, r0
 8002f9e:	000b      	movs	r3, r1
 8002fa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002fa2:	9907      	ldr	r1, [sp, #28]
 8002fa4:	f7fd fa44 	bl	8000430 <__aeabi_dcmplt>
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	d00a      	beq.n	8002fc2 <_etoa+0x202>
    expval--;
 8002fac:	9b08      	ldr	r3, [sp, #32]
    conv.F /= 10;
 8002fae:	0030      	movs	r0, r6
    expval--;
 8002fb0:	3b01      	subs	r3, #1
    conv.F /= 10;
 8002fb2:	0039      	movs	r1, r7
    expval--;
 8002fb4:	9308      	str	r3, [sp, #32]
    conv.F /= 10;
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	4b72      	ldr	r3, [pc, #456]	; (8003184 <_etoa+0x3c4>)
 8002fba:	f7fd fed5 	bl	8000d68 <__aeabi_ddiv>
 8002fbe:	0006      	movs	r6, r0
 8002fc0:	000f      	movs	r7, r1
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002fc2:	24c6      	movs	r4, #198	; 0xc6
 8002fc4:	9b08      	ldr	r3, [sp, #32]
 8002fc6:	3363      	adds	r3, #99	; 0x63
 8002fc8:	429c      	cmp	r4, r3
 8002fca:	41a4      	sbcs	r4, r4
  if (flags & FLAGS_ADAPT_EXP) {
 8002fcc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002fce:	4264      	negs	r4, r4
 8002fd0:	3404      	adds	r4, #4
  if (flags & FLAGS_ADAPT_EXP) {
 8002fd2:	051b      	lsls	r3, r3, #20
 8002fd4:	d522      	bpl.n	800301c <_etoa+0x25c>
    if ((value >= 1e-4) && (value < 1e6)) {
 8002fd6:	4a6e      	ldr	r2, [pc, #440]	; (8003190 <_etoa+0x3d0>)
 8002fd8:	4b6e      	ldr	r3, [pc, #440]	; (8003194 <_etoa+0x3d4>)
 8002fda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002fdc:	9907      	ldr	r1, [sp, #28]
 8002fde:	f7fd fa45 	bl	800046c <__aeabi_dcmpge>
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	d100      	bne.n	8002fe8 <_etoa+0x228>
 8002fe6:	e095      	b.n	8003114 <_etoa+0x354>
 8002fe8:	2200      	movs	r2, #0
 8002fea:	4b6b      	ldr	r3, [pc, #428]	; (8003198 <_etoa+0x3d8>)
 8002fec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002fee:	9907      	ldr	r1, [sp, #28]
 8002ff0:	f7fd fa1e 	bl	8000430 <__aeabi_dcmplt>
 8002ff4:	2800      	cmp	r0, #0
 8002ff6:	d100      	bne.n	8002ffa <_etoa+0x23a>
 8002ff8:	e08c      	b.n	8003114 <_etoa+0x354>
      if ((int)prec > expval) {
 8002ffa:	9b08      	ldr	r3, [sp, #32]
 8002ffc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8002ffe:	4293      	cmp	r3, r2
 8003000:	db00      	blt.n	8003004 <_etoa+0x244>
 8003002:	e085      	b.n	8003110 <_etoa+0x350>
        prec = (unsigned)((int)prec - expval - 1);
 8003004:	0013      	movs	r3, r2
 8003006:	9a08      	ldr	r2, [sp, #32]
 8003008:	1a9d      	subs	r5, r3, r2
 800300a:	1e6b      	subs	r3, r5, #1
        prec = 0;
 800300c:	931c      	str	r3, [sp, #112]	; 0x70
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800300e:	2380      	movs	r3, #128	; 0x80
      minwidth = 0U;
 8003010:	2400      	movs	r4, #0
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8003012:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	431a      	orrs	r2, r3
 8003018:	921e      	str	r2, [sp, #120]	; 0x78
      expval   = 0;
 800301a:	9408      	str	r4, [sp, #32]
  if (width > minwidth) {
 800301c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    fwidth = 0U;
 800301e:	2500      	movs	r5, #0
  if (width > minwidth) {
 8003020:	42a3      	cmp	r3, r4
 8003022:	d900      	bls.n	8003026 <_etoa+0x266>
    fwidth -= minwidth;
 8003024:	1b1d      	subs	r5, r3, r4
  if ((flags & FLAGS_LEFT) && minwidth) {
 8003026:	2302      	movs	r3, #2
 8003028:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800302a:	401a      	ands	r2, r3
 800302c:	9210      	str	r2, [sp, #64]	; 0x40
 800302e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003030:	421a      	tst	r2, r3
 8003032:	d003      	beq.n	800303c <_etoa+0x27c>
    fwidth = 0U;
 8003034:	4263      	negs	r3, r4
 8003036:	4163      	adcs	r3, r4
 8003038:	425b      	negs	r3, r3
 800303a:	401d      	ands	r5, r3
  if (expval) {
 800303c:	9b08      	ldr	r3, [sp, #32]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d007      	beq.n	8003052 <_etoa+0x292>
    value /= conv.F;
 8003042:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003044:	9907      	ldr	r1, [sp, #28]
 8003046:	0032      	movs	r2, r6
 8003048:	003b      	movs	r3, r7
 800304a:	f7fd fe8d 	bl	8000d68 <__aeabi_ddiv>
 800304e:	9009      	str	r0, [sp, #36]	; 0x24
 8003050:	9107      	str	r1, [sp, #28]
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8003052:	2200      	movs	r2, #0
 8003054:	2300      	movs	r3, #0
 8003056:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003058:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800305a:	f7fd f9e9 	bl	8000430 <__aeabi_dcmplt>
 800305e:	2800      	cmp	r0, #0
 8003060:	d005      	beq.n	800306e <_etoa+0x2ae>
 8003062:	2080      	movs	r0, #128	; 0x80
 8003064:	0600      	lsls	r0, r0, #24
 8003066:	4684      	mov	ip, r0
 8003068:	9907      	ldr	r1, [sp, #28]
 800306a:	4461      	add	r1, ip
 800306c:	9107      	str	r1, [sp, #28]
 800306e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003070:	4b4a      	ldr	r3, [pc, #296]	; (800319c <_etoa+0x3dc>)
 8003072:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003074:	4013      	ands	r3, r2
 8003076:	9304      	str	r3, [sp, #16]
 8003078:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800307a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800307c:	9302      	str	r3, [sp, #8]
 800307e:	9b07      	ldr	r3, [sp, #28]
 8003080:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003082:	9200      	str	r2, [sp, #0]
 8003084:	9301      	str	r3, [sp, #4]
 8003086:	9503      	str	r5, [sp, #12]
 8003088:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800308a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800308c:	f7ff fd0c 	bl	8002aa8 <_ftoa>
 8003090:	0006      	movs	r6, r0
  if (minwidth) {
 8003092:	2c00      	cmp	r4, #0
 8003094:	d100      	bne.n	8003098 <_etoa+0x2d8>
 8003096:	e6c8      	b.n	8002e2a <_etoa+0x6a>
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8003098:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800309a:	2045      	movs	r0, #69	; 0x45
 800309c:	069b      	lsls	r3, r3, #26
 800309e:	d400      	bmi.n	80030a2 <_etoa+0x2e2>
 80030a0:	3020      	adds	r0, #32
 80030a2:	0032      	movs	r2, r6
 80030a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80030a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80030a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80030aa:	47a8      	blx	r5
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80030ac:	2305      	movs	r3, #5
 80030ae:	9305      	str	r3, [sp, #20]
 80030b0:	2300      	movs	r3, #0
 80030b2:	9303      	str	r3, [sp, #12]
 80030b4:	330a      	adds	r3, #10
 80030b6:	9302      	str	r3, [sp, #8]
 80030b8:	9b08      	ldr	r3, [sp, #32]
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80030ba:	1c77      	adds	r7, r6, #1
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80030bc:	0fdb      	lsrs	r3, r3, #31
 80030be:	9301      	str	r3, [sp, #4]
 80030c0:	9b08      	ldr	r3, [sp, #32]
 80030c2:	3c01      	subs	r4, #1
 80030c4:	17da      	asrs	r2, r3, #31
 80030c6:	189d      	adds	r5, r3, r2
 80030c8:	4055      	eors	r5, r2
 80030ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80030cc:	003a      	movs	r2, r7
 80030ce:	990d      	ldr	r1, [sp, #52]	; 0x34
 80030d0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80030d2:	9404      	str	r4, [sp, #16]
 80030d4:	9500      	str	r5, [sp, #0]
 80030d6:	f7ff fc3e 	bl	8002956 <_ntoa_long>
    if (flags & FLAGS_LEFT) {
 80030da:	9b10      	ldr	r3, [sp, #64]	; 0x40
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80030dc:	0006      	movs	r6, r0
    if (flags & FLAGS_LEFT) {
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d100      	bne.n	80030e4 <_etoa+0x324>
 80030e2:	e6a2      	b.n	8002e2a <_etoa+0x6a>
 80030e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030e6:	1ac5      	subs	r5, r0, r3
 80030e8:	002c      	movs	r4, r5
 80030ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030ec:	191a      	adds	r2, r3, r4
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 80030ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80030f0:	42a3      	cmp	r3, r4
 80030f2:	d819      	bhi.n	8003128 <_etoa+0x368>
 80030f4:	2200      	movs	r2, #0
 80030f6:	42ab      	cmp	r3, r5
 80030f8:	d304      	bcc.n	8003104 <_etoa+0x344>
 80030fa:	991d      	ldr	r1, [sp, #116]	; 0x74
 80030fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030fe:	468c      	mov	ip, r1
 8003100:	4463      	add	r3, ip
 8003102:	1b9a      	subs	r2, r3, r6
 8003104:	18b6      	adds	r6, r6, r2
 8003106:	e690      	b.n	8002e2a <_etoa+0x6a>
 8003108:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800310a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800310c:	9209      	str	r2, [sp, #36]	; 0x24
 800310e:	e69f      	b.n	8002e50 <_etoa+0x90>
        prec = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	e77b      	b.n	800300c <_etoa+0x24c>
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8003114:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8003116:	2b00      	cmp	r3, #0
 8003118:	d080      	beq.n	800301c <_etoa+0x25c>
        --prec;
 800311a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800311c:	1e5a      	subs	r2, r3, #1
 800311e:	4193      	sbcs	r3, r2
 8003120:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	931c      	str	r3, [sp, #112]	; 0x70
 8003126:	e779      	b.n	800301c <_etoa+0x25c>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8003128:	2020      	movs	r0, #32
 800312a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800312c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800312e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8003130:	47b8      	blx	r7
 8003132:	3401      	adds	r4, #1
 8003134:	e7d9      	b.n	80030ea <_etoa+0x32a>
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	7fefffff 	.word	0x7fefffff
 800313c:	ffefffff 	.word	0xffefffff
 8003140:	fffffc01 	.word	0xfffffc01
 8003144:	509f79fb 	.word	0x509f79fb
 8003148:	3fd34413 	.word	0x3fd34413
 800314c:	8b60c8b3 	.word	0x8b60c8b3
 8003150:	3fc68a28 	.word	0x3fc68a28
 8003154:	3ff00000 	.word	0x3ff00000
 8003158:	3ff80000 	.word	0x3ff80000
 800315c:	636f4361 	.word	0x636f4361
 8003160:	3fd287a7 	.word	0x3fd287a7
 8003164:	0979a371 	.word	0x0979a371
 8003168:	400a934f 	.word	0x400a934f
 800316c:	3fe00000 	.word	0x3fe00000
 8003170:	bbb55516 	.word	0xbbb55516
 8003174:	40026bb1 	.word	0x40026bb1
 8003178:	fefa39ef 	.word	0xfefa39ef
 800317c:	3fe62e42 	.word	0x3fe62e42
 8003180:	402c0000 	.word	0x402c0000
 8003184:	40240000 	.word	0x40240000
 8003188:	40180000 	.word	0x40180000
 800318c:	000003ff 	.word	0x000003ff
 8003190:	eb1c432d 	.word	0xeb1c432d
 8003194:	3f1a36e2 	.word	0x3f1a36e2
 8003198:	412e8480 	.word	0x412e8480
 800319c:	fffff7ff 	.word	0xfffff7ff

080031a0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80031a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031a2:	b09b      	sub	sp, #108	; 0x6c
 80031a4:	0015      	movs	r5, r2
 80031a6:	9f20      	ldr	r7, [sp, #128]	; 0x80
 80031a8:	900d      	str	r0, [sp, #52]	; 0x34
 80031aa:	910e      	str	r1, [sp, #56]	; 0x38
 80031ac:	930f      	str	r3, [sp, #60]	; 0x3c
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
 80031ae:	2900      	cmp	r1, #0
 80031b0:	d101      	bne.n	80031b6 <_vsnprintf+0x16>
    // use null output function
    out = _out_null;
 80031b2:	4b8c      	ldr	r3, [pc, #560]	; (80033e4 <_vsnprintf+0x244>)
 80031b4:	930d      	str	r3, [sp, #52]	; 0x34
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
 80031b6:	2600      	movs	r6, #0
 80031b8:	e00b      	b.n	80031d2 <_vsnprintf+0x32>
    if (*format != '%') {
 80031ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80031bc:	3301      	adds	r3, #1
 80031be:	930f      	str	r3, [sp, #60]	; 0x3c
 80031c0:	2825      	cmp	r0, #37	; 0x25
 80031c2:	d016      	beq.n	80031f2 <_vsnprintf+0x52>
      out(*format, buffer, idx++, maxlen);
 80031c4:	0032      	movs	r2, r6
 80031c6:	1c74      	adds	r4, r6, #1
 80031c8:	002b      	movs	r3, r5
 80031ca:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80031cc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80031ce:	47b0      	blx	r6
 80031d0:	0026      	movs	r6, r4
  while (*format)
 80031d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80031d4:	7818      	ldrb	r0, [r3, #0]
 80031d6:	2800      	cmp	r0, #0
 80031d8:	d1ef      	bne.n	80031ba <_vsnprintf+0x1a>
        break;
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 80031da:	0032      	movs	r2, r6
 80031dc:	42ae      	cmp	r6, r5
 80031de:	d300      	bcc.n	80031e2 <_vsnprintf+0x42>
 80031e0:	1e6a      	subs	r2, r5, #1
 80031e2:	002b      	movs	r3, r5
 80031e4:	2000      	movs	r0, #0
 80031e6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80031e8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80031ea:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
}
 80031ec:	0030      	movs	r0, r6
 80031ee:	b01b      	add	sp, #108	; 0x6c
 80031f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    flags = 0U;
 80031f2:	2200      	movs	r2, #0
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80031f4:	2001      	movs	r0, #1
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80031f6:	2408      	movs	r4, #8
 80031f8:	e005      	b.n	8003206 <_vsnprintf+0x66>
      switch (*format) {
 80031fa:	2b2d      	cmp	r3, #45	; 0x2d
 80031fc:	d016      	beq.n	800322c <_vsnprintf+0x8c>
 80031fe:	2b30      	cmp	r3, #48	; 0x30
 8003200:	d10c      	bne.n	800321c <_vsnprintf+0x7c>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8003202:	4302      	orrs	r2, r0
{
 8003204:	910f      	str	r1, [sp, #60]	; 0x3c
      switch (*format) {
 8003206:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003208:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	3101      	adds	r1, #1
 800320e:	2b2b      	cmp	r3, #43	; 0x2b
 8003210:	d00f      	beq.n	8003232 <_vsnprintf+0x92>
 8003212:	d8f2      	bhi.n	80031fa <_vsnprintf+0x5a>
 8003214:	2b20      	cmp	r3, #32
 8003216:	d00e      	beq.n	8003236 <_vsnprintf+0x96>
 8003218:	2b23      	cmp	r3, #35	; 0x23
 800321a:	d00e      	beq.n	800323a <_vsnprintf+0x9a>
    if (_is_digit(*format)) {
 800321c:	0018      	movs	r0, r3
 800321e:	3830      	subs	r0, #48	; 0x30
 8003220:	2809      	cmp	r0, #9
 8003222:	d82d      	bhi.n	8003280 <_vsnprintf+0xe0>
  unsigned int i = 0U;
 8003224:	2300      	movs	r3, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003226:	240a      	movs	r4, #10
  unsigned int i = 0U;
 8003228:	930b      	str	r3, [sp, #44]	; 0x2c
 800322a:	e00e      	b.n	800324a <_vsnprintf+0xaa>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800322c:	2302      	movs	r3, #2
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800322e:	431a      	orrs	r2, r3
    } while (n);
 8003230:	e7e8      	b.n	8003204 <_vsnprintf+0x64>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8003232:	2304      	movs	r3, #4
 8003234:	e7fb      	b.n	800322e <_vsnprintf+0x8e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8003236:	4322      	orrs	r2, r4
    } while (n);
 8003238:	e7e4      	b.n	8003204 <_vsnprintf+0x64>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800323a:	2310      	movs	r3, #16
 800323c:	e7f7      	b.n	800322e <_vsnprintf+0x8e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800323e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003240:	900f      	str	r0, [sp, #60]	; 0x3c
 8003242:	4363      	muls	r3, r4
 8003244:	3b30      	subs	r3, #48	; 0x30
 8003246:	18cb      	adds	r3, r1, r3
 8003248:	930b      	str	r3, [sp, #44]	; 0x2c
  while (_is_digit(**str)) {
 800324a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800324c:	7819      	ldrb	r1, [r3, #0]
  return (ch >= '0') && (ch <= '9');
 800324e:	1c58      	adds	r0, r3, #1
  while (_is_digit(**str)) {
 8003250:	000b      	movs	r3, r1
 8003252:	3b30      	subs	r3, #48	; 0x30
 8003254:	2b09      	cmp	r3, #9
 8003256:	d9f2      	bls.n	800323e <_vsnprintf+0x9e>
    if (*format == '.') {
 8003258:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b2e      	cmp	r3, #46	; 0x2e
 800325e:	d157      	bne.n	8003310 <_vsnprintf+0x170>
 8003260:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003262:	1c59      	adds	r1, r3, #1
      flags |= FLAGS_PRECISION;
 8003264:	2380      	movs	r3, #128	; 0x80
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	431a      	orrs	r2, r3
      if (_is_digit(*format)) {
 800326a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800326c:	785b      	ldrb	r3, [r3, #1]
 800326e:	0018      	movs	r0, r3
 8003270:	3830      	subs	r0, #48	; 0x30
 8003272:	2809      	cmp	r0, #9
 8003274:	d83e      	bhi.n	80032f4 <_vsnprintf+0x154>
  unsigned int i = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	930c      	str	r3, [sp, #48]	; 0x30
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800327a:	330a      	adds	r3, #10
 800327c:	469c      	mov	ip, r3
 800327e:	e015      	b.n	80032ac <_vsnprintf+0x10c>
    width = 0U;
 8003280:	2000      	movs	r0, #0
 8003282:	900b      	str	r0, [sp, #44]	; 0x2c
    else if (*format == '*') {
 8003284:	2b2a      	cmp	r3, #42	; 0x2a
 8003286:	d1e7      	bne.n	8003258 <_vsnprintf+0xb8>
      const int w = va_arg(va, int);
 8003288:	cf08      	ldmia	r7!, {r3}
 800328a:	930b      	str	r3, [sp, #44]	; 0x2c
      if (w < 0) {
 800328c:	4283      	cmp	r3, r0
 800328e:	da04      	bge.n	800329a <_vsnprintf+0xfa>
        flags |= FLAGS_LEFT;    // reverse padding
 8003290:	2302      	movs	r3, #2
 8003292:	431a      	orrs	r2, r3
        width = (unsigned int)-w;
 8003294:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003296:	425b      	negs	r3, r3
 8003298:	930b      	str	r3, [sp, #44]	; 0x2c
      const int w = va_arg(va, int);
 800329a:	910f      	str	r1, [sp, #60]	; 0x3c
 800329c:	e7dc      	b.n	8003258 <_vsnprintf+0xb8>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800329e:	4660      	mov	r0, ip
 80032a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80032a2:	4341      	muls	r1, r0
 80032a4:	3930      	subs	r1, #48	; 0x30
 80032a6:	185b      	adds	r3, r3, r1
 80032a8:	0021      	movs	r1, r4
 80032aa:	930c      	str	r3, [sp, #48]	; 0x30
  while (_is_digit(**str)) {
 80032ac:	780b      	ldrb	r3, [r1, #0]
  return (ch >= '0') && (ch <= '9');
 80032ae:	1c4c      	adds	r4, r1, #1
  while (_is_digit(**str)) {
 80032b0:	0018      	movs	r0, r3
 80032b2:	3830      	subs	r0, #48	; 0x30
 80032b4:	2809      	cmp	r0, #9
 80032b6:	d9f2      	bls.n	800329e <_vsnprintf+0xfe>
    switch (*format) {
 80032b8:	7808      	ldrb	r0, [r1, #0]
 80032ba:	1c4b      	adds	r3, r1, #1
 80032bc:	286c      	cmp	r0, #108	; 0x6c
 80032be:	d032      	beq.n	8003326 <_vsnprintf+0x186>
 80032c0:	d82a      	bhi.n	8003318 <_vsnprintf+0x178>
 80032c2:	2868      	cmp	r0, #104	; 0x68
 80032c4:	d037      	beq.n	8003336 <_vsnprintf+0x196>
 80032c6:	286a      	cmp	r0, #106	; 0x6a
 80032c8:	d03d      	beq.n	8003346 <_vsnprintf+0x1a6>
 80032ca:	000b      	movs	r3, r1
    switch (*format) {
 80032cc:	781c      	ldrb	r4, [r3, #0]
 80032ce:	3301      	adds	r3, #1
 80032d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80032d2:	2c78      	cmp	r4, #120	; 0x78
 80032d4:	d804      	bhi.n	80032e0 <_vsnprintf+0x140>
 80032d6:	2c57      	cmp	r4, #87	; 0x57
 80032d8:	d838      	bhi.n	800334c <_vsnprintf+0x1ac>
 80032da:	2c45      	cmp	r4, #69	; 0x45
 80032dc:	d062      	beq.n	80033a4 <_vsnprintf+0x204>
 80032de:	d85c      	bhi.n	800339a <_vsnprintf+0x1fa>
        out(*format, buffer, idx++, maxlen);
 80032e0:	1c73      	adds	r3, r6, #1
 80032e2:	0032      	movs	r2, r6
 80032e4:	0020      	movs	r0, r4
 80032e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80032e8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80032ea:	002b      	movs	r3, r5
 80032ec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80032ee:	47a0      	blx	r4
 80032f0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
        break;
 80032f2:	e76e      	b.n	80031d2 <_vsnprintf+0x32>
    precision = 0U;
 80032f4:	2000      	movs	r0, #0
 80032f6:	900c      	str	r0, [sp, #48]	; 0x30
      else if (*format == '*') {
 80032f8:	2b2a      	cmp	r3, #42	; 0x2a
 80032fa:	d1dd      	bne.n	80032b8 <_vsnprintf+0x118>
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80032fc:	cf08      	ldmia	r7!, {r3}
 80032fe:	930c      	str	r3, [sp, #48]	; 0x30
 8003300:	43db      	mvns	r3, r3
 8003302:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003304:	17db      	asrs	r3, r3, #31
 8003306:	4019      	ands	r1, r3
 8003308:	910c      	str	r1, [sp, #48]	; 0x30
        format++;
 800330a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800330c:	3102      	adds	r1, #2
 800330e:	e7d3      	b.n	80032b8 <_vsnprintf+0x118>
    precision = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003314:	930c      	str	r3, [sp, #48]	; 0x30
 8003316:	e7cf      	b.n	80032b8 <_vsnprintf+0x118>
    switch (*format) {
 8003318:	2874      	cmp	r0, #116	; 0x74
 800331a:	d001      	beq.n	8003320 <_vsnprintf+0x180>
 800331c:	287a      	cmp	r0, #122	; 0x7a
 800331e:	d1d4      	bne.n	80032ca <_vsnprintf+0x12a>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003320:	2180      	movs	r1, #128	; 0x80
 8003322:	0049      	lsls	r1, r1, #1
 8003324:	e00b      	b.n	800333e <_vsnprintf+0x19e>
        if (*format == 'l') {
 8003326:	7848      	ldrb	r0, [r1, #1]
 8003328:	286c      	cmp	r0, #108	; 0x6c
 800332a:	d1f9      	bne.n	8003320 <_vsnprintf+0x180>
          flags |= FLAGS_LONG_LONG;
 800332c:	23c0      	movs	r3, #192	; 0xc0
 800332e:	009b      	lsls	r3, r3, #2
          flags |= FLAGS_CHAR;
 8003330:	431a      	orrs	r2, r3
          format++;
 8003332:	1c8b      	adds	r3, r1, #2
 8003334:	e7ca      	b.n	80032cc <_vsnprintf+0x12c>
        if (*format == 'h') {
 8003336:	7848      	ldrb	r0, [r1, #1]
 8003338:	2868      	cmp	r0, #104	; 0x68
 800333a:	d002      	beq.n	8003342 <_vsnprintf+0x1a2>
        flags |= FLAGS_SHORT;
 800333c:	2180      	movs	r1, #128	; 0x80
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800333e:	430a      	orrs	r2, r1
        break;
 8003340:	e7c4      	b.n	80032cc <_vsnprintf+0x12c>
          flags |= FLAGS_CHAR;
 8003342:	23c0      	movs	r3, #192	; 0xc0
 8003344:	e7f4      	b.n	8003330 <_vsnprintf+0x190>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003346:	2180      	movs	r1, #128	; 0x80
 8003348:	0089      	lsls	r1, r1, #2
 800334a:	e7f8      	b.n	800333e <_vsnprintf+0x19e>
 800334c:	0020      	movs	r0, r4
 800334e:	3858      	subs	r0, #88	; 0x58
 8003350:	2820      	cmp	r0, #32
 8003352:	d8c5      	bhi.n	80032e0 <_vsnprintf+0x140>
 8003354:	f7fc fed6 	bl	8000104 <__gnu_thumb1_case_shi>
 8003358:	ffc40048 	.word	0xffc40048
 800335c:	ffc4ffc4 	.word	0xffc4ffc4
 8003360:	ffc4ffc4 	.word	0xffc4ffc4
 8003364:	ffc4ffc4 	.word	0xffc4ffc4
 8003368:	ffc4ffc4 	.word	0xffc4ffc4
 800336c:	00f80048 	.word	0x00f80048
 8003370:	00260048 	.word	0x00260048
 8003374:	002600e5 	.word	0x002600e5
 8003378:	0048ffc4 	.word	0x0048ffc4
 800337c:	ffc4ffc4 	.word	0xffc4ffc4
 8003380:	ffc4ffc4 	.word	0xffc4ffc4
 8003384:	0048ffc4 	.word	0x0048ffc4
 8003388:	ffc401b3 	.word	0xffc401b3
 800338c:	0140ffc4 	.word	0x0140ffc4
 8003390:	0048ffc4 	.word	0x0048ffc4
 8003394:	ffc4ffc4 	.word	0xffc4ffc4
 8003398:	0048      	.short	0x0048
    switch (*format) {
 800339a:	2c46      	cmp	r4, #70	; 0x46
 800339c:	d100      	bne.n	80033a0 <_vsnprintf+0x200>
 800339e:	e0be      	b.n	800351e <_vsnprintf+0x37e>
 80033a0:	2c47      	cmp	r4, #71	; 0x47
 80033a2:	d19d      	bne.n	80032e0 <_vsnprintf+0x140>
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80033a4:	2320      	movs	r3, #32
 80033a6:	0021      	movs	r1, r4
 80033a8:	4399      	bics	r1, r3
 80033aa:	2947      	cmp	r1, #71	; 0x47
 80033ac:	d104      	bne.n	80033b8 <_vsnprintf+0x218>
 80033ae:	2380      	movs	r3, #128	; 0x80
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	431a      	orrs	r2, r3
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80033b4:	2302      	movs	r3, #2
 80033b6:	439c      	bics	r4, r3
 80033b8:	2c45      	cmp	r4, #69	; 0x45
 80033ba:	d101      	bne.n	80033c0 <_vsnprintf+0x220>
 80033bc:	2320      	movs	r3, #32
 80033be:	431a      	orrs	r2, r3
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80033c0:	2307      	movs	r3, #7
 80033c2:	3707      	adds	r7, #7
 80033c4:	439f      	bics	r7, r3
 80033c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80033c8:	9204      	str	r2, [sp, #16]
 80033ca:	9303      	str	r3, [sp, #12]
 80033cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80033ce:	990e      	ldr	r1, [sp, #56]	; 0x38
 80033d0:	9302      	str	r3, [sp, #8]
 80033d2:	cf0c      	ldmia	r7!, {r2, r3}
 80033d4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80033d6:	9200      	str	r2, [sp, #0]
 80033d8:	9301      	str	r3, [sp, #4]
 80033da:	002b      	movs	r3, r5
 80033dc:	0032      	movs	r2, r6
 80033de:	f7ff fcef 	bl	8002dc0 <_etoa>
 80033e2:	e0af      	b.n	8003544 <_vsnprintf+0x3a4>
 80033e4:	080027c9 	.word	0x080027c9
        if (*format == 'x' || *format == 'X') {
 80033e8:	2c78      	cmp	r4, #120	; 0x78
 80033ea:	d047      	beq.n	800347c <_vsnprintf+0x2dc>
 80033ec:	2c58      	cmp	r4, #88	; 0x58
 80033ee:	d100      	bne.n	80033f2 <_vsnprintf+0x252>
 80033f0:	e179      	b.n	80036e6 <_vsnprintf+0x546>
        else if (*format == 'o') {
 80033f2:	2c6f      	cmp	r4, #111	; 0x6f
 80033f4:	d100      	bne.n	80033f8 <_vsnprintf+0x258>
 80033f6:	e17a      	b.n	80036ee <_vsnprintf+0x54e>
        else if (*format == 'b') {
 80033f8:	2c62      	cmp	r4, #98	; 0x62
 80033fa:	d100      	bne.n	80033fe <_vsnprintf+0x25e>
 80033fc:	e179      	b.n	80036f2 <_vsnprintf+0x552>
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80033fe:	2310      	movs	r3, #16
 8003400:	439a      	bics	r2, r3
          base = 10U;
 8003402:	3b06      	subs	r3, #6
        if ((*format != 'i') && (*format != 'd')) {
 8003404:	2c69      	cmp	r4, #105	; 0x69
 8003406:	d003      	beq.n	8003410 <_vsnprintf+0x270>
 8003408:	2c64      	cmp	r4, #100	; 0x64
 800340a:	d001      	beq.n	8003410 <_vsnprintf+0x270>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800340c:	210c      	movs	r1, #12
 800340e:	438a      	bics	r2, r1
        if (flags & FLAGS_PRECISION) {
 8003410:	0551      	lsls	r1, r2, #21
 8003412:	d501      	bpl.n	8003418 <_vsnprintf+0x278>
          flags &= ~FLAGS_ZEROPAD;
 8003414:	2101      	movs	r1, #1
 8003416:	438a      	bics	r2, r1
        if ((*format == 'i') || (*format == 'd')) {
 8003418:	2180      	movs	r1, #128	; 0x80
 800341a:	0089      	lsls	r1, r1, #2
 800341c:	4011      	ands	r1, r2
 800341e:	2c69      	cmp	r4, #105	; 0x69
 8003420:	d001      	beq.n	8003426 <_vsnprintf+0x286>
 8003422:	2c64      	cmp	r4, #100	; 0x64
 8003424:	d146      	bne.n	80034b4 <_vsnprintf+0x314>
          if (flags & FLAGS_LONG_LONG) {
 8003426:	2900      	cmp	r1, #0
 8003428:	d02a      	beq.n	8003480 <_vsnprintf+0x2e0>
            const long long value = va_arg(va, long long);
 800342a:	2107      	movs	r1, #7
 800342c:	3707      	adds	r7, #7
 800342e:	438f      	bics	r7, r1
 8003430:	003c      	movs	r4, r7
 8003432:	cf03      	ldmia	r7!, {r0, r1}
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003434:	9304      	str	r3, [sp, #16]
 8003436:	2300      	movs	r3, #0
 8003438:	9305      	str	r3, [sp, #20]
 800343a:	0fcb      	lsrs	r3, r1, #31
 800343c:	9302      	str	r3, [sp, #8]
 800343e:	17cb      	asrs	r3, r1, #31
 8003440:	9311      	str	r3, [sp, #68]	; 0x44
 8003442:	9310      	str	r3, [sp, #64]	; 0x40
 8003444:	4043      	eors	r3, r0
 8003446:	9314      	str	r3, [sp, #80]	; 0x50
 8003448:	9208      	str	r2, [sp, #32]
 800344a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800344c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800344e:	404b      	eors	r3, r1
 8003450:	9207      	str	r2, [sp, #28]
 8003452:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003454:	9315      	str	r3, [sp, #84]	; 0x54
 8003456:	9206      	str	r2, [sp, #24]
 8003458:	9810      	ldr	r0, [sp, #64]	; 0x40
 800345a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800345c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800345e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003460:	1a12      	subs	r2, r2, r0
 8003462:	418b      	sbcs	r3, r1
            const long long value = va_arg(va, long long);
 8003464:	3408      	adds	r4, #8
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8003466:	9200      	str	r2, [sp, #0]
 8003468:	9301      	str	r3, [sp, #4]
 800346a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800346c:	002b      	movs	r3, r5
 800346e:	0032      	movs	r2, r6
 8003470:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003472:	f7ff faba 	bl	80029ea <_ntoa_long_long>
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8003476:	0006      	movs	r6, r0
        break;
 8003478:	0027      	movs	r7, r4
 800347a:	e6aa      	b.n	80031d2 <_vsnprintf+0x32>
          base = 16U;
 800347c:	2310      	movs	r3, #16
 800347e:	e7c5      	b.n	800340c <_vsnprintf+0x26c>
          else if (flags & FLAGS_LONG) {
 8003480:	1d3c      	adds	r4, r7, #4
 8003482:	05d1      	lsls	r1, r2, #23
 8003484:	d50d      	bpl.n	80034a2 <_vsnprintf+0x302>
            const long value = va_arg(va, long);
 8003486:	6839      	ldr	r1, [r7, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003488:	9205      	str	r2, [sp, #20]
 800348a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800348c:	9302      	str	r3, [sp, #8]
 800348e:	0fcb      	lsrs	r3, r1, #31
 8003490:	9204      	str	r2, [sp, #16]
 8003492:	9301      	str	r3, [sp, #4]
 8003494:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003496:	17cb      	asrs	r3, r1, #31
 8003498:	18c9      	adds	r1, r1, r3
 800349a:	9203      	str	r2, [sp, #12]
 800349c:	4059      	eors	r1, r3
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800349e:	9100      	str	r1, [sp, #0]
 80034a0:	e025      	b.n	80034ee <_vsnprintf+0x34e>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80034a2:	6839      	ldr	r1, [r7, #0]
 80034a4:	0650      	lsls	r0, r2, #25
 80034a6:	d501      	bpl.n	80034ac <_vsnprintf+0x30c>
 80034a8:	b2c9      	uxtb	r1, r1
 80034aa:	e7ed      	b.n	8003488 <_vsnprintf+0x2e8>
 80034ac:	0610      	lsls	r0, r2, #24
 80034ae:	d5eb      	bpl.n	8003488 <_vsnprintf+0x2e8>
 80034b0:	b209      	sxth	r1, r1
 80034b2:	e7e9      	b.n	8003488 <_vsnprintf+0x2e8>
          if (flags & FLAGS_LONG_LONG) {
 80034b4:	2900      	cmp	r1, #0
 80034b6:	d00e      	beq.n	80034d6 <_vsnprintf+0x336>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80034b8:	3707      	adds	r7, #7
 80034ba:	9304      	str	r3, [sp, #16]
 80034bc:	2107      	movs	r1, #7
 80034be:	2300      	movs	r3, #0
 80034c0:	003c      	movs	r4, r7
 80034c2:	9208      	str	r2, [sp, #32]
 80034c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80034c6:	438c      	bics	r4, r1
 80034c8:	9207      	str	r2, [sp, #28]
 80034ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80034cc:	9305      	str	r3, [sp, #20]
 80034ce:	9206      	str	r2, [sp, #24]
 80034d0:	9302      	str	r3, [sp, #8]
 80034d2:	cc0c      	ldmia	r4!, {r2, r3}
 80034d4:	e7c7      	b.n	8003466 <_vsnprintf+0x2c6>
          else if (flags & FLAGS_LONG) {
 80034d6:	1d3c      	adds	r4, r7, #4
 80034d8:	05d0      	lsls	r0, r2, #23
 80034da:	d50f      	bpl.n	80034fc <_vsnprintf+0x35c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80034dc:	9205      	str	r2, [sp, #20]
 80034de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80034e0:	9302      	str	r3, [sp, #8]
 80034e2:	9204      	str	r2, [sp, #16]
 80034e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80034e6:	9101      	str	r1, [sp, #4]
 80034e8:	9203      	str	r2, [sp, #12]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	9300      	str	r3, [sp, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80034ee:	002b      	movs	r3, r5
 80034f0:	0032      	movs	r2, r6
 80034f2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80034f4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80034f6:	f7ff fa2e 	bl	8002956 <_ntoa_long>
 80034fa:	e7bc      	b.n	8003476 <_vsnprintf+0x2d6>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80034fc:	6839      	ldr	r1, [r7, #0]
 80034fe:	0650      	lsls	r0, r2, #25
 8003500:	d509      	bpl.n	8003516 <_vsnprintf+0x376>
 8003502:	b2c9      	uxtb	r1, r1
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8003504:	9302      	str	r3, [sp, #8]
 8003506:	2300      	movs	r3, #0
 8003508:	9205      	str	r2, [sp, #20]
 800350a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800350c:	9301      	str	r3, [sp, #4]
 800350e:	9204      	str	r2, [sp, #16]
 8003510:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003512:	9203      	str	r2, [sp, #12]
 8003514:	e7c3      	b.n	800349e <_vsnprintf+0x2fe>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8003516:	0610      	lsls	r0, r2, #24
 8003518:	d5f4      	bpl.n	8003504 <_vsnprintf+0x364>
 800351a:	b289      	uxth	r1, r1
 800351c:	e7f2      	b.n	8003504 <_vsnprintf+0x364>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800351e:	2320      	movs	r3, #32
 8003520:	431a      	orrs	r2, r3
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003522:	2307      	movs	r3, #7
 8003524:	3707      	adds	r7, #7
 8003526:	439f      	bics	r7, r3
 8003528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800352a:	9204      	str	r2, [sp, #16]
 800352c:	9303      	str	r3, [sp, #12]
 800352e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003530:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003532:	9302      	str	r3, [sp, #8]
 8003534:	cf0c      	ldmia	r7!, {r2, r3}
 8003536:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003538:	9200      	str	r2, [sp, #0]
 800353a:	9301      	str	r3, [sp, #4]
 800353c:	002b      	movs	r3, r5
 800353e:	0032      	movs	r2, r6
 8003540:	f7ff fab2 	bl	8002aa8 <_ftoa>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8003544:	0006      	movs	r6, r0
        break;
 8003546:	e644      	b.n	80031d2 <_vsnprintf+0x32>
        if (!(flags & FLAGS_LEFT)) {
 8003548:	2302      	movs	r3, #2
 800354a:	4013      	ands	r3, r2
 800354c:	9312      	str	r3, [sp, #72]	; 0x48
 800354e:	2302      	movs	r3, #2
        unsigned int l = 1U;
 8003550:	2401      	movs	r4, #1
        if (!(flags & FLAGS_LEFT)) {
 8003552:	421a      	tst	r2, r3
 8003554:	d118      	bne.n	8003588 <_vsnprintf+0x3e8>
 8003556:	0032      	movs	r2, r6
 8003558:	e005      	b.n	8003566 <_vsnprintf+0x3c6>
            out(' ', buffer, idx++, maxlen);
 800355a:	002b      	movs	r3, r5
 800355c:	2020      	movs	r0, #32
 800355e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003560:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8003562:	47a0      	blx	r4
 8003564:	9a0c      	ldr	r2, [sp, #48]	; 0x30
          while (l++ < width) {
 8003566:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003568:	1c53      	adds	r3, r2, #1
 800356a:	930c      	str	r3, [sp, #48]	; 0x30
 800356c:	1b9b      	subs	r3, r3, r6
 800356e:	428b      	cmp	r3, r1
 8003570:	d3f3      	bcc.n	800355a <_vsnprintf+0x3ba>
 8003572:	2300      	movs	r3, #0
 8003574:	4299      	cmp	r1, r3
 8003576:	d001      	beq.n	800357c <_vsnprintf+0x3dc>
 8003578:	000b      	movs	r3, r1
 800357a:	3b01      	subs	r3, #1
 800357c:	18f6      	adds	r6, r6, r3
 800357e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003580:	2402      	movs	r4, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d000      	beq.n	8003588 <_vsnprintf+0x3e8>
 8003586:	1c5c      	adds	r4, r3, #1
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003588:	cf01      	ldmia	r7!, {r0}
 800358a:	1c73      	adds	r3, r6, #1
 800358c:	0032      	movs	r2, r6
 800358e:	930c      	str	r3, [sp, #48]	; 0x30
 8003590:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003592:	002b      	movs	r3, r5
 8003594:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8003596:	b2c0      	uxtb	r0, r0
 8003598:	47b0      	blx	r6
        if (flags & FLAGS_LEFT) {
 800359a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800359c:	2b00      	cmp	r3, #0
 800359e:	d019      	beq.n	80035d4 <_vsnprintf+0x434>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80035a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80035a2:	9412      	str	r4, [sp, #72]	; 0x48
 80035a4:	e00a      	b.n	80035bc <_vsnprintf+0x41c>
            out(' ', buffer, idx++, maxlen);
 80035a6:	1c53      	adds	r3, r2, #1
 80035a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80035aa:	2020      	movs	r0, #32
 80035ac:	002b      	movs	r3, r5
 80035ae:	990e      	ldr	r1, [sp, #56]	; 0x38
 80035b0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80035b2:	47b0      	blx	r6
 80035b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80035b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80035b8:	3301      	adds	r3, #1
 80035ba:	9312      	str	r3, [sp, #72]	; 0x48
          while (l++ < width) {
 80035bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80035be:	9912      	ldr	r1, [sp, #72]	; 0x48
 80035c0:	4299      	cmp	r1, r3
 80035c2:	d3f0      	bcc.n	80035a6 <_vsnprintf+0x406>
 80035c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80035c6:	2300      	movs	r3, #0
 80035c8:	42a2      	cmp	r2, r4
 80035ca:	d300      	bcc.n	80035ce <_vsnprintf+0x42e>
 80035cc:	1b13      	subs	r3, r2, r4
 80035ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80035d0:	18d3      	adds	r3, r2, r3
 80035d2:	930c      	str	r3, [sp, #48]	; 0x30
        break;
 80035d4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80035d6:	e5fc      	b.n	80031d2 <_vsnprintf+0x32>
        const char* p = va_arg(va, char*);
 80035d8:	0039      	movs	r1, r7
 80035da:	c908      	ldmia	r1!, {r3}
 80035dc:	9313      	str	r3, [sp, #76]	; 0x4c
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80035de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        const char* p = va_arg(va, char*);
 80035e0:	9116      	str	r1, [sp, #88]	; 0x58
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <_vsnprintf+0x44a>
 80035e6:	2301      	movs	r3, #1
 80035e8:	425b      	negs	r3, r3
 80035ea:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80035ec:	000c      	movs	r4, r1
 80035ee:	18cb      	adds	r3, r1, r3
  for (s = str; *s && maxsize--; ++s);
 80035f0:	7821      	ldrb	r1, [r4, #0]
 80035f2:	2900      	cmp	r1, #0
 80035f4:	d001      	beq.n	80035fa <_vsnprintf+0x45a>
 80035f6:	429c      	cmp	r4, r3
 80035f8:	d114      	bne.n	8003624 <_vsnprintf+0x484>
  return (unsigned int)(s - str);
 80035fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        if (flags & FLAGS_PRECISION) {
 80035fc:	0011      	movs	r1, r2
  return (unsigned int)(s - str);
 80035fe:	1ae4      	subs	r4, r4, r3
        if (flags & FLAGS_PRECISION) {
 8003600:	2380      	movs	r3, #128	; 0x80
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	4019      	ands	r1, r3
 8003606:	9117      	str	r1, [sp, #92]	; 0x5c
 8003608:	421a      	tst	r2, r3
 800360a:	d003      	beq.n	8003614 <_vsnprintf+0x474>
          l = (l < precision ? l : precision);
 800360c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800360e:	429c      	cmp	r4, r3
 8003610:	d900      	bls.n	8003614 <_vsnprintf+0x474>
 8003612:	001c      	movs	r4, r3
        if (!(flags & FLAGS_LEFT)) {
 8003614:	2302      	movs	r3, #2
 8003616:	4013      	ands	r3, r2
 8003618:	9318      	str	r3, [sp, #96]	; 0x60
 800361a:	2302      	movs	r3, #2
 800361c:	421a      	tst	r2, r3
 800361e:	d117      	bne.n	8003650 <_vsnprintf+0x4b0>
 8003620:	0032      	movs	r2, r6
 8003622:	e009      	b.n	8003638 <_vsnprintf+0x498>
  for (s = str; *s && maxsize--; ++s);
 8003624:	3401      	adds	r4, #1
 8003626:	e7e3      	b.n	80035f0 <_vsnprintf+0x450>
            out(' ', buffer, idx++, maxlen);
 8003628:	1c53      	adds	r3, r2, #1
 800362a:	9312      	str	r3, [sp, #72]	; 0x48
 800362c:	2020      	movs	r0, #32
 800362e:	002b      	movs	r3, r5
 8003630:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003632:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003634:	47b8      	blx	r7
 8003636:	9a12      	ldr	r2, [sp, #72]	; 0x48
          while (l++ < width) {
 8003638:	1ba3      	subs	r3, r4, r6
 800363a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800363c:	189b      	adds	r3, r3, r2
 800363e:	4299      	cmp	r1, r3
 8003640:	d8f2      	bhi.n	8003628 <_vsnprintf+0x488>
 8003642:	2300      	movs	r3, #0
 8003644:	42a1      	cmp	r1, r4
 8003646:	d300      	bcc.n	800364a <_vsnprintf+0x4aa>
 8003648:	1b0b      	subs	r3, r1, r4
 800364a:	3401      	adds	r4, #1
 800364c:	18f6      	adds	r6, r6, r3
 800364e:	191c      	adds	r4, r3, r4
 8003650:	9612      	str	r6, [sp, #72]	; 0x48
 8003652:	e00a      	b.n	800366a <_vsnprintf+0x4ca>
 8003654:	930c      	str	r3, [sp, #48]	; 0x30
          out(*(p++), buffer, idx++, maxlen);
 8003656:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003658:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800365a:	3301      	adds	r3, #1
 800365c:	9319      	str	r3, [sp, #100]	; 0x64
 800365e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003660:	002b      	movs	r3, r5
 8003662:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003664:	47b8      	blx	r7
 8003666:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003668:	9312      	str	r3, [sp, #72]	; 0x48
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800366a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800366c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800366e:	1b9b      	subs	r3, r3, r6
 8003670:	5c98      	ldrb	r0, [r3, r2]
 8003672:	2800      	cmp	r0, #0
 8003674:	d007      	beq.n	8003686 <_vsnprintf+0x4e6>
 8003676:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0ec      	beq.n	8003656 <_vsnprintf+0x4b6>
 800367c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800367e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003680:	3b01      	subs	r3, #1
 8003682:	2a00      	cmp	r2, #0
 8003684:	d1e6      	bne.n	8003654 <_vsnprintf+0x4b4>
        if (flags & FLAGS_LEFT) {
 8003686:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8003688:	2b00      	cmp	r3, #0
 800368a:	d015      	beq.n	80036b8 <_vsnprintf+0x518>
 800368c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800368e:	e006      	b.n	800369e <_vsnprintf+0x4fe>
            out(' ', buffer, idx++, maxlen);
 8003690:	1c56      	adds	r6, r2, #1
 8003692:	002b      	movs	r3, r5
 8003694:	2020      	movs	r0, #32
 8003696:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003698:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800369a:	47b8      	blx	r7
 800369c:	0032      	movs	r2, r6
          while (l++ < width) {
 800369e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80036a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80036a2:	1ae3      	subs	r3, r4, r3
 80036a4:	189b      	adds	r3, r3, r2
 80036a6:	4299      	cmp	r1, r3
 80036a8:	d8f2      	bhi.n	8003690 <_vsnprintf+0x4f0>
 80036aa:	2300      	movs	r3, #0
 80036ac:	42a1      	cmp	r1, r4
 80036ae:	d300      	bcc.n	80036b2 <_vsnprintf+0x512>
 80036b0:	1b0b      	subs	r3, r1, r4
 80036b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80036b4:	18d3      	adds	r3, r2, r3
 80036b6:	9312      	str	r3, [sp, #72]	; 0x48
        const char* p = va_arg(va, char*);
 80036b8:	9f16      	ldr	r7, [sp, #88]	; 0x58
        break;
 80036ba:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80036bc:	e589      	b.n	80031d2 <_vsnprintf+0x32>
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 80036be:	2321      	movs	r3, #33	; 0x21
 80036c0:	431a      	orrs	r2, r3
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80036c2:	3b19      	subs	r3, #25
 80036c4:	9304      	str	r3, [sp, #16]
 80036c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80036c8:	9205      	str	r2, [sp, #20]
 80036ca:	9303      	str	r3, [sp, #12]
 80036cc:	2310      	movs	r3, #16
 80036ce:	9302      	str	r3, [sp, #8]
 80036d0:	2300      	movs	r3, #0
 80036d2:	9301      	str	r3, [sp, #4]
 80036d4:	cf08      	ldmia	r7!, {r3}
 80036d6:	0032      	movs	r2, r6
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	990e      	ldr	r1, [sp, #56]	; 0x38
 80036dc:	002b      	movs	r3, r5
 80036de:	980d      	ldr	r0, [sp, #52]	; 0x34
 80036e0:	f7ff f939 	bl	8002956 <_ntoa_long>
 80036e4:	e72e      	b.n	8003544 <_vsnprintf+0x3a4>
          flags |= FLAGS_UPPERCASE;
 80036e6:	2320      	movs	r3, #32
 80036e8:	431a      	orrs	r2, r3
          base = 16U;
 80036ea:	3b10      	subs	r3, #16
 80036ec:	e68e      	b.n	800340c <_vsnprintf+0x26c>
          base =  8U;
 80036ee:	2308      	movs	r3, #8
 80036f0:	e68c      	b.n	800340c <_vsnprintf+0x26c>
          base =  2U;
 80036f2:	2302      	movs	r3, #2
        if ((*format != 'i') && (*format != 'd')) {
 80036f4:	e68a      	b.n	800340c <_vsnprintf+0x26c>
 80036f6:	46c0      	nop			; (mov r8, r8)

080036f8 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 80036f8:	b40e      	push	{r1, r2, r3}
  va_list va;
  va_start(va, format);
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 80036fa:	2201      	movs	r2, #1
{
 80036fc:	b510      	push	{r4, lr}
 80036fe:	b085      	sub	sp, #20
 8003700:	ac07      	add	r4, sp, #28
 8003702:	cc08      	ldmia	r4!, {r3}
 8003704:	0001      	movs	r1, r0
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8003706:	9400      	str	r4, [sp, #0]
 8003708:	4252      	negs	r2, r2
 800370a:	4804      	ldr	r0, [pc, #16]	; (800371c <sprintf_+0x24>)
  va_start(va, format);
 800370c:	9403      	str	r4, [sp, #12]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 800370e:	f7ff fd47 	bl	80031a0 <_vsnprintf>
  va_end(va);
  return ret;
}
 8003712:	b005      	add	sp, #20
 8003714:	bc10      	pop	{r4}
 8003716:	bc08      	pop	{r3}
 8003718:	b003      	add	sp, #12
 800371a:	4718      	bx	r3
 800371c:	080027c1 	.word	0x080027c1

08003720 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003720:	2001      	movs	r0, #1
 8003722:	4b0a      	ldr	r3, [pc, #40]	; (800374c <HAL_MspInit+0x2c>)
{
 8003724:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003726:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003728:	4301      	orrs	r1, r0
 800372a:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 800372c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800372e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8003730:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003732:	4002      	ands	r2, r0
 8003734:	9200      	str	r2, [sp, #0]
 8003736:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003738:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800373a:	430a      	orrs	r2, r1
 800373c:	63da      	str	r2, [r3, #60]	; 0x3c
 800373e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003740:	400b      	ands	r3, r1
 8003742:	9301      	str	r3, [sp, #4]
 8003744:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003746:	b002      	add	sp, #8
 8003748:	4770      	bx	lr
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	40021000 	.word	0x40021000

08003750 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003752:	0005      	movs	r5, r0
 8003754:	b093      	sub	sp, #76	; 0x4c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003756:	2214      	movs	r2, #20
 8003758:	2100      	movs	r1, #0
 800375a:	a803      	add	r0, sp, #12
 800375c:	f001 fed2 	bl	8005504 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003760:	2228      	movs	r2, #40	; 0x28
 8003762:	2100      	movs	r1, #0
 8003764:	a808      	add	r0, sp, #32
 8003766:	f001 fecd 	bl	8005504 <memset>
  if(hadc->Instance==ADC1)
 800376a:	4b23      	ldr	r3, [pc, #140]	; (80037f8 <HAL_ADC_MspInit+0xa8>)
 800376c:	682a      	ldr	r2, [r5, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d140      	bne.n	80037f4 <HAL_ADC_MspInit+0xa4>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003772:	2380      	movs	r3, #128	; 0x80
 8003774:	01db      	lsls	r3, r3, #7
 8003776:	9308      	str	r3, [sp, #32]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8003778:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800377a:	a808      	add	r0, sp, #32
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800377c:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800377e:	f001 fc6b 	bl	8005058 <HAL_RCCEx_PeriphCLKConfig>
 8003782:	2800      	cmp	r0, #0
 8003784:	d001      	beq.n	800378a <HAL_ADC_MspInit+0x3a>
    {
      Error_Handler();
 8003786:	f7ff f819 	bl	80027bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800378a:	2080      	movs	r0, #128	; 0x80
 800378c:	4b1b      	ldr	r3, [pc, #108]	; (80037fc <HAL_ADC_MspInit+0xac>)
 800378e:	0340      	lsls	r0, r0, #13
 8003790:	6c19      	ldr	r1, [r3, #64]	; 0x40
    /**ADC1 GPIO Configuration
    PB7     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003792:	2600      	movs	r6, #0
    __HAL_RCC_ADC_CLK_ENABLE();
 8003794:	4301      	orrs	r1, r0
 8003796:	6419      	str	r1, [r3, #64]	; 0x40
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003798:	2102      	movs	r1, #2
    __HAL_RCC_ADC_CLK_ENABLE();
 800379a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800379c:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_ADC_CLK_ENABLE();
 800379e:	4002      	ands	r2, r0
 80037a0:	9201      	str	r2, [sp, #4]
 80037a2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037a6:	4816      	ldr	r0, [pc, #88]	; (8003800 <HAL_ADC_MspInit+0xb0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037a8:	430a      	orrs	r2, r1
 80037aa:	635a      	str	r2, [r3, #52]	; 0x34
 80037ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80037ae:	9703      	str	r7, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037b0:	400b      	ands	r3, r1
 80037b2:	9302      	str	r3, [sp, #8]
 80037b4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037b6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037b8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037ba:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037bc:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037be:	f000 fde5 	bl	800438c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80037c2:	4c10      	ldr	r4, [pc, #64]	; (8003804 <HAL_ADC_MspInit+0xb4>)
 80037c4:	4b10      	ldr	r3, [pc, #64]	; (8003808 <HAL_ADC_MspInit+0xb8>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80037c6:	0020      	movs	r0, r4
    hdma_adc1.Instance = DMA1_Channel1;
 80037c8:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80037ca:	2305      	movs	r3, #5
 80037cc:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80037ce:	33fb      	adds	r3, #251	; 0xfb
 80037d0:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80037d2:	2380      	movs	r3, #128	; 0x80
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80037d8:	2320      	movs	r3, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037da:	60a6      	str	r6, [r4, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80037dc:	60e6      	str	r6, [r4, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80037de:	6127      	str	r7, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80037e0:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80037e2:	6226      	str	r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80037e4:	f000 fcd6 	bl	8004194 <HAL_DMA_Init>
 80037e8:	42b0      	cmp	r0, r6
 80037ea:	d001      	beq.n	80037f0 <HAL_ADC_MspInit+0xa0>
    {
      Error_Handler();
 80037ec:	f7fe ffe6 	bl	80027bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80037f0:	652c      	str	r4, [r5, #80]	; 0x50
 80037f2:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80037f4:	b013      	add	sp, #76	; 0x4c
 80037f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037f8:	40012400 	.word	0x40012400
 80037fc:	40021000 	.word	0x40021000
 8003800:	50000400 	.word	0x50000400
 8003804:	20000510 	.word	0x20000510
 8003808:	40020008 	.word	0x40020008

0800380c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800380c:	b510      	push	{r4, lr}
 800380e:	0004      	movs	r4, r0
 8003810:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003812:	2214      	movs	r2, #20
 8003814:	2100      	movs	r1, #0
 8003816:	a803      	add	r0, sp, #12
 8003818:	f001 fe74 	bl	8005504 <memset>
  if(hi2c->Instance==I2C2)
 800381c:	4b13      	ldr	r3, [pc, #76]	; (800386c <HAL_I2C_MspInit+0x60>)
 800381e:	6822      	ldr	r2, [r4, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d120      	bne.n	8003866 <HAL_I2C_MspInit+0x5a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003824:	2101      	movs	r1, #1
 8003826:	4c12      	ldr	r4, [pc, #72]	; (8003870 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003828:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800382a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800382c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800382e:	430a      	orrs	r2, r1
 8003830:	6362      	str	r2, [r4, #52]	; 0x34
 8003832:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003834:	400b      	ands	r3, r1
 8003836:	9301      	str	r3, [sp, #4]
 8003838:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800383a:	23c0      	movs	r3, #192	; 0xc0
 800383c:	015b      	lsls	r3, r3, #5
 800383e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003840:	2312      	movs	r3, #18
 8003842:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003844:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003846:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003848:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800384a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800384c:	3306      	adds	r3, #6
 800384e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003850:	f000 fd9c 	bl	800438c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003854:	2180      	movs	r1, #128	; 0x80
 8003856:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003858:	03c9      	lsls	r1, r1, #15
 800385a:	430a      	orrs	r2, r1
 800385c:	63e2      	str	r2, [r4, #60]	; 0x3c
 800385e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003860:	400b      	ands	r3, r1
 8003862:	9302      	str	r3, [sp, #8]
 8003864:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003866:	b008      	add	sp, #32
 8003868:	bd10      	pop	{r4, pc}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	40005800 	.word	0x40005800
 8003870:	40021000 	.word	0x40021000

08003874 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003874:	e7fe      	b.n	8003874 <NMI_Handler>

08003876 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003876:	e7fe      	b.n	8003876 <HardFault_Handler>

08003878 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003878:	4770      	bx	lr

0800387a <PendSV_Handler>:
 800387a:	4770      	bx	lr

0800387c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800387c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800387e:	f000 f871 	bl	8003964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003882:	bd10      	pop	{r4, pc}

08003884 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003884:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003886:	4802      	ldr	r0, [pc, #8]	; (8003890 <DMA1_Channel1_IRQHandler+0xc>)
 8003888:	f000 fd2c 	bl	80042e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800388c:	bd10      	pop	{r4, pc}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	20000510 	.word	0x20000510

08003894 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003894:	4770      	bx	lr
	...

08003898 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003898:	480d      	ldr	r0, [pc, #52]	; (80038d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800389a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800389c:	f7ff fffa 	bl	8003894 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038a0:	480c      	ldr	r0, [pc, #48]	; (80038d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80038a2:	490d      	ldr	r1, [pc, #52]	; (80038d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80038a4:	4a0d      	ldr	r2, [pc, #52]	; (80038dc <LoopForever+0xe>)
  movs r3, #0
 80038a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038a8:	e002      	b.n	80038b0 <LoopCopyDataInit>

080038aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038ae:	3304      	adds	r3, #4

080038b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038b4:	d3f9      	bcc.n	80038aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038b6:	4a0a      	ldr	r2, [pc, #40]	; (80038e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80038b8:	4c0a      	ldr	r4, [pc, #40]	; (80038e4 <LoopForever+0x16>)
  movs r3, #0
 80038ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038bc:	e001      	b.n	80038c2 <LoopFillZerobss>

080038be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038c0:	3204      	adds	r2, #4

080038c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038c4:	d3fb      	bcc.n	80038be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80038c6:	f001 fdf9 	bl	80054bc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80038ca:	f7fe fe2b 	bl	8002524 <main>

080038ce <LoopForever>:

LoopForever:
  b LoopForever
 80038ce:	e7fe      	b.n	80038ce <LoopForever>
  ldr   r0, =_estack
 80038d0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80038d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038d8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80038dc:	08007e94 	.word	0x08007e94
  ldr r2, =_sbss
 80038e0:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80038e4:	200005f0 	.word	0x200005f0

080038e8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038e8:	e7fe      	b.n	80038e8 <ADC1_IRQHandler>
	...

080038ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038ec:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80038ee:	4b10      	ldr	r3, [pc, #64]	; (8003930 <HAL_InitTick+0x44>)
{
 80038f0:	0005      	movs	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 80038f2:	7819      	ldrb	r1, [r3, #0]
 80038f4:	2900      	cmp	r1, #0
 80038f6:	d101      	bne.n	80038fc <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80038f8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80038fa:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80038fc:	20fa      	movs	r0, #250	; 0xfa
 80038fe:	0080      	lsls	r0, r0, #2
 8003900:	f7fc fc0a 	bl	8000118 <__udivsi3>
 8003904:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <HAL_InitTick+0x48>)
 8003906:	0001      	movs	r1, r0
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	f7fc fc05 	bl	8000118 <__udivsi3>
 800390e:	f000 fbed 	bl	80040ec <HAL_SYSTICK_Config>
 8003912:	1e04      	subs	r4, r0, #0
 8003914:	d1f0      	bne.n	80038f8 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003916:	2d03      	cmp	r5, #3
 8003918:	d8ee      	bhi.n	80038f8 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800391a:	0002      	movs	r2, r0
 800391c:	2001      	movs	r0, #1
 800391e:	0029      	movs	r1, r5
 8003920:	4240      	negs	r0, r0
 8003922:	f000 fbad 	bl	8004080 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003926:	4b04      	ldr	r3, [pc, #16]	; (8003938 <HAL_InitTick+0x4c>)
 8003928:	0020      	movs	r0, r4
 800392a:	601d      	str	r5, [r3, #0]
  return status;
 800392c:	e7e5      	b.n	80038fa <HAL_InitTick+0xe>
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	20000004 	.word	0x20000004
 8003934:	20000000 	.word	0x20000000
 8003938:	20000008 	.word	0x20000008

0800393c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800393c:	2380      	movs	r3, #128	; 0x80
 800393e:	4a08      	ldr	r2, [pc, #32]	; (8003960 <HAL_Init+0x24>)
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	6811      	ldr	r1, [r2, #0]
{
 8003944:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003946:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003948:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800394a:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800394c:	f7ff ffce 	bl	80038ec <HAL_InitTick>
 8003950:	1e04      	subs	r4, r0, #0
 8003952:	d103      	bne.n	800395c <HAL_Init+0x20>
  HAL_MspInit();
 8003954:	f7ff fee4 	bl	8003720 <HAL_MspInit>
}
 8003958:	0020      	movs	r0, r4
 800395a:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800395c:	2401      	movs	r4, #1
 800395e:	e7fb      	b.n	8003958 <HAL_Init+0x1c>
 8003960:	40022000 	.word	0x40022000

08003964 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003964:	4a03      	ldr	r2, [pc, #12]	; (8003974 <HAL_IncTick+0x10>)
 8003966:	4b04      	ldr	r3, [pc, #16]	; (8003978 <HAL_IncTick+0x14>)
 8003968:	6811      	ldr	r1, [r2, #0]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	185b      	adds	r3, r3, r1
 800396e:	6013      	str	r3, [r2, #0]
}
 8003970:	4770      	bx	lr
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	200005ec 	.word	0x200005ec
 8003978:	20000004 	.word	0x20000004

0800397c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800397c:	4b01      	ldr	r3, [pc, #4]	; (8003984 <HAL_GetTick+0x8>)
 800397e:	6818      	ldr	r0, [r3, #0]
}
 8003980:	4770      	bx	lr
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	200005ec 	.word	0x200005ec

08003988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003988:	b570      	push	{r4, r5, r6, lr}
 800398a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800398c:	f7ff fff6 	bl	800397c <HAL_GetTick>
 8003990:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003992:	1c63      	adds	r3, r4, #1
 8003994:	d002      	beq.n	800399c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003996:	4b04      	ldr	r3, [pc, #16]	; (80039a8 <HAL_Delay+0x20>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800399c:	f7ff ffee 	bl	800397c <HAL_GetTick>
 80039a0:	1b40      	subs	r0, r0, r5
 80039a2:	42a0      	cmp	r0, r4
 80039a4:	d3fa      	bcc.n	800399c <HAL_Delay+0x14>
  {
  }
}
 80039a6:	bd70      	pop	{r4, r5, r6, pc}
 80039a8:	20000004 	.word	0x20000004

080039ac <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039ac:	6880      	ldr	r0, [r0, #8]
 80039ae:	0740      	lsls	r0, r0, #29
 80039b0:	0fc0      	lsrs	r0, r0, #31
}
 80039b2:	4770      	bx	lr

080039b4 <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80039b4:	2300      	movs	r3, #0
{
 80039b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039b8:	b087      	sub	sp, #28
  __IO uint32_t wait_loop_index = 0UL;
 80039ba:	9305      	str	r3, [sp, #20]

  /* Check ADC handle */
  if (hadc == NULL)
  {
    return HAL_ERROR;
 80039bc:	3301      	adds	r3, #1
{
 80039be:	1e04      	subs	r4, r0, #0
    return HAL_ERROR;
 80039c0:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 80039c2:	d100      	bne.n	80039c6 <HAL_ADC_Init+0x12>
 80039c4:	e0c1      	b.n	8003b4a <HAL_ADC_Init+0x196>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80039c6:	6d85      	ldr	r5, [r0, #88]	; 0x58
 80039c8:	2d00      	cmp	r5, #0
 80039ca:	d105      	bne.n	80039d8 <HAL_ADC_Init+0x24>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039cc:	f7ff fec0 	bl	8003750 <HAL_ADC_MspInit>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80039d0:	0023      	movs	r3, r4
 80039d2:	3354      	adds	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 80039d4:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80039d6:	701d      	strb	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80039d8:	2380      	movs	r3, #128	; 0x80
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039da:	6826      	ldr	r6, [r4, #0]
 80039dc:	055b      	lsls	r3, r3, #21
 80039de:	68b2      	ldr	r2, [r6, #8]
 80039e0:	421a      	tst	r2, r3
 80039e2:	d100      	bne.n	80039e6 <HAL_ADC_Init+0x32>
 80039e4:	e0b4      	b.n	8003b50 <HAL_ADC_Init+0x19c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039e6:	2200      	movs	r2, #0
 80039e8:	68b3      	ldr	r3, [r6, #8]
 80039ea:	9201      	str	r2, [sp, #4]
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	d408      	bmi.n	8003a02 <HAL_ADC_Init+0x4e>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039f0:	2310      	movs	r3, #16

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039f2:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039f4:	6da2      	ldr	r2, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80039f6:	9501      	str	r5, [sp, #4]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039f8:	4313      	orrs	r3, r2
 80039fa:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039fc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80039fe:	432b      	orrs	r3, r5
 8003a00:	65e3      	str	r3, [r4, #92]	; 0x5c

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a02:	0030      	movs	r0, r6
 8003a04:	f7ff ffd2 	bl	80039ac <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a08:	2310      	movs	r3, #16
 8003a0a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003a0c:	401a      	ands	r2, r3
 8003a0e:	4310      	orrs	r0, r2
 8003a10:	d000      	beq.n	8003a14 <HAL_ADC_Init+0x60>
 8003a12:	e0ec      	b.n	8003bee <HAL_ADC_Init+0x23a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a16:	4a79      	ldr	r2, [pc, #484]	; (8003bfc <HAL_ADC_Init+0x248>)
  uint32_t tmpCFGR2 = 0UL;
 8003a18:	0001      	movs	r1, r0
    ADC_STATE_CLR_SET(hadc->State,
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	65a3      	str	r3, [r4, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a22:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	07d2      	lsls	r2, r2, #31
 8003a28:	d431      	bmi.n	8003a8e <HAL_ADC_Init+0xda>

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
                   hadc->Init.TriggerFrequencyMode
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a2a:	0026      	movs	r6, r4
      MODIFY_REG(hadc->Instance->CFGR1,
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	3118      	adds	r1, #24
 8003a30:	438a      	bics	r2, r1
 8003a32:	68a1      	ldr	r1, [r4, #8]
      if (hadc->Init.OversamplingMode == ENABLE)
 8003a34:	363c      	adds	r6, #60	; 0x3c
      MODIFY_REG(hadc->Instance->CFGR1,
 8003a36:	430a      	orrs	r2, r1
 8003a38:	60da      	str	r2, [r3, #12]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003a3a:	6862      	ldr	r2, [r4, #4]
 8003a3c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 8003a3e:	7835      	ldrb	r5, [r6, #0]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003a40:	0f97      	lsrs	r7, r2, #30
 8003a42:	07bf      	lsls	r7, r7, #30
 8003a44:	4339      	orrs	r1, r7
      if (hadc->Init.OversamplingMode == ENABLE)
 8003a46:	9502      	str	r5, [sp, #8]
 8003a48:	2d01      	cmp	r5, #1
 8003a4a:	d108      	bne.n	8003a5e <HAL_ADC_Init+0xaa>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003a4c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8003a4e:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8003a50:	4335      	orrs	r5, r6
 8003a52:	4329      	orrs	r1, r5
 8003a54:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8003a56:	4329      	orrs	r1, r5
 8003a58:	9d02      	ldr	r5, [sp, #8]
 8003a5a:	4339      	orrs	r1, r7
 8003a5c:	4329      	orrs	r1, r5
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003a5e:	691e      	ldr	r6, [r3, #16]
 8003a60:	4f67      	ldr	r7, [pc, #412]	; (8003c00 <HAL_ADC_Init+0x24c>)
 8003a62:	403e      	ands	r6, r7
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003a64:	2780      	movs	r7, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 8003a66:	430e      	orrs	r6, r1
 8003a68:	611e      	str	r6, [r3, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003a6a:	0056      	lsls	r6, r2, #1
 8003a6c:	0876      	lsrs	r6, r6, #1
 8003a6e:	05ff      	lsls	r7, r7, #23
 8003a70:	42be      	cmp	r6, r7
 8003a72:	d00c      	beq.n	8003a8e <HAL_ADC_Init+0xda>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003a74:	2680      	movs	r6, #128	; 0x80
 8003a76:	0636      	lsls	r6, r6, #24
 8003a78:	42b2      	cmp	r2, r6
 8003a7a:	d008      	beq.n	8003a8e <HAL_ADC_Init+0xda>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003a7c:	4e61      	ldr	r6, [pc, #388]	; (8003c04 <HAL_ADC_Init+0x250>)
 8003a7e:	4f62      	ldr	r7, [pc, #392]	; (8003c08 <HAL_ADC_Init+0x254>)
 8003a80:	6835      	ldr	r5, [r6, #0]
 8003a82:	402f      	ands	r7, r5
 8003a84:	25f0      	movs	r5, #240	; 0xf0
 8003a86:	03ad      	lsls	r5, r5, #14
 8003a88:	402a      	ands	r2, r5
 8003a8a:	433a      	orrs	r2, r7
 8003a8c:	6032      	str	r2, [r6, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003a8e:	7e26      	ldrb	r6, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003a90:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003a92:	03b6      	lsls	r6, r6, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003a94:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003a96:	4316      	orrs	r6, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003a98:	7ea2      	ldrb	r2, [r4, #26]
 8003a9a:	4694      	mov	ip, r2
 8003a9c:	0357      	lsls	r7, r2, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003a9e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003aa0:	2a00      	cmp	r2, #0
 8003aa2:	d001      	beq.n	8003aa8 <HAL_ADC_Init+0xf4>
 8003aa4:	2280      	movs	r2, #128	; 0x80
 8003aa6:	0152      	lsls	r2, r2, #5
 8003aa8:	68e5      	ldr	r5, [r4, #12]
 8003aaa:	432e      	orrs	r6, r5
                 hadc->Init.DataAlign                                           |
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003aac:	6925      	ldr	r5, [r4, #16]
 8003aae:	433e      	orrs	r6, r7
 8003ab0:	9603      	str	r6, [sp, #12]
 8003ab2:	9502      	str	r5, [sp, #8]
 8003ab4:	2d00      	cmp	r5, #0
 8003ab6:	da60      	bge.n	8003b7a <HAL_ADC_Init+0x1c6>
 8003ab8:	006f      	lsls	r7, r5, #1
 8003aba:	087f      	lsrs	r7, r7, #1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003abc:	0026      	movs	r6, r4
 8003abe:	362c      	adds	r6, #44	; 0x2c
 8003ac0:	7836      	ldrb	r6, [r6, #0]
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003ac2:	9d03      	ldr	r5, [sp, #12]
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003ac4:	0076      	lsls	r6, r6, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003ac6:	432e      	orrs	r6, r5
 8003ac8:	4332      	orrs	r2, r6

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003aca:	1c66      	adds	r6, r4, #1
 8003acc:	7ff6      	ldrb	r6, [r6, #31]
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003ace:	433a      	orrs	r2, r7
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ad0:	2e01      	cmp	r6, #1
 8003ad2:	d105      	bne.n	8003ae0 <HAL_ADC_Init+0x12c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003ad4:	4665      	mov	r5, ip
 8003ad6:	2d00      	cmp	r5, #0
 8003ad8:	d152      	bne.n	8003b80 <HAL_ADC_Init+0x1cc>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003ada:	2680      	movs	r6, #128	; 0x80
 8003adc:	0276      	lsls	r6, r6, #9
 8003ade:	4332      	orrs	r2, r6
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ae0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003ae2:	2e00      	cmp	r6, #0
 8003ae4:	d005      	beq.n	8003af2 <HAL_ADC_Init+0x13e>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003ae6:	27e0      	movs	r7, #224	; 0xe0
 8003ae8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8003aea:	007f      	lsls	r7, r7, #1
 8003aec:	403e      	ands	r6, r7
 8003aee:	432e      	orrs	r6, r5
 8003af0:	4332      	orrs	r2, r6
                   hadc->Init.ExternalTrigConvEdge);
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8003af2:	68de      	ldr	r6, [r3, #12]
 8003af4:	4f45      	ldr	r7, [pc, #276]	; (8003c0c <HAL_ADC_Init+0x258>)
  MODIFY_REG(ADCx->SMPR,
 8003af6:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8003af8:	403e      	ands	r6, r7
 8003afa:	4316      	orrs	r6, r2
 8003afc:	60de      	str	r6, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8003afe:	691e      	ldr	r6, [r3, #16]
 8003b00:	4f43      	ldr	r7, [pc, #268]	; (8003c10 <HAL_ADC_Init+0x25c>)
 8003b02:	403e      	ands	r6, r7
 8003b04:	4331      	orrs	r1, r6
 8003b06:	2607      	movs	r6, #7
 8003b08:	2770      	movs	r7, #112	; 0x70
 8003b0a:	6119      	str	r1, [r3, #16]
 8003b0c:	6959      	ldr	r1, [r3, #20]
 8003b0e:	43b1      	bics	r1, r6
 8003b10:	4329      	orrs	r1, r5
 8003b12:	6159      	str	r1, [r3, #20]
 8003b14:	695e      	ldr	r6, [r3, #20]
 8003b16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003b18:	43be      	bics	r6, r7
 8003b1a:	0109      	lsls	r1, r1, #4
 8003b1c:	4331      	orrs	r1, r6
 8003b1e:	6159      	str	r1, [r3, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003b20:	9902      	ldr	r1, [sp, #8]
 8003b22:	2900      	cmp	r1, #0
 8003b24:	d134      	bne.n	8003b90 <HAL_ADC_Init+0x1dc>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003b26:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003b28:	3910      	subs	r1, #16
      if (ADCGroupRegularSequencerRanksCount == 1UL)
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003b2a:	4301      	orrs	r1, r0
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003b2c:	6299      	str	r1, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	4938      	ldr	r1, [pc, #224]	; (8003c14 <HAL_ADC_Init+0x260>)
 8003b32:	400b      	ands	r3, r1
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d14d      	bne.n	8003bd4 <HAL_ADC_Init+0x220>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b38:	2300      	movs	r3, #0

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003b3a:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8003b3c:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8003b3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b40:	4393      	bics	r3, r2
 8003b42:	001a      	movs	r2, r3
 8003b44:	2301      	movs	r3, #1
 8003b46:	4313      	orrs	r3, r2
 8003b48:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
  }

  return tmp_hal_status;
}
 8003b4a:	9801      	ldr	r0, [sp, #4]
 8003b4c:	b007      	add	sp, #28
 8003b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(ADCx->CR,
 8003b50:	68b2      	ldr	r2, [r6, #8]
 8003b52:	4931      	ldr	r1, [pc, #196]	; (8003c18 <HAL_ADC_Init+0x264>)
 8003b54:	400a      	ands	r2, r1
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60b3      	str	r3, [r6, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b5a:	4b30      	ldr	r3, [pc, #192]	; (8003c1c <HAL_ADC_Init+0x268>)
 8003b5c:	4930      	ldr	r1, [pc, #192]	; (8003c20 <HAL_ADC_Init+0x26c>)
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	f7fc fada 	bl	8000118 <__udivsi3>
 8003b64:	3001      	adds	r0, #1
 8003b66:	0040      	lsls	r0, r0, #1
 8003b68:	9005      	str	r0, [sp, #20]
    while (wait_loop_index != 0UL)
 8003b6a:	9b05      	ldr	r3, [sp, #20]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d100      	bne.n	8003b72 <HAL_ADC_Init+0x1be>
 8003b70:	e739      	b.n	80039e6 <HAL_ADC_Init+0x32>
      wait_loop_index--;
 8003b72:	9b05      	ldr	r3, [sp, #20]
 8003b74:	3b01      	subs	r3, #1
 8003b76:	9305      	str	r3, [sp, #20]
 8003b78:	e7f7      	b.n	8003b6a <HAL_ADC_Init+0x1b6>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003b7a:	2780      	movs	r7, #128	; 0x80
 8003b7c:	03bf      	lsls	r7, r7, #14
 8003b7e:	e79d      	b.n	8003abc <HAL_ADC_Init+0x108>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b80:	2720      	movs	r7, #32
 8003b82:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8003b84:	432f      	orrs	r7, r5
 8003b86:	65a7      	str	r7, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b88:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 8003b8a:	433e      	orrs	r6, r7
 8003b8c:	65e6      	str	r6, [r4, #92]	; 0x5c
 8003b8e:	e7a7      	b.n	8003ae0 <HAL_ADC_Init+0x12c>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b90:	2180      	movs	r1, #128	; 0x80
 8003b92:	9d02      	ldr	r5, [sp, #8]
 8003b94:	0389      	lsls	r1, r1, #14
 8003b96:	428d      	cmp	r5, r1
 8003b98:	d1c9      	bne.n	8003b2e <HAL_ADC_Init+0x17a>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003b9a:	270f      	movs	r7, #15
 8003b9c:	6e26      	ldr	r6, [r4, #96]	; 0x60
 8003b9e:	0035      	movs	r5, r6
 8003ba0:	0081      	lsls	r1, r0, #2
 8003ba2:	40cd      	lsrs	r5, r1
 8003ba4:	0029      	movs	r1, r5
 8003ba6:	4039      	ands	r1, r7
 8003ba8:	290f      	cmp	r1, #15
 8003baa:	d00d      	beq.n	8003bc8 <HAL_ADC_Init+0x214>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003bac:	3001      	adds	r0, #1
 8003bae:	2808      	cmp	r0, #8
 8003bb0:	d1f5      	bne.n	8003b9e <HAL_ADC_Init+0x1ea>
        MODIFY_REG(hadc->Instance->CHSELR,
 8003bb2:	201c      	movs	r0, #28
 8003bb4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003bb6:	69e1      	ldr	r1, [r4, #28]
 8003bb8:	3901      	subs	r1, #1
 8003bba:	0089      	lsls	r1, r1, #2
 8003bbc:	4001      	ands	r1, r0
 8003bbe:	382c      	subs	r0, #44	; 0x2c
 8003bc0:	4088      	lsls	r0, r1
 8003bc2:	0001      	movs	r1, r0
 8003bc4:	4331      	orrs	r1, r6
 8003bc6:	e7b1      	b.n	8003b2c <HAL_ADC_Init+0x178>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003bc8:	2801      	cmp	r0, #1
 8003bca:	d1f2      	bne.n	8003bb2 <HAL_ADC_Init+0x1fe>
        SET_BIT(hadc->Instance->CHSELR,
 8003bcc:	2110      	movs	r1, #16
 8003bce:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003bd0:	4249      	negs	r1, r1
 8003bd2:	e7aa      	b.n	8003b2a <HAL_ADC_Init+0x176>
      ADC_STATE_CLR_SET(hadc->State,
 8003bd4:	2212      	movs	r2, #18
 8003bd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bd8:	2501      	movs	r5, #1
      ADC_STATE_CLR_SET(hadc->State,
 8003bda:	4393      	bics	r3, r2
 8003bdc:	001a      	movs	r2, r3
 8003bde:	2310      	movs	r3, #16
 8003be0:	4313      	orrs	r3, r2
 8003be2:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003be4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 8003be6:	9501      	str	r5, [sp, #4]
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003be8:	432b      	orrs	r3, r5
 8003bea:	65e3      	str	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 8003bec:	e7ad      	b.n	8003b4a <HAL_ADC_Init+0x196>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bee:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	9301      	str	r3, [sp, #4]
 8003bf8:	e7a7      	b.n	8003b4a <HAL_ADC_Init+0x196>
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	fffffefd 	.word	0xfffffefd
 8003c00:	1ffffc02 	.word	0x1ffffc02
 8003c04:	40012708 	.word	0x40012708
 8003c08:	ffc3ffff 	.word	0xffc3ffff
 8003c0c:	fffe0219 	.word	0xfffe0219
 8003c10:	dffffc02 	.word	0xdffffc02
 8003c14:	833fffe7 	.word	0x833fffe7
 8003c18:	6fffffe8 	.word	0x6fffffe8
 8003c1c:	20000000 	.word	0x20000000
 8003c20:	00030d40 	.word	0x00030d40

08003c24 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c24:	b510      	push	{r4, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c26:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003c28:	f7fe fd74 	bl	8002714 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c2c:	bd10      	pop	{r4, pc}

08003c2e <HAL_ADC_ErrorCallback>:
 8003c2e:	4770      	bx	lr

08003c30 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c30:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c32:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8003c34:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c36:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	6583      	str	r3, [r0, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c3c:	2304      	movs	r3, #4
 8003c3e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003c40:	4313      	orrs	r3, r2
 8003c42:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c44:	f7ff fff3 	bl	8003c2e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c48:	bd10      	pop	{r4, pc}
	...

08003c4c <ADC_DMAConvCplt>:
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003c4c:	2350      	movs	r3, #80	; 0x50
{
 8003c4e:	b510      	push	{r4, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c50:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003c52:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003c54:	421a      	tst	r2, r3
 8003c56:	d12c      	bne.n	8003cb2 <ADC_DMAConvCplt+0x66>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c58:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003c5a:	33b1      	adds	r3, #177	; 0xb1
 8003c5c:	33ff      	adds	r3, #255	; 0xff
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003c62:	23c0      	movs	r3, #192	; 0xc0
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c64:	6820      	ldr	r0, [r4, #0]
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	68c2      	ldr	r2, [r0, #12]
 8003c6a:	421a      	tst	r2, r3
 8003c6c:	d114      	bne.n	8003c98 <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8003c6e:	7ea3      	ldrb	r3, [r4, #26]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d111      	bne.n	8003c98 <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003c74:	6803      	ldr	r3, [r0, #0]
 8003c76:	071b      	lsls	r3, r3, #28
 8003c78:	d50e      	bpl.n	8003c98 <ADC_DMAConvCplt+0x4c>
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c7a:	f7ff fe97 	bl	80039ac <LL_ADC_REG_IsConversionOngoing>
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	d10e      	bne.n	8003ca0 <ADC_DMAConvCplt+0x54>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003c82:	210c      	movs	r1, #12
 8003c84:	6822      	ldr	r2, [r4, #0]
 8003c86:	6853      	ldr	r3, [r2, #4]
 8003c88:	438b      	bics	r3, r1
 8003c8a:	6053      	str	r3, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8003c8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c8e:	4a0e      	ldr	r2, [pc, #56]	; (8003cc8 <ADC_DMAConvCplt+0x7c>)
 8003c90:	401a      	ands	r2, r3
 8003c92:	2301      	movs	r3, #1
 8003c94:	4313      	orrs	r3, r2
 8003c96:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8003c98:	0020      	movs	r0, r4
 8003c9a:	f7fe fd3d 	bl	8002718 <HAL_ADC_ConvCpltCallback>
}
 8003c9e:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ca0:	2320      	movs	r3, #32
 8003ca2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ca8:	2301      	movs	r3, #1
 8003caa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003cac:	4313      	orrs	r3, r2
 8003cae:	65e3      	str	r3, [r4, #92]	; 0x5c
 8003cb0:	e7f2      	b.n	8003c98 <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003cb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003cb4:	06db      	lsls	r3, r3, #27
 8003cb6:	d503      	bpl.n	8003cc0 <ADC_DMAConvCplt+0x74>
      HAL_ADC_ErrorCallback(hadc);
 8003cb8:	0020      	movs	r0, r4
 8003cba:	f7ff ffb8 	bl	8003c2e <HAL_ADC_ErrorCallback>
 8003cbe:	e7ee      	b.n	8003c9e <ADC_DMAConvCplt+0x52>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003cc0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc4:	4798      	blx	r3
}
 8003cc6:	e7ea      	b.n	8003c9e <ADC_DMAConvCplt+0x52>
 8003cc8:	fffffefe 	.word	0xfffffefe

08003ccc <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0UL;
 8003ccc:	2300      	movs	r3, #0
{
 8003cce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cd0:	b087      	sub	sp, #28
  __IO uint32_t wait_loop_index = 0UL;
 8003cd2:	9305      	str	r3, [sp, #20]
  __HAL_LOCK(hadc);
 8003cd4:	0003      	movs	r3, r0
 8003cd6:	3354      	adds	r3, #84	; 0x54
 8003cd8:	781a      	ldrb	r2, [r3, #0]
{
 8003cda:	0005      	movs	r5, r0
 8003cdc:	000e      	movs	r6, r1
  __HAL_LOCK(hadc);
 8003cde:	2002      	movs	r0, #2
 8003ce0:	2a01      	cmp	r2, #1
 8003ce2:	d100      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x1a>
 8003ce4:	e0c3      	b.n	8003e6e <HAL_ADC_ConfigChannel+0x1a2>
 8003ce6:	2401      	movs	r4, #1
 8003ce8:	701c      	strb	r4, [r3, #0]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cea:	6828      	ldr	r0, [r5, #0]
 8003cec:	f7ff fe5e 	bl	80039ac <LL_ADC_REG_IsConversionOngoing>
 8003cf0:	2800      	cmp	r0, #0
 8003cf2:	d000      	beq.n	8003cf6 <HAL_ADC_ConfigChannel+0x2a>
 8003cf4:	e0f9      	b.n	8003eea <HAL_ADC_ConfigChannel+0x21e>
    if (pConfig->Rank != ADC_RANK_NONE)
 8003cf6:	2280      	movs	r2, #128	; 0x80
 8003cf8:	6873      	ldr	r3, [r6, #4]
 8003cfa:	0612      	lsls	r2, r2, #24
 8003cfc:	9301      	str	r3, [sp, #4]
 8003cfe:	2304      	movs	r3, #4
 8003d00:	4694      	mov	ip, r2
 8003d02:	692f      	ldr	r7, [r5, #16]
 8003d04:	9a01      	ldr	r2, [sp, #4]
 8003d06:	439f      	bics	r7, r3
 8003d08:	6833      	ldr	r3, [r6, #0]
 8003d0a:	2a02      	cmp	r2, #2
 8003d0c:	d100      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x44>
 8003d0e:	e0c2      	b.n	8003e96 <HAL_ADC_ConfigChannel+0x1ca>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d10:	0359      	lsls	r1, r3, #13
 8003d12:	0b49      	lsrs	r1, r1, #13
 8003d14:	682a      	ldr	r2, [r5, #0]
 8003d16:	9102      	str	r1, [sp, #8]
 8003d18:	4567      	cmp	r7, ip
 8003d1a:	d10f      	bne.n	8003d3c <HAL_ADC_ConfigChannel+0x70>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003d1c:	6a90      	ldr	r0, [r2, #40]	; 0x28
  MODIFY_REG(ADCx->CHSELR,
 8003d1e:	4301      	orrs	r1, r0
 8003d20:	6291      	str	r1, [r2, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR,
 8003d22:	68b1      	ldr	r1, [r6, #8]
 8003d24:	6954      	ldr	r4, [r2, #20]
 8003d26:	0218      	lsls	r0, r3, #8
 8003d28:	4e73      	ldr	r6, [pc, #460]	; (8003ef8 <HAL_ADC_ConfigChannel+0x22c>)
 8003d2a:	4001      	ands	r1, r0
 8003d2c:	4031      	ands	r1, r6
 8003d2e:	4384      	bics	r4, r0
 8003d30:	4321      	orrs	r1, r4
 8003d32:	6151      	str	r1, [r2, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	db64      	blt.n	8003e02 <HAL_ADC_ConfigChannel+0x136>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d38:	2000      	movs	r0, #0
}
 8003d3a:	e095      	b.n	8003e68 <HAL_ADC_ConfigChannel+0x19c>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003d3c:	211f      	movs	r1, #31
 8003d3e:	9f01      	ldr	r7, [sp, #4]
 8003d40:	400f      	ands	r7, r1
 8003d42:	46bc      	mov	ip, r7
 8003d44:	270f      	movs	r7, #15
 8003d46:	4661      	mov	r1, ip
 8003d48:	408f      	lsls	r7, r1
 8003d4a:	43f9      	mvns	r1, r7
 8003d4c:	9103      	str	r1, [sp, #12]
 8003d4e:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8003d50:	43b9      	bics	r1, r7
 8003d52:	000f      	movs	r7, r1
 8003d54:	9902      	ldr	r1, [sp, #8]
 8003d56:	2900      	cmp	r1, #0
 8003d58:	d114      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0xb8>
 8003d5a:	0e98      	lsrs	r0, r3, #26
 8003d5c:	311f      	adds	r1, #31
 8003d5e:	4008      	ands	r0, r1
 8003d60:	4661      	mov	r1, ip
 8003d62:	4088      	lsls	r0, r1
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003d64:	9901      	ldr	r1, [sp, #4]
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003d66:	4307      	orrs	r7, r0
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003d68:	0889      	lsrs	r1, r1, #2
 8003d6a:	69e8      	ldr	r0, [r5, #28]
 8003d6c:	3101      	adds	r1, #1
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003d6e:	662f      	str	r7, [r5, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003d70:	4281      	cmp	r1, r0
 8003d72:	d8d6      	bhi.n	8003d22 <HAL_ADC_ConfigChannel+0x56>
  MODIFY_REG(ADCx->CHSELR,
 8003d74:	4664      	mov	r4, ip
 8003d76:	0099      	lsls	r1, r3, #2
 8003d78:	0f09      	lsrs	r1, r1, #28
 8003d7a:	40a1      	lsls	r1, r4
 8003d7c:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003d7e:	9c03      	ldr	r4, [sp, #12]
 8003d80:	4020      	ands	r0, r4
 8003d82:	e7cc      	b.n	8003d1e <HAL_ADC_ConfigChannel+0x52>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003d84:	4223      	tst	r3, r4
 8003d86:	d1eb      	bne.n	8003d60 <HAL_ADC_ConfigChannel+0x94>
 8003d88:	2102      	movs	r1, #2
 8003d8a:	0020      	movs	r0, r4
 8003d8c:	420b      	tst	r3, r1
 8003d8e:	d1e7      	bne.n	8003d60 <HAL_ADC_ConfigChannel+0x94>
 8003d90:	0008      	movs	r0, r1
 8003d92:	1849      	adds	r1, r1, r1
 8003d94:	420b      	tst	r3, r1
 8003d96:	d1e3      	bne.n	8003d60 <HAL_ADC_ConfigChannel+0x94>
 8003d98:	3001      	adds	r0, #1
 8003d9a:	0719      	lsls	r1, r3, #28
 8003d9c:	d4e0      	bmi.n	8003d60 <HAL_ADC_ConfigChannel+0x94>
 8003d9e:	3001      	adds	r0, #1
 8003da0:	06d9      	lsls	r1, r3, #27
 8003da2:	d4dd      	bmi.n	8003d60 <HAL_ADC_ConfigChannel+0x94>
 8003da4:	3001      	adds	r0, #1
 8003da6:	0699      	lsls	r1, r3, #26
 8003da8:	d4da      	bmi.n	8003d60 <HAL_ADC_ConfigChannel+0x94>
 8003daa:	3001      	adds	r0, #1
 8003dac:	0659      	lsls	r1, r3, #25
 8003dae:	d4d7      	bmi.n	8003d60 <HAL_ADC_ConfigChannel+0x94>
 8003db0:	3001      	adds	r0, #1
 8003db2:	0619      	lsls	r1, r3, #24
 8003db4:	d4d4      	bmi.n	8003d60 <HAL_ADC_ConfigChannel+0x94>
 8003db6:	3001      	adds	r0, #1
 8003db8:	05d9      	lsls	r1, r3, #23
 8003dba:	d4d1      	bmi.n	8003d60 <HAL_ADC_ConfigChannel+0x94>
 8003dbc:	3001      	adds	r0, #1
 8003dbe:	0599      	lsls	r1, r3, #22
 8003dc0:	d4ce      	bmi.n	8003d60 <HAL_ADC_ConfigChannel+0x94>
 8003dc2:	3001      	adds	r0, #1
 8003dc4:	0559      	lsls	r1, r3, #21
 8003dc6:	d4cb      	bmi.n	8003d60 <HAL_ADC_ConfigChannel+0x94>
 8003dc8:	3001      	adds	r0, #1
 8003dca:	0519      	lsls	r1, r3, #20
 8003dcc:	d4c8      	bmi.n	8003d60 <HAL_ADC_ConfigChannel+0x94>
 8003dce:	3001      	adds	r0, #1
 8003dd0:	04d9      	lsls	r1, r3, #19
 8003dd2:	d4c5      	bmi.n	8003d60 <HAL_ADC_ConfigChannel+0x94>
 8003dd4:	3001      	adds	r0, #1
 8003dd6:	0499      	lsls	r1, r3, #18
 8003dd8:	d4c2      	bmi.n	8003d60 <HAL_ADC_ConfigChannel+0x94>
 8003dda:	3001      	adds	r0, #1
 8003ddc:	0459      	lsls	r1, r3, #17
 8003dde:	d4bf      	bmi.n	8003d60 <HAL_ADC_ConfigChannel+0x94>
 8003de0:	3001      	adds	r0, #1
 8003de2:	0419      	lsls	r1, r3, #16
 8003de4:	d4bc      	bmi.n	8003d60 <HAL_ADC_ConfigChannel+0x94>
 8003de6:	3001      	adds	r0, #1
 8003de8:	03d9      	lsls	r1, r3, #15
 8003dea:	d4b9      	bmi.n	8003d60 <HAL_ADC_ConfigChannel+0x94>
 8003dec:	3001      	adds	r0, #1
 8003dee:	0399      	lsls	r1, r3, #14
 8003df0:	d4b6      	bmi.n	8003d60 <HAL_ADC_ConfigChannel+0x94>
 8003df2:	2180      	movs	r1, #128	; 0x80
 8003df4:	0018      	movs	r0, r3
 8003df6:	02c9      	lsls	r1, r1, #11
 8003df8:	4008      	ands	r0, r1
 8003dfa:	420b      	tst	r3, r1
 8003dfc:	d0b0      	beq.n	8003d60 <HAL_ADC_ConfigChannel+0x94>
 8003dfe:	2012      	movs	r0, #18
 8003e00:	e7ae      	b.n	8003d60 <HAL_ADC_ConfigChannel+0x94>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003e02:	24e0      	movs	r4, #224	; 0xe0
 8003e04:	4a3d      	ldr	r2, [pc, #244]	; (8003efc <HAL_ADC_ConfigChannel+0x230>)
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003e06:	483e      	ldr	r0, [pc, #248]	; (8003f00 <HAL_ADC_ConfigChannel+0x234>)
 8003e08:	6811      	ldr	r1, [r2, #0]
 8003e0a:	0464      	lsls	r4, r4, #17
 8003e0c:	400c      	ands	r4, r1
 8003e0e:	4283      	cmp	r3, r0
 8003e10:	d11a      	bne.n	8003e48 <HAL_ADC_ConfigChannel+0x17c>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e12:	2380      	movs	r3, #128	; 0x80
 8003e14:	041b      	lsls	r3, r3, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003e16:	4219      	tst	r1, r3
 8003e18:	d18e      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x6c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003e1a:	6811      	ldr	r1, [r2, #0]
 8003e1c:	4839      	ldr	r0, [pc, #228]	; (8003f04 <HAL_ADC_ConfigChannel+0x238>)
 8003e1e:	4001      	ands	r1, r0
 8003e20:	4321      	orrs	r1, r4
 8003e22:	4319      	orrs	r1, r3
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e24:	4b38      	ldr	r3, [pc, #224]	; (8003f08 <HAL_ADC_ConfigChannel+0x23c>)
 8003e26:	6011      	str	r1, [r2, #0]
 8003e28:	6818      	ldr	r0, [r3, #0]
 8003e2a:	4938      	ldr	r1, [pc, #224]	; (8003f0c <HAL_ADC_ConfigChannel+0x240>)
 8003e2c:	f7fc f974 	bl	8000118 <__udivsi3>
 8003e30:	1c43      	adds	r3, r0, #1
 8003e32:	200c      	movs	r0, #12
 8003e34:	4358      	muls	r0, r3
 8003e36:	9005      	str	r0, [sp, #20]
          while (wait_loop_index != 0UL)
 8003e38:	9b05      	ldr	r3, [sp, #20]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d100      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x174>
 8003e3e:	e77b      	b.n	8003d38 <HAL_ADC_ConfigChannel+0x6c>
            wait_loop_index--;
 8003e40:	9b05      	ldr	r3, [sp, #20]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	9305      	str	r3, [sp, #20]
 8003e46:	e7f7      	b.n	8003e38 <HAL_ADC_ConfigChannel+0x16c>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e48:	4831      	ldr	r0, [pc, #196]	; (8003f10 <HAL_ADC_ConfigChannel+0x244>)
 8003e4a:	4283      	cmp	r3, r0
 8003e4c:	d111      	bne.n	8003e72 <HAL_ADC_ConfigChannel+0x1a6>
 8003e4e:	2680      	movs	r6, #128	; 0x80
 8003e50:	0008      	movs	r0, r1
 8003e52:	0476      	lsls	r6, r6, #17
 8003e54:	4030      	ands	r0, r6
 8003e56:	4231      	tst	r1, r6
 8003e58:	d000      	beq.n	8003e5c <HAL_ADC_ConfigChannel+0x190>
 8003e5a:	e76d      	b.n	8003d38 <HAL_ADC_ConfigChannel+0x6c>
 8003e5c:	6811      	ldr	r1, [r2, #0]
 8003e5e:	4b29      	ldr	r3, [pc, #164]	; (8003f04 <HAL_ADC_ConfigChannel+0x238>)
 8003e60:	4019      	ands	r1, r3
 8003e62:	4321      	orrs	r1, r4
 8003e64:	430e      	orrs	r6, r1
 8003e66:	6016      	str	r6, [r2, #0]
  __HAL_UNLOCK(hadc);
 8003e68:	2300      	movs	r3, #0
 8003e6a:	3554      	adds	r5, #84	; 0x54
 8003e6c:	702b      	strb	r3, [r5, #0]
}
 8003e6e:	b007      	add	sp, #28
 8003e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003e72:	4828      	ldr	r0, [pc, #160]	; (8003f14 <HAL_ADC_ConfigChannel+0x248>)
 8003e74:	4283      	cmp	r3, r0
 8003e76:	d000      	beq.n	8003e7a <HAL_ADC_ConfigChannel+0x1ae>
 8003e78:	e75e      	b.n	8003d38 <HAL_ADC_ConfigChannel+0x6c>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e7a:	2380      	movs	r3, #128	; 0x80
 8003e7c:	0008      	movs	r0, r1
 8003e7e:	03db      	lsls	r3, r3, #15
 8003e80:	4018      	ands	r0, r3
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003e82:	4219      	tst	r1, r3
 8003e84:	d000      	beq.n	8003e88 <HAL_ADC_ConfigChannel+0x1bc>
 8003e86:	e757      	b.n	8003d38 <HAL_ADC_ConfigChannel+0x6c>
 8003e88:	6811      	ldr	r1, [r2, #0]
 8003e8a:	4e1e      	ldr	r6, [pc, #120]	; (8003f04 <HAL_ADC_ConfigChannel+0x238>)
 8003e8c:	4031      	ands	r1, r6
 8003e8e:	4321      	orrs	r1, r4
 8003e90:	430b      	orrs	r3, r1
 8003e92:	6013      	str	r3, [r2, #0]
}
 8003e94:	e7e8      	b.n	8003e68 <HAL_ADC_ConfigChannel+0x19c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003e96:	4567      	cmp	r7, ip
 8003e98:	d105      	bne.n	8003ea6 <HAL_ADC_ConfigChannel+0x1da>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003e9a:	6828      	ldr	r0, [r5, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003e9c:	0359      	lsls	r1, r3, #13
 8003e9e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003ea0:	0b49      	lsrs	r1, r1, #13
 8003ea2:	438a      	bics	r2, r1
 8003ea4:	6282      	str	r2, [r0, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	db00      	blt.n	8003eac <HAL_ADC_ConfigChannel+0x1e0>
 8003eaa:	e745      	b.n	8003d38 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003eac:	4a13      	ldr	r2, [pc, #76]	; (8003efc <HAL_ADC_ConfigChannel+0x230>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003eae:	4814      	ldr	r0, [pc, #80]	; (8003f00 <HAL_ADC_ConfigChannel+0x234>)
 8003eb0:	6811      	ldr	r1, [r2, #0]
 8003eb2:	4283      	cmp	r3, r0
 8003eb4:	d108      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x1fc>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eb6:	23a0      	movs	r3, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003eb8:	6810      	ldr	r0, [r2, #0]
 8003eba:	045b      	lsls	r3, r3, #17
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ebc:	4019      	ands	r1, r3
 8003ebe:	4b11      	ldr	r3, [pc, #68]	; (8003f04 <HAL_ADC_ConfigChannel+0x238>)
 8003ec0:	4003      	ands	r3, r0
 8003ec2:	4319      	orrs	r1, r3
 8003ec4:	6011      	str	r1, [r2, #0]
 8003ec6:	e737      	b.n	8003d38 <HAL_ADC_ConfigChannel+0x6c>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003ec8:	4811      	ldr	r0, [pc, #68]	; (8003f10 <HAL_ADC_ConfigChannel+0x244>)
 8003eca:	4283      	cmp	r3, r0
 8003ecc:	d103      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x20a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ece:	23c0      	movs	r3, #192	; 0xc0
 8003ed0:	6810      	ldr	r0, [r2, #0]
 8003ed2:	041b      	lsls	r3, r3, #16
 8003ed4:	e7f2      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x1f0>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ed6:	480f      	ldr	r0, [pc, #60]	; (8003f14 <HAL_ADC_ConfigChannel+0x248>)
 8003ed8:	4283      	cmp	r3, r0
 8003eda:	d000      	beq.n	8003ede <HAL_ADC_ConfigChannel+0x212>
 8003edc:	e72c      	b.n	8003d38 <HAL_ADC_ConfigChannel+0x6c>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ede:	20c0      	movs	r0, #192	; 0xc0
 8003ee0:	0440      	lsls	r0, r0, #17
 8003ee2:	4001      	ands	r1, r0
 8003ee4:	6813      	ldr	r3, [r2, #0]
 8003ee6:	4807      	ldr	r0, [pc, #28]	; (8003f04 <HAL_ADC_ConfigChannel+0x238>)
 8003ee8:	e7ea      	b.n	8003ec0 <HAL_ADC_ConfigChannel+0x1f4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eea:	2320      	movs	r3, #32
 8003eec:	6daa      	ldr	r2, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8003eee:	0020      	movs	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	65ab      	str	r3, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8003ef4:	e7b8      	b.n	8003e68 <HAL_ADC_ConfigChannel+0x19c>
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	07ffff00 	.word	0x07ffff00
 8003efc:	40012708 	.word	0x40012708
 8003f00:	b0001000 	.word	0xb0001000
 8003f04:	fe3fffff 	.word	0xfe3fffff
 8003f08:	20000000 	.word	0x20000000
 8003f0c:	00030d40 	.word	0x00030d40
 8003f10:	b8004000 	.word	0xb8004000
 8003f14:	b4002000 	.word	0xb4002000

08003f18 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0UL;
 8003f18:	2300      	movs	r3, #0
{
 8003f1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f1c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8003f1e:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f20:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f22:	2001      	movs	r0, #1
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	4202      	tst	r2, r0
 8003f28:	d001      	beq.n	8003f2e <ADC_Enable+0x16>
  return HAL_OK;
 8003f2a:	2000      	movs	r0, #0
}
 8003f2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003f2e:	6899      	ldr	r1, [r3, #8]
 8003f30:	4a22      	ldr	r2, [pc, #136]	; (8003fbc <ADC_Enable+0xa4>)
 8003f32:	4211      	tst	r1, r2
 8003f34:	d007      	beq.n	8003f46 <ADC_Enable+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f36:	2310      	movs	r3, #16
 8003f38:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f3e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003f40:	4303      	orrs	r3, r0
 8003f42:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8003f44:	e7f2      	b.n	8003f2c <ADC_Enable+0x14>
  MODIFY_REG(ADCx->CR,
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	4e1d      	ldr	r6, [pc, #116]	; (8003fc0 <ADC_Enable+0xa8>)
 8003f4a:	4032      	ands	r2, r6
 8003f4c:	4310      	orrs	r0, r2
 8003f4e:	6098      	str	r0, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003f50:	4b1c      	ldr	r3, [pc, #112]	; (8003fc4 <ADC_Enable+0xac>)
 8003f52:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003f54:	021b      	lsls	r3, r3, #8
 8003f56:	d423      	bmi.n	8003fa0 <ADC_Enable+0x88>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003f58:	7e63      	ldrb	r3, [r4, #25]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d0e5      	beq.n	8003f2a <ADC_Enable+0x12>
      tickstart = HAL_GetTick();
 8003f5e:	f7ff fd0d 	bl	800397c <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f62:	2501      	movs	r5, #1
      tickstart = HAL_GetTick();
 8003f64:	0007      	movs	r7, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f66:	6822      	ldr	r2, [r4, #0]
 8003f68:	6813      	ldr	r3, [r2, #0]
 8003f6a:	422b      	tst	r3, r5
 8003f6c:	d1dd      	bne.n	8003f2a <ADC_Enable+0x12>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f6e:	6893      	ldr	r3, [r2, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f70:	422b      	tst	r3, r5
 8003f72:	d103      	bne.n	8003f7c <ADC_Enable+0x64>
  MODIFY_REG(ADCx->CR,
 8003f74:	6893      	ldr	r3, [r2, #8]
 8003f76:	4033      	ands	r3, r6
 8003f78:	432b      	orrs	r3, r5
 8003f7a:	6093      	str	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f7c:	f7ff fcfe 	bl	800397c <HAL_GetTick>
 8003f80:	1bc0      	subs	r0, r0, r7
 8003f82:	2802      	cmp	r0, #2
 8003f84:	d9ef      	bls.n	8003f66 <ADC_Enable+0x4e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	422b      	tst	r3, r5
 8003f8c:	d1eb      	bne.n	8003f66 <ADC_Enable+0x4e>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f8e:	2310      	movs	r3, #16
 8003f90:	6da2      	ldr	r2, [r4, #88]	; 0x58
            return HAL_ERROR;
 8003f92:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f94:	4313      	orrs	r3, r2
 8003f96:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f98:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003f9a:	431d      	orrs	r5, r3
 8003f9c:	65e5      	str	r5, [r4, #92]	; 0x5c
            return HAL_ERROR;
 8003f9e:	e7c5      	b.n	8003f2c <ADC_Enable+0x14>
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fa0:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <ADC_Enable+0xb0>)
 8003fa2:	490a      	ldr	r1, [pc, #40]	; (8003fcc <ADC_Enable+0xb4>)
 8003fa4:	6818      	ldr	r0, [r3, #0]
 8003fa6:	f7fc f8b7 	bl	8000118 <__udivsi3>
 8003faa:	3001      	adds	r0, #1
 8003fac:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8003fae:	9b01      	ldr	r3, [sp, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0d1      	beq.n	8003f58 <ADC_Enable+0x40>
        wait_loop_index--;
 8003fb4:	9b01      	ldr	r3, [sp, #4]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	9301      	str	r3, [sp, #4]
 8003fba:	e7f8      	b.n	8003fae <ADC_Enable+0x96>
 8003fbc:	80000017 	.word	0x80000017
 8003fc0:	7fffffe8 	.word	0x7fffffe8
 8003fc4:	40012708 	.word	0x40012708
 8003fc8:	20000000 	.word	0x20000000
 8003fcc:	00030d40 	.word	0x00030d40

08003fd0 <HAL_ADC_Start_DMA>:
{
 8003fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd2:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fd4:	6800      	ldr	r0, [r0, #0]
{
 8003fd6:	000d      	movs	r5, r1
 8003fd8:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fda:	f7ff fce7 	bl	80039ac <LL_ADC_REG_IsConversionOngoing>
    tmp_hal_status = HAL_BUSY;
 8003fde:	2302      	movs	r3, #2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fe0:	2800      	cmp	r0, #0
 8003fe2:	d140      	bne.n	8004066 <HAL_ADC_Start_DMA+0x96>
    __HAL_LOCK(hadc);
 8003fe4:	0027      	movs	r7, r4
 8003fe6:	3754      	adds	r7, #84	; 0x54
 8003fe8:	783a      	ldrb	r2, [r7, #0]
 8003fea:	2a01      	cmp	r2, #1
 8003fec:	d03b      	beq.n	8004066 <HAL_ADC_Start_DMA+0x96>
 8003fee:	2201      	movs	r2, #1
 8003ff0:	703a      	strb	r2, [r7, #0]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	68d9      	ldr	r1, [r3, #12]
 8003ff6:	4211      	tst	r1, r2
 8003ff8:	d10c      	bne.n	8004014 <HAL_ADC_Start_DMA+0x44>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ffa:	6899      	ldr	r1, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ffc:	4211      	tst	r1, r2
 8003ffe:	d005      	beq.n	800400c <HAL_ADC_Start_DMA+0x3c>
  MODIFY_REG(ADCx->CR,
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	491a      	ldr	r1, [pc, #104]	; (800406c <HAL_ADC_Start_DMA+0x9c>)
 8004004:	4011      	ands	r1, r2
 8004006:	2202      	movs	r2, #2
 8004008:	430a      	orrs	r2, r1
 800400a:	609a      	str	r2, [r3, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800400c:	2201      	movs	r2, #1
 800400e:	68d9      	ldr	r1, [r3, #12]
 8004010:	430a      	orrs	r2, r1
 8004012:	60da      	str	r2, [r3, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8004014:	0020      	movs	r0, r4
 8004016:	f7ff ff7f 	bl	8003f18 <ADC_Enable>
 800401a:	1e03      	subs	r3, r0, #0
    if (tmp_hal_status == HAL_OK)
 800401c:	d123      	bne.n	8004066 <HAL_ADC_Start_DMA+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 800401e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004020:	4913      	ldr	r1, [pc, #76]	; (8004070 <HAL_ADC_Start_DMA+0xa0>)
 8004022:	4011      	ands	r1, r2
 8004024:	2280      	movs	r2, #128	; 0x80
 8004026:	0052      	lsls	r2, r2, #1
 8004028:	430a      	orrs	r2, r1
 800402a:	65a2      	str	r2, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 800402c:	65e0      	str	r0, [r4, #92]	; 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800402e:	4a11      	ldr	r2, [pc, #68]	; (8004074 <HAL_ADC_Start_DMA+0xa4>)
 8004030:	6d20      	ldr	r0, [r4, #80]	; 0x50
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004032:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004034:	62c2      	str	r2, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004036:	4a10      	ldr	r2, [pc, #64]	; (8004078 <HAL_ADC_Start_DMA+0xa8>)
 8004038:	6302      	str	r2, [r0, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800403a:	4a10      	ldr	r2, [pc, #64]	; (800407c <HAL_ADC_Start_DMA+0xac>)
 800403c:	6342      	str	r2, [r0, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800403e:	221c      	movs	r2, #28
 8004040:	600a      	str	r2, [r1, #0]
      __HAL_UNLOCK(hadc);
 8004042:	703b      	strb	r3, [r7, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004044:	684a      	ldr	r2, [r1, #4]
 8004046:	3310      	adds	r3, #16
 8004048:	4313      	orrs	r3, r2
 800404a:	604b      	str	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800404c:	002a      	movs	r2, r5
 800404e:	0033      	movs	r3, r6
 8004050:	3140      	adds	r1, #64	; 0x40
 8004052:	f000 f8fd 	bl	8004250 <HAL_DMA_Start_IT>
 8004056:	0003      	movs	r3, r0
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004058:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800405a:	4904      	ldr	r1, [pc, #16]	; (800406c <HAL_ADC_Start_DMA+0x9c>)
 800405c:	6882      	ldr	r2, [r0, #8]
 800405e:	4011      	ands	r1, r2
 8004060:	2204      	movs	r2, #4
 8004062:	430a      	orrs	r2, r1
 8004064:	6082      	str	r2, [r0, #8]
}
 8004066:	0018      	movs	r0, r3
 8004068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800406a:	46c0      	nop			; (mov r8, r8)
 800406c:	7fffffe8 	.word	0x7fffffe8
 8004070:	fffff0fe 	.word	0xfffff0fe
 8004074:	08003c4d 	.word	0x08003c4d
 8004078:	08003c25 	.word	0x08003c25
 800407c:	08003c31 	.word	0x08003c31

08004080 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004080:	b530      	push	{r4, r5, lr}
 8004082:	25ff      	movs	r5, #255	; 0xff
 8004084:	2403      	movs	r4, #3
 8004086:	002a      	movs	r2, r5
 8004088:	4004      	ands	r4, r0
 800408a:	00e4      	lsls	r4, r4, #3
 800408c:	40a2      	lsls	r2, r4
 800408e:	0189      	lsls	r1, r1, #6
 8004090:	4029      	ands	r1, r5
 8004092:	43d2      	mvns	r2, r2
 8004094:	40a1      	lsls	r1, r4
 8004096:	b2c3      	uxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8004098:	2800      	cmp	r0, #0
 800409a:	db0a      	blt.n	80040b2 <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800409c:	24c0      	movs	r4, #192	; 0xc0
 800409e:	4b0b      	ldr	r3, [pc, #44]	; (80040cc <HAL_NVIC_SetPriority+0x4c>)
 80040a0:	0880      	lsrs	r0, r0, #2
 80040a2:	0080      	lsls	r0, r0, #2
 80040a4:	18c0      	adds	r0, r0, r3
 80040a6:	00a4      	lsls	r4, r4, #2
 80040a8:	5903      	ldr	r3, [r0, r4]
 80040aa:	401a      	ands	r2, r3
 80040ac:	4311      	orrs	r1, r2
 80040ae:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80040b0:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040b2:	200f      	movs	r0, #15
 80040b4:	4003      	ands	r3, r0
 80040b6:	3b08      	subs	r3, #8
 80040b8:	4805      	ldr	r0, [pc, #20]	; (80040d0 <HAL_NVIC_SetPriority+0x50>)
 80040ba:	089b      	lsrs	r3, r3, #2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	181b      	adds	r3, r3, r0
 80040c0:	69d8      	ldr	r0, [r3, #28]
 80040c2:	4002      	ands	r2, r0
 80040c4:	4311      	orrs	r1, r2
 80040c6:	61d9      	str	r1, [r3, #28]
 80040c8:	e7f2      	b.n	80040b0 <HAL_NVIC_SetPriority+0x30>
 80040ca:	46c0      	nop			; (mov r8, r8)
 80040cc:	e000e100 	.word	0xe000e100
 80040d0:	e000ed00 	.word	0xe000ed00

080040d4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80040d4:	2800      	cmp	r0, #0
 80040d6:	db05      	blt.n	80040e4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040d8:	231f      	movs	r3, #31
 80040da:	4018      	ands	r0, r3
 80040dc:	3b1e      	subs	r3, #30
 80040de:	4083      	lsls	r3, r0
 80040e0:	4a01      	ldr	r2, [pc, #4]	; (80040e8 <HAL_NVIC_EnableIRQ+0x14>)
 80040e2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80040e4:	4770      	bx	lr
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	e000e100 	.word	0xe000e100

080040ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040ec:	2280      	movs	r2, #128	; 0x80
 80040ee:	1e43      	subs	r3, r0, #1
 80040f0:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80040f2:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d20d      	bcs.n	8004114 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040f8:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040fa:	4a07      	ldr	r2, [pc, #28]	; (8004118 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040fc:	4807      	ldr	r0, [pc, #28]	; (800411c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040fe:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004100:	6a03      	ldr	r3, [r0, #32]
 8004102:	0609      	lsls	r1, r1, #24
 8004104:	021b      	lsls	r3, r3, #8
 8004106:	0a1b      	lsrs	r3, r3, #8
 8004108:	430b      	orrs	r3, r1
 800410a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800410c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800410e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004110:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004112:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8004114:	4770      	bx	lr
 8004116:	46c0      	nop			; (mov r8, r8)
 8004118:	e000e010 	.word	0xe000e010
 800411c:	e000ed00 	.word	0xe000ed00

08004120 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004120:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004122:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8004124:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8004126:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004128:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800412a:	2c00      	cmp	r4, #0
 800412c:	d002      	beq.n	8004134 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800412e:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8004130:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8004132:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004134:	251c      	movs	r5, #28
 8004136:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004138:	4e08      	ldr	r6, [pc, #32]	; (800415c <DMA_SetConfig+0x3c>)
 800413a:	4025      	ands	r5, r4
 800413c:	2401      	movs	r4, #1
 800413e:	40ac      	lsls	r4, r5
 8004140:	6877      	ldr	r7, [r6, #4]
 8004142:	433c      	orrs	r4, r7
 8004144:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004146:	6804      	ldr	r4, [r0, #0]
 8004148:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800414a:	6883      	ldr	r3, [r0, #8]
 800414c:	2b10      	cmp	r3, #16
 800414e:	d102      	bne.n	8004156 <DMA_SetConfig+0x36>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004150:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004152:	60e1      	str	r1, [r4, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004154:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8004156:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8004158:	60e2      	str	r2, [r4, #12]
}
 800415a:	e7fb      	b.n	8004154 <DMA_SetConfig+0x34>
 800415c:	40020000 	.word	0x40020000

08004160 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004160:	b510      	push	{r4, lr}
 8004162:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004164:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004166:	4a09      	ldr	r2, [pc, #36]	; (800418c <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 8004168:	089b      	lsrs	r3, r3, #2
 800416a:	189b      	adds	r3, r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	6443      	str	r3, [r0, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004170:	6803      	ldr	r3, [r0, #0]
 8004172:	2114      	movs	r1, #20
 8004174:	b2d8      	uxtb	r0, r3
 8004176:	3808      	subs	r0, #8
 8004178:	f7fb ffce 	bl	8000118 <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800417c:	4b04      	ldr	r3, [pc, #16]	; (8004190 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 800417e:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004180:	231f      	movs	r3, #31
 8004182:	4018      	ands	r0, r3
 8004184:	3b1e      	subs	r3, #30
 8004186:	4083      	lsls	r3, r0
 8004188:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 800418a:	bd10      	pop	{r4, pc}
 800418c:	10008200 	.word	0x10008200
 8004190:	40020880 	.word	0x40020880

08004194 <HAL_DMA_Init>:
{
 8004194:	b570      	push	{r4, r5, r6, lr}
 8004196:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004198:	2001      	movs	r0, #1
  if (hdma == NULL)
 800419a:	2c00      	cmp	r4, #0
 800419c:	d049      	beq.n	8004232 <HAL_DMA_Init+0x9e>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800419e:	6825      	ldr	r5, [r4, #0]
 80041a0:	4b27      	ldr	r3, [pc, #156]	; (8004240 <HAL_DMA_Init+0xac>)
 80041a2:	2114      	movs	r1, #20
 80041a4:	18e8      	adds	r0, r5, r3
 80041a6:	f7fb ffb7 	bl	8000118 <__udivsi3>
  hdma->State = HAL_DMA_STATE_BUSY;
 80041aa:	2302      	movs	r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80041ac:	0080      	lsls	r0, r0, #2
  hdma->State = HAL_DMA_STATE_BUSY;
 80041ae:	1da6      	adds	r6, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80041b0:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80041b2:	77f3      	strb	r3, [r6, #31]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80041b4:	682b      	ldr	r3, [r5, #0]
 80041b6:	4a23      	ldr	r2, [pc, #140]	; (8004244 <HAL_DMA_Init+0xb0>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80041b8:	68e1      	ldr	r1, [r4, #12]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80041ba:	4013      	ands	r3, r2
 80041bc:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80041be:	68a3      	ldr	r3, [r4, #8]
 80041c0:	682a      	ldr	r2, [r5, #0]
 80041c2:	430b      	orrs	r3, r1
 80041c4:	6921      	ldr	r1, [r4, #16]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80041c6:	0020      	movs	r0, r4
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80041c8:	430b      	orrs	r3, r1
 80041ca:	6961      	ldr	r1, [r4, #20]
 80041cc:	430b      	orrs	r3, r1
 80041ce:	69a1      	ldr	r1, [r4, #24]
 80041d0:	430b      	orrs	r3, r1
 80041d2:	69e1      	ldr	r1, [r4, #28]
 80041d4:	430b      	orrs	r3, r1
 80041d6:	6a21      	ldr	r1, [r4, #32]
 80041d8:	430b      	orrs	r3, r1
 80041da:	4313      	orrs	r3, r2
 80041dc:	602b      	str	r3, [r5, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80041de:	f7ff ffbf 	bl	8004160 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80041e2:	2380      	movs	r3, #128	; 0x80
 80041e4:	68a2      	ldr	r2, [r4, #8]
 80041e6:	01db      	lsls	r3, r3, #7
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d101      	bne.n	80041f0 <HAL_DMA_Init+0x5c>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80041ec:	2300      	movs	r3, #0
 80041ee:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80041f0:	233f      	movs	r3, #63	; 0x3f
 80041f2:	6862      	ldr	r2, [r4, #4]
 80041f4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80041f6:	4013      	ands	r3, r2
 80041f8:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041fa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80041fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80041fe:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004200:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004202:	2a03      	cmp	r2, #3
 8004204:	d816      	bhi.n	8004234 <HAL_DMA_Init+0xa0>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004206:	4a10      	ldr	r2, [pc, #64]	; (8004248 <HAL_DMA_Init+0xb4>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004208:	4810      	ldr	r0, [pc, #64]	; (800424c <HAL_DMA_Init+0xb8>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800420a:	1899      	adds	r1, r3, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800420c:	2203      	movs	r2, #3
 800420e:	3b01      	subs	r3, #1
 8004210:	4013      	ands	r3, r2
 8004212:	3a02      	subs	r2, #2
 8004214:	409a      	lsls	r2, r3
 8004216:	65a2      	str	r2, [r4, #88]	; 0x58
 8004218:	0013      	movs	r3, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800421a:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800421c:	0089      	lsls	r1, r1, #2
 800421e:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004220:	6560      	str	r0, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004222:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004224:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004226:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8004228:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800422a:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(hdma);
 800422c:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_READY;
 800422e:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hdma);
 8004230:	77e0      	strb	r0, [r4, #31]
}
 8004232:	bd70      	pop	{r4, r5, r6, pc}
    hdma->DMAmuxRequestGen = 0U;
 8004234:	2300      	movs	r3, #0
 8004236:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8004238:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800423a:	65a3      	str	r3, [r4, #88]	; 0x58
 800423c:	e7f3      	b.n	8004226 <HAL_DMA_Init+0x92>
 800423e:	46c0      	nop			; (mov r8, r8)
 8004240:	bffdfff8 	.word	0xbffdfff8
 8004244:	ffff800f 	.word	0xffff800f
 8004248:	1000823f 	.word	0x1000823f
 800424c:	40020940 	.word	0x40020940

08004250 <HAL_DMA_Start_IT>:
{
 8004250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8004252:	1d45      	adds	r5, r0, #5
{
 8004254:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8004256:	7fee      	ldrb	r6, [r5, #31]
{
 8004258:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 800425a:	2002      	movs	r0, #2
 800425c:	2e01      	cmp	r6, #1
 800425e:	d034      	beq.n	80042ca <HAL_DMA_Start_IT+0x7a>
 8004260:	3801      	subs	r0, #1
 8004262:	77e8      	strb	r0, [r5, #31]
  if (hdma->State == HAL_DMA_STATE_READY)
 8004264:	1da7      	adds	r7, r4, #6
 8004266:	7ffe      	ldrb	r6, [r7, #31]
 8004268:	46b4      	mov	ip, r6
 800426a:	4663      	mov	r3, ip
 800426c:	b2f6      	uxtb	r6, r6
 800426e:	9600      	str	r6, [sp, #0]
 8004270:	2600      	movs	r6, #0
 8004272:	4283      	cmp	r3, r0
 8004274:	d131      	bne.n	80042da <HAL_DMA_Start_IT+0x8a>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004276:	3001      	adds	r0, #1
 8004278:	77f8      	strb	r0, [r7, #31]
    __HAL_DMA_DISABLE(hdma);
 800427a:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800427c:	63e6      	str	r6, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800427e:	6828      	ldr	r0, [r5, #0]
 8004280:	9b00      	ldr	r3, [sp, #0]
 8004282:	4398      	bics	r0, r3
 8004284:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004286:	9b01      	ldr	r3, [sp, #4]
 8004288:	0020      	movs	r0, r4
 800428a:	f7ff ff49 	bl	8004120 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800428e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004290:	6823      	ldr	r3, [r4, #0]
 8004292:	42b2      	cmp	r2, r6
 8004294:	d01a      	beq.n	80042cc <HAL_DMA_Start_IT+0x7c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004296:	220e      	movs	r2, #14
 8004298:	6819      	ldr	r1, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800429a:	430a      	orrs	r2, r1
 800429c:	601a      	str	r2, [r3, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800429e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80042a0:	6811      	ldr	r1, [r2, #0]
 80042a2:	03c9      	lsls	r1, r1, #15
 80042a4:	d504      	bpl.n	80042b0 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80042a6:	2180      	movs	r1, #128	; 0x80
 80042a8:	6810      	ldr	r0, [r2, #0]
 80042aa:	0049      	lsls	r1, r1, #1
 80042ac:	4301      	orrs	r1, r0
 80042ae:	6011      	str	r1, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80042b0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80042b2:	2a00      	cmp	r2, #0
 80042b4:	d004      	beq.n	80042c0 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80042b6:	2180      	movs	r1, #128	; 0x80
 80042b8:	6810      	ldr	r0, [r2, #0]
 80042ba:	0049      	lsls	r1, r1, #1
 80042bc:	4301      	orrs	r1, r0
 80042be:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80042c0:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 80042c2:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80042c4:	6819      	ldr	r1, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	601a      	str	r2, [r3, #0]
}
 80042ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042cc:	2104      	movs	r1, #4
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	438a      	bics	r2, r1
 80042d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80042d4:	6819      	ldr	r1, [r3, #0]
 80042d6:	220a      	movs	r2, #10
 80042d8:	e7df      	b.n	800429a <HAL_DMA_Start_IT+0x4a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80042da:	2380      	movs	r3, #128	; 0x80
 80042dc:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80042de:	77ee      	strb	r6, [r5, #31]
    status = HAL_ERROR;
 80042e0:	e7f3      	b.n	80042ca <HAL_DMA_Start_IT+0x7a>
	...

080042e4 <HAL_DMA_IRQHandler>:
{
 80042e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80042e6:	211c      	movs	r1, #28
 80042e8:	2704      	movs	r7, #4
 80042ea:	6c04      	ldr	r4, [r0, #64]	; 0x40
  uint32_t flag_it = DMA1->ISR;
 80042ec:	4b26      	ldr	r3, [pc, #152]	; (8004388 <HAL_DMA_IRQHandler+0xa4>)
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80042ee:	4021      	ands	r1, r4
 80042f0:	003c      	movs	r4, r7
 80042f2:	408c      	lsls	r4, r1
  uint32_t flag_it = DMA1->ISR;
 80042f4:	681e      	ldr	r6, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80042f6:	6802      	ldr	r2, [r0, #0]
 80042f8:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80042fa:	4226      	tst	r6, r4
 80042fc:	d00f      	beq.n	800431e <HAL_DMA_IRQHandler+0x3a>
 80042fe:	423d      	tst	r5, r7
 8004300:	d00d      	beq.n	800431e <HAL_DMA_IRQHandler+0x3a>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004302:	6811      	ldr	r1, [r2, #0]
 8004304:	0689      	lsls	r1, r1, #26
 8004306:	d402      	bmi.n	800430e <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004308:	6811      	ldr	r1, [r2, #0]
 800430a:	43b9      	bics	r1, r7
 800430c:	6011      	str	r1, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	4314      	orrs	r4, r2
 8004312:	605c      	str	r4, [r3, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8004314:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004316:	2b00      	cmp	r3, #0
 8004318:	d01b      	beq.n	8004352 <HAL_DMA_IRQHandler+0x6e>
      hdma->XferErrorCallback(hdma);
 800431a:	4798      	blx	r3
  return;
 800431c:	e019      	b.n	8004352 <HAL_DMA_IRQHandler+0x6e>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800431e:	2702      	movs	r7, #2
 8004320:	003c      	movs	r4, r7
 8004322:	408c      	lsls	r4, r1
 8004324:	4226      	tst	r6, r4
 8004326:	d015      	beq.n	8004354 <HAL_DMA_IRQHandler+0x70>
 8004328:	423d      	tst	r5, r7
 800432a:	d013      	beq.n	8004354 <HAL_DMA_IRQHandler+0x70>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800432c:	6811      	ldr	r1, [r2, #0]
 800432e:	0689      	lsls	r1, r1, #26
 8004330:	d406      	bmi.n	8004340 <HAL_DMA_IRQHandler+0x5c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004332:	250a      	movs	r5, #10
 8004334:	6811      	ldr	r1, [r2, #0]
 8004336:	43a9      	bics	r1, r5
 8004338:	6011      	str	r1, [r2, #0]
        hdma->State = HAL_DMA_STATE_READY;
 800433a:	2101      	movs	r1, #1
 800433c:	1d82      	adds	r2, r0, #6
 800433e:	77d1      	strb	r1, [r2, #31]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	4314      	orrs	r4, r2
      __HAL_UNLOCK(hdma);
 8004344:	2200      	movs	r2, #0
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004346:	605c      	str	r4, [r3, #4]
      __HAL_UNLOCK(hdma);
 8004348:	1d43      	adds	r3, r0, #5
 800434a:	77da      	strb	r2, [r3, #31]
      if (hdma->XferCpltCallback != NULL)
 800434c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 800434e:	4293      	cmp	r3, r2
 8004350:	d1e3      	bne.n	800431a <HAL_DMA_IRQHandler+0x36>
}
 8004352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004354:	2408      	movs	r4, #8
 8004356:	0027      	movs	r7, r4
 8004358:	408f      	lsls	r7, r1
 800435a:	423e      	tst	r6, r7
 800435c:	d0f9      	beq.n	8004352 <HAL_DMA_IRQHandler+0x6e>
 800435e:	4225      	tst	r5, r4
 8004360:	d0f7      	beq.n	8004352 <HAL_DMA_IRQHandler+0x6e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004362:	250e      	movs	r5, #14
 8004364:	6814      	ldr	r4, [r2, #0]
 8004366:	43ac      	bics	r4, r5
 8004368:	6014      	str	r4, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800436a:	2201      	movs	r2, #1
 800436c:	0015      	movs	r5, r2
 800436e:	408d      	lsls	r5, r1
 8004370:	0029      	movs	r1, r5
 8004372:	685c      	ldr	r4, [r3, #4]
 8004374:	4321      	orrs	r1, r4
 8004376:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004378:	1d83      	adds	r3, r0, #6
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800437a:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800437c:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 800437e:	2200      	movs	r2, #0
 8004380:	1d43      	adds	r3, r0, #5
 8004382:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8004384:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004386:	e7e2      	b.n	800434e <HAL_DMA_IRQHandler+0x6a>
 8004388:	40020000 	.word	0x40020000

0800438c <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 800438c:	2300      	movs	r3, #0
{
 800438e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004390:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004392:	680a      	ldr	r2, [r1, #0]
 8004394:	0014      	movs	r4, r2
 8004396:	40dc      	lsrs	r4, r3
 8004398:	d101      	bne.n	800439e <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  }
}
 800439a:	b005      	add	sp, #20
 800439c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800439e:	2501      	movs	r5, #1
 80043a0:	0014      	movs	r4, r2
 80043a2:	409d      	lsls	r5, r3
 80043a4:	402c      	ands	r4, r5
 80043a6:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 80043a8:	422a      	tst	r2, r5
 80043aa:	d100      	bne.n	80043ae <HAL_GPIO_Init+0x22>
 80043ac:	e08e      	b.n	80044cc <HAL_GPIO_Init+0x140>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043ae:	684a      	ldr	r2, [r1, #4]
 80043b0:	005e      	lsls	r6, r3, #1
 80043b2:	4694      	mov	ip, r2
 80043b4:	2203      	movs	r2, #3
 80043b6:	4664      	mov	r4, ip
 80043b8:	4022      	ands	r2, r4
 80043ba:	2403      	movs	r4, #3
 80043bc:	40b4      	lsls	r4, r6
 80043be:	43e4      	mvns	r4, r4
 80043c0:	9402      	str	r4, [sp, #8]
 80043c2:	1e54      	subs	r4, r2, #1
 80043c4:	2c01      	cmp	r4, #1
 80043c6:	d82a      	bhi.n	800441e <HAL_GPIO_Init+0x92>
        temp = GPIOx->OSPEEDR;
 80043c8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80043ca:	9c02      	ldr	r4, [sp, #8]
 80043cc:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80043ce:	68cc      	ldr	r4, [r1, #12]
 80043d0:	40b4      	lsls	r4, r6
 80043d2:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 80043d4:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80043d6:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043d8:	2701      	movs	r7, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043da:	43ac      	bics	r4, r5
 80043dc:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043de:	4664      	mov	r4, ip
 80043e0:	0924      	lsrs	r4, r4, #4
 80043e2:	403c      	ands	r4, r7
 80043e4:	409c      	lsls	r4, r3
 80043e6:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80043e8:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 80043ea:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80043ec:	9c02      	ldr	r4, [sp, #8]
 80043ee:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80043f0:	688c      	ldr	r4, [r1, #8]
 80043f2:	40b4      	lsls	r4, r6
 80043f4:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 80043f6:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043f8:	2a02      	cmp	r2, #2
 80043fa:	d112      	bne.n	8004422 <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3u];
 80043fc:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80043fe:	2507      	movs	r5, #7
 8004400:	00a4      	lsls	r4, r4, #2
 8004402:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3u];
 8004404:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004406:	9403      	str	r4, [sp, #12]
 8004408:	240f      	movs	r4, #15
 800440a:	401d      	ands	r5, r3
 800440c:	00ad      	lsls	r5, r5, #2
 800440e:	40ac      	lsls	r4, r5
 8004410:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004412:	690c      	ldr	r4, [r1, #16]
 8004414:	40ac      	lsls	r4, r5
 8004416:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3u] = temp;
 8004418:	9c03      	ldr	r4, [sp, #12]
 800441a:	6227      	str	r7, [r4, #32]
 800441c:	e001      	b.n	8004422 <HAL_GPIO_Init+0x96>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800441e:	2a03      	cmp	r2, #3
 8004420:	d1e3      	bne.n	80043ea <HAL_GPIO_Init+0x5e>
      temp = GPIOx->MODER;
 8004422:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004424:	9d02      	ldr	r5, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004426:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004428:	4025      	ands	r5, r4
 800442a:	002c      	movs	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800442c:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 800442e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004430:	24c0      	movs	r4, #192	; 0xc0
 8004432:	4662      	mov	r2, ip
 8004434:	02a4      	lsls	r4, r4, #10
 8004436:	4222      	tst	r2, r4
 8004438:	d048      	beq.n	80044cc <HAL_GPIO_Init+0x140>
        temp = EXTI->EXTICR[position >> 2u];
 800443a:	4a25      	ldr	r2, [pc, #148]	; (80044d0 <HAL_GPIO_Init+0x144>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800443c:	2503      	movs	r5, #3
        temp = EXTI->EXTICR[position >> 2u];
 800443e:	089c      	lsrs	r4, r3, #2
 8004440:	00a4      	lsls	r4, r4, #2
 8004442:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004444:	220f      	movs	r2, #15
 8004446:	401d      	ands	r5, r3
 8004448:	00ed      	lsls	r5, r5, #3
 800444a:	40aa      	lsls	r2, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800444c:	27a0      	movs	r7, #160	; 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 800444e:	6e26      	ldr	r6, [r4, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004450:	05ff      	lsls	r7, r7, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004452:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004454:	2200      	movs	r2, #0
 8004456:	42b8      	cmp	r0, r7
 8004458:	d00c      	beq.n	8004474 <HAL_GPIO_Init+0xe8>
 800445a:	4f1e      	ldr	r7, [pc, #120]	; (80044d4 <HAL_GPIO_Init+0x148>)
 800445c:	3201      	adds	r2, #1
 800445e:	42b8      	cmp	r0, r7
 8004460:	d008      	beq.n	8004474 <HAL_GPIO_Init+0xe8>
 8004462:	4f1d      	ldr	r7, [pc, #116]	; (80044d8 <HAL_GPIO_Init+0x14c>)
 8004464:	3201      	adds	r2, #1
 8004466:	42b8      	cmp	r0, r7
 8004468:	d004      	beq.n	8004474 <HAL_GPIO_Init+0xe8>
 800446a:	4f1c      	ldr	r7, [pc, #112]	; (80044dc <HAL_GPIO_Init+0x150>)
 800446c:	3201      	adds	r2, #1
 800446e:	42b8      	cmp	r0, r7
 8004470:	d000      	beq.n	8004474 <HAL_GPIO_Init+0xe8>
 8004472:	3202      	adds	r2, #2
 8004474:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004476:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004478:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 800447a:	6622      	str	r2, [r4, #96]	; 0x60
        temp = EXTI->IMR1;
 800447c:	4a18      	ldr	r2, [pc, #96]	; (80044e0 <HAL_GPIO_Init+0x154>)
        temp &= ~(iocurrent);
 800447e:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR1;
 8004480:	6fd6      	ldr	r6, [r2, #124]	; 0x7c
          temp |= iocurrent;
 8004482:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(iocurrent);
 8004484:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8004486:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004488:	03ff      	lsls	r7, r7, #15
 800448a:	d401      	bmi.n	8004490 <HAL_GPIO_Init+0x104>
        temp &= ~(iocurrent);
 800448c:	0035      	movs	r5, r6
 800448e:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004490:	4667      	mov	r7, ip
        EXTI->IMR1 = temp;
 8004492:	67d5      	str	r5, [r2, #124]	; 0x7c
        temp = EXTI->EMR1;
 8004494:	4d13      	ldr	r5, [pc, #76]	; (80044e4 <HAL_GPIO_Init+0x158>)
          temp |= iocurrent;
 8004496:	9e01      	ldr	r6, [sp, #4]
        temp = EXTI->EMR1;
 8004498:	6fea      	ldr	r2, [r5, #124]	; 0x7c
          temp |= iocurrent;
 800449a:	4316      	orrs	r6, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800449c:	03bf      	lsls	r7, r7, #14
 800449e:	d401      	bmi.n	80044a4 <HAL_GPIO_Init+0x118>
        temp &= ~(iocurrent);
 80044a0:	4022      	ands	r2, r4
 80044a2:	0016      	movs	r6, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80044a4:	4667      	mov	r7, ip
        EXTI->EMR1 = temp;
 80044a6:	4a0a      	ldr	r2, [pc, #40]	; (80044d0 <HAL_GPIO_Init+0x144>)
 80044a8:	67ee      	str	r6, [r5, #124]	; 0x7c
        temp = EXTI->RTSR1;
 80044aa:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 80044ac:	9d01      	ldr	r5, [sp, #4]
 80044ae:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80044b0:	02ff      	lsls	r7, r7, #11
 80044b2:	d401      	bmi.n	80044b8 <HAL_GPIO_Init+0x12c>
        temp &= ~(iocurrent);
 80044b4:	0035      	movs	r5, r6
 80044b6:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80044b8:	4667      	mov	r7, ip
        EXTI->RTSR1 = temp;
 80044ba:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 80044bc:	6855      	ldr	r5, [r2, #4]
          temp |= iocurrent;
 80044be:	9e01      	ldr	r6, [sp, #4]
 80044c0:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80044c2:	02bf      	lsls	r7, r7, #10
 80044c4:	d401      	bmi.n	80044ca <HAL_GPIO_Init+0x13e>
        temp &= ~(iocurrent);
 80044c6:	4025      	ands	r5, r4
 80044c8:	002e      	movs	r6, r5
        EXTI->FTSR1 = temp;
 80044ca:	6056      	str	r6, [r2, #4]
    position++;
 80044cc:	3301      	adds	r3, #1
 80044ce:	e760      	b.n	8004392 <HAL_GPIO_Init+0x6>
 80044d0:	40021800 	.word	0x40021800
 80044d4:	50000400 	.word	0x50000400
 80044d8:	50000800 	.word	0x50000800
 80044dc:	50000c00 	.word	0x50000c00
 80044e0:	40021804 	.word	0x40021804
 80044e4:	40021808 	.word	0x40021808

080044e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044e8:	2a00      	cmp	r2, #0
 80044ea:	d001      	beq.n	80044f0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044ec:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044ee:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044f0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80044f2:	e7fc      	b.n	80044ee <HAL_GPIO_WritePin+0x6>

080044f4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80044f4:	6803      	ldr	r3, [r0, #0]
 80044f6:	699a      	ldr	r2, [r3, #24]
 80044f8:	0792      	lsls	r2, r2, #30
 80044fa:	d501      	bpl.n	8004500 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80044fc:	2200      	movs	r2, #0
 80044fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004500:	2201      	movs	r2, #1
 8004502:	6999      	ldr	r1, [r3, #24]
 8004504:	4211      	tst	r1, r2
 8004506:	d102      	bne.n	800450e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004508:	6999      	ldr	r1, [r3, #24]
 800450a:	430a      	orrs	r2, r1
 800450c:	619a      	str	r2, [r3, #24]
  }
}
 800450e:	4770      	bx	lr

08004510 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004510:	b530      	push	{r4, r5, lr}
 8004512:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004514:	0412      	lsls	r2, r2, #16
 8004516:	6800      	ldr	r0, [r0, #0]
 8004518:	4322      	orrs	r2, r4
 800451a:	431a      	orrs	r2, r3
 800451c:	4b05      	ldr	r3, [pc, #20]	; (8004534 <I2C_TransferConfig+0x24>)
 800451e:	6845      	ldr	r5, [r0, #4]
 8004520:	0589      	lsls	r1, r1, #22
 8004522:	0d64      	lsrs	r4, r4, #21
 8004524:	0d89      	lsrs	r1, r1, #22
 8004526:	431c      	orrs	r4, r3
 8004528:	43a5      	bics	r5, r4
 800452a:	430a      	orrs	r2, r1
 800452c:	432a      	orrs	r2, r5
 800452e:	6042      	str	r2, [r0, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004530:	bd30      	pop	{r4, r5, pc}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	03ff63ff 	.word	0x03ff63ff

08004538 <I2C_IsAcknowledgeFailed>:
{
 8004538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800453a:	6803      	ldr	r3, [r0, #0]
{
 800453c:	0016      	movs	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800453e:	699a      	ldr	r2, [r3, #24]
{
 8004540:	0004      	movs	r4, r0
 8004542:	000d      	movs	r5, r1
  return HAL_OK;
 8004544:	2000      	movs	r0, #0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004546:	06d2      	lsls	r2, r2, #27
 8004548:	d536      	bpl.n	80045b8 <I2C_IsAcknowledgeFailed+0x80>
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	0192      	lsls	r2, r2, #6
 800454e:	d404      	bmi.n	800455a <I2C_IsAcknowledgeFailed+0x22>
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004550:	2280      	movs	r2, #128	; 0x80
 8004552:	6859      	ldr	r1, [r3, #4]
 8004554:	01d2      	lsls	r2, r2, #7
 8004556:	430a      	orrs	r2, r1
 8004558:	605a      	str	r2, [r3, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800455a:	2720      	movs	r7, #32
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	699a      	ldr	r2, [r3, #24]
 8004560:	423a      	tst	r2, r7
 8004562:	d012      	beq.n	800458a <I2C_IsAcknowledgeFailed+0x52>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004564:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 8004566:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004568:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800456a:	61df      	str	r7, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800456c:	f7ff ffc2 	bl	80044f4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8004570:	6822      	ldr	r2, [r4, #0]
 8004572:	4912      	ldr	r1, [pc, #72]	; (80045bc <I2C_IsAcknowledgeFailed+0x84>)
 8004574:	6853      	ldr	r3, [r2, #4]
 8004576:	400b      	ands	r3, r1
 8004578:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800457a:	2304      	movs	r3, #4
 800457c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800457e:	4313      	orrs	r3, r2
 8004580:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004582:	0023      	movs	r3, r4
 8004584:	3341      	adds	r3, #65	; 0x41
 8004586:	701f      	strb	r7, [r3, #0]
 8004588:	e00f      	b.n	80045aa <I2C_IsAcknowledgeFailed+0x72>
      if (Timeout != HAL_MAX_DELAY)
 800458a:	1c6a      	adds	r2, r5, #1
 800458c:	d0e7      	beq.n	800455e <I2C_IsAcknowledgeFailed+0x26>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458e:	f7ff f9f5 	bl	800397c <HAL_GetTick>
 8004592:	1b80      	subs	r0, r0, r6
 8004594:	4285      	cmp	r5, r0
 8004596:	d301      	bcc.n	800459c <I2C_IsAcknowledgeFailed+0x64>
 8004598:	2d00      	cmp	r5, #0
 800459a:	d1df      	bne.n	800455c <I2C_IsAcknowledgeFailed+0x24>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800459c:	2220      	movs	r2, #32
 800459e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80045a0:	4313      	orrs	r3, r2
 80045a2:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80045a4:	0023      	movs	r3, r4
 80045a6:	3341      	adds	r3, #65	; 0x41
 80045a8:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045aa:	0022      	movs	r2, r4
 80045ac:	2300      	movs	r3, #0
    return HAL_ERROR;
 80045ae:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b0:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 80045b2:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b4:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80045b6:	7023      	strb	r3, [r4, #0]
}
 80045b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	fe00e800 	.word	0xfe00e800

080045c0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80045c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c2:	0004      	movs	r4, r0
 80045c4:	000d      	movs	r5, r1
 80045c6:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045c8:	2702      	movs	r7, #2
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	423b      	tst	r3, r7
 80045d0:	d001      	beq.n	80045d6 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 80045d2:	2000      	movs	r0, #0
}
 80045d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80045d6:	0032      	movs	r2, r6
 80045d8:	0029      	movs	r1, r5
 80045da:	0020      	movs	r0, r4
 80045dc:	f7ff ffac 	bl	8004538 <I2C_IsAcknowledgeFailed>
 80045e0:	2800      	cmp	r0, #0
 80045e2:	d115      	bne.n	8004610 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80045e4:	1c6b      	adds	r3, r5, #1
 80045e6:	d0f0      	beq.n	80045ca <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e8:	f7ff f9c8 	bl	800397c <HAL_GetTick>
 80045ec:	1b80      	subs	r0, r0, r6
 80045ee:	42a8      	cmp	r0, r5
 80045f0:	d801      	bhi.n	80045f6 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 80045f2:	2d00      	cmp	r5, #0
 80045f4:	d1e9      	bne.n	80045ca <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045f6:	2220      	movs	r2, #32
 80045f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80045fa:	4313      	orrs	r3, r2
 80045fc:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045fe:	0023      	movs	r3, r4
 8004600:	3341      	adds	r3, #65	; 0x41
 8004602:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004604:	0022      	movs	r2, r4
 8004606:	2300      	movs	r3, #0
 8004608:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 800460a:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800460c:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800460e:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8004610:	2001      	movs	r0, #1
 8004612:	e7df      	b.n	80045d4 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08004614 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8004614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004616:	0004      	movs	r4, r0
 8004618:	000d      	movs	r5, r1
 800461a:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800461c:	2720      	movs	r7, #32
 800461e:	6823      	ldr	r3, [r4, #0]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	423b      	tst	r3, r7
 8004624:	d001      	beq.n	800462a <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8004626:	2000      	movs	r0, #0
}
 8004628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800462a:	0032      	movs	r2, r6
 800462c:	0029      	movs	r1, r5
 800462e:	0020      	movs	r0, r4
 8004630:	f7ff ff82 	bl	8004538 <I2C_IsAcknowledgeFailed>
 8004634:	2800      	cmp	r0, #0
 8004636:	d113      	bne.n	8004660 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004638:	f7ff f9a0 	bl	800397c <HAL_GetTick>
 800463c:	1b80      	subs	r0, r0, r6
 800463e:	42a8      	cmp	r0, r5
 8004640:	d801      	bhi.n	8004646 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8004642:	2d00      	cmp	r5, #0
 8004644:	d1eb      	bne.n	800461e <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004646:	2220      	movs	r2, #32
 8004648:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800464a:	4313      	orrs	r3, r2
 800464c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800464e:	0023      	movs	r3, r4
 8004650:	3341      	adds	r3, #65	; 0x41
 8004652:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004654:	0022      	movs	r2, r4
 8004656:	2300      	movs	r3, #0
 8004658:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 800465a:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800465c:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800465e:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8004660:	2001      	movs	r0, #1
 8004662:	e7e1      	b.n	8004628 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

08004664 <I2C_WaitOnFlagUntilTimeout>:
{
 8004664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004666:	0004      	movs	r4, r0
 8004668:	000e      	movs	r6, r1
 800466a:	0017      	movs	r7, r2
 800466c:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800466e:	6822      	ldr	r2, [r4, #0]
 8004670:	6993      	ldr	r3, [r2, #24]
 8004672:	4033      	ands	r3, r6
 8004674:	1b9b      	subs	r3, r3, r6
 8004676:	4259      	negs	r1, r3
 8004678:	414b      	adcs	r3, r1
 800467a:	42bb      	cmp	r3, r7
 800467c:	d001      	beq.n	8004682 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800467e:	2000      	movs	r0, #0
 8004680:	e017      	b.n	80046b2 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8004682:	1c6b      	adds	r3, r5, #1
 8004684:	d0f4      	beq.n	8004670 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004686:	f7ff f979 	bl	800397c <HAL_GetTick>
 800468a:	9b06      	ldr	r3, [sp, #24]
 800468c:	1ac0      	subs	r0, r0, r3
 800468e:	42a8      	cmp	r0, r5
 8004690:	d801      	bhi.n	8004696 <I2C_WaitOnFlagUntilTimeout+0x32>
 8004692:	2d00      	cmp	r5, #0
 8004694:	d1eb      	bne.n	800466e <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004696:	2220      	movs	r2, #32
 8004698:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800469a:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800469c:	4313      	orrs	r3, r2
 800469e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046a0:	0023      	movs	r3, r4
 80046a2:	3341      	adds	r3, #65	; 0x41
 80046a4:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a6:	0022      	movs	r2, r4
 80046a8:	2300      	movs	r3, #0
 80046aa:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 80046ac:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ae:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 80046b0:	7023      	strb	r3, [r4, #0]
}
 80046b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080046b4 <I2C_RequestMemoryWrite>:
{
 80046b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046b6:	0014      	movs	r4, r2
 80046b8:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	4b16      	ldr	r3, [pc, #88]	; (8004718 <I2C_RequestMemoryWrite+0x64>)
{
 80046be:	0005      	movs	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	2380      	movs	r3, #128	; 0x80
{
 80046c4:	9f08      	ldr	r7, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80046c6:	045b      	lsls	r3, r3, #17
 80046c8:	f7ff ff22 	bl	8004510 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046cc:	0039      	movs	r1, r7
 80046ce:	0028      	movs	r0, r5
 80046d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046d2:	f7ff ff75 	bl	80045c0 <I2C_WaitOnTXISFlagUntilTimeout>
 80046d6:	2800      	cmp	r0, #0
 80046d8:	d001      	beq.n	80046de <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 80046da:	2001      	movs	r0, #1
}
 80046dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046de:	682b      	ldr	r3, [r5, #0]
 80046e0:	2e01      	cmp	r6, #1
 80046e2:	d10d      	bne.n	8004700 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046e4:	b2e4      	uxtb	r4, r4
 80046e6:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80046e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046ea:	2200      	movs	r2, #0
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	2180      	movs	r1, #128	; 0x80
 80046f0:	003b      	movs	r3, r7
 80046f2:	0028      	movs	r0, r5
 80046f4:	f7ff ffb6 	bl	8004664 <I2C_WaitOnFlagUntilTimeout>
 80046f8:	1e43      	subs	r3, r0, #1
 80046fa:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 80046fc:	b2c0      	uxtb	r0, r0
 80046fe:	e7ed      	b.n	80046dc <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004700:	0a22      	lsrs	r2, r4, #8
 8004702:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004704:	0039      	movs	r1, r7
 8004706:	0028      	movs	r0, r5
 8004708:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800470a:	f7ff ff59 	bl	80045c0 <I2C_WaitOnTXISFlagUntilTimeout>
 800470e:	2800      	cmp	r0, #0
 8004710:	d1e3      	bne.n	80046da <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004712:	682b      	ldr	r3, [r5, #0]
 8004714:	e7e6      	b.n	80046e4 <I2C_RequestMemoryWrite+0x30>
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	80002000 	.word	0x80002000

0800471c <HAL_I2C_Init>:
{
 800471c:	b570      	push	{r4, r5, r6, lr}
 800471e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004720:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8004722:	2c00      	cmp	r4, #0
 8004724:	d03f      	beq.n	80047a6 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004726:	0025      	movs	r5, r4
 8004728:	3541      	adds	r5, #65	; 0x41
 800472a:	782b      	ldrb	r3, [r5, #0]
 800472c:	b2da      	uxtb	r2, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d105      	bne.n	800473e <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8004732:	0023      	movs	r3, r4
 8004734:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 8004736:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8004738:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 800473a:	f7ff f867 	bl	800380c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800473e:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8004740:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004742:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8004744:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004746:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68a6      	ldr	r6, [r4, #8]
 800474c:	438a      	bics	r2, r1
 800474e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004750:	6861      	ldr	r1, [r4, #4]
 8004752:	4a1a      	ldr	r2, [pc, #104]	; (80047bc <HAL_I2C_Init+0xa0>)
 8004754:	400a      	ands	r2, r1
 8004756:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004758:	6899      	ldr	r1, [r3, #8]
 800475a:	4a19      	ldr	r2, [pc, #100]	; (80047c0 <HAL_I2C_Init+0xa4>)
 800475c:	4011      	ands	r1, r2
 800475e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004760:	2801      	cmp	r0, #1
 8004762:	d121      	bne.n	80047a8 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004764:	2180      	movs	r1, #128	; 0x80
 8004766:	0209      	lsls	r1, r1, #8
 8004768:	4331      	orrs	r1, r6
 800476a:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800476c:	6858      	ldr	r0, [r3, #4]
 800476e:	4915      	ldr	r1, [pc, #84]	; (80047c4 <HAL_I2C_Init+0xa8>)
 8004770:	4301      	orrs	r1, r0
 8004772:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004774:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004776:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004778:	400a      	ands	r2, r1
 800477a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800477c:	6961      	ldr	r1, [r4, #20]
 800477e:	6922      	ldr	r2, [r4, #16]
 8004780:	430a      	orrs	r2, r1
                             (hi2c->Init.OwnAddress2Masks << 8));
 8004782:	69a1      	ldr	r1, [r4, #24]
 8004784:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004786:	430a      	orrs	r2, r1
 8004788:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800478a:	6a21      	ldr	r1, [r4, #32]
 800478c:	69e2      	ldr	r2, [r4, #28]
 800478e:	430a      	orrs	r2, r1
 8004790:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004792:	2201      	movs	r2, #1
 8004794:	6819      	ldr	r1, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800479a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800479c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800479e:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80047a0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a2:	3442      	adds	r4, #66	; 0x42
 80047a4:	7020      	strb	r0, [r4, #0]
}
 80047a6:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047a8:	2184      	movs	r1, #132	; 0x84
 80047aa:	0209      	lsls	r1, r1, #8
 80047ac:	4331      	orrs	r1, r6
 80047ae:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047b0:	2802      	cmp	r0, #2
 80047b2:	d1db      	bne.n	800476c <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80047b4:	2180      	movs	r1, #128	; 0x80
 80047b6:	0109      	lsls	r1, r1, #4
 80047b8:	6059      	str	r1, [r3, #4]
 80047ba:	e7d7      	b.n	800476c <HAL_I2C_Init+0x50>
 80047bc:	f0ffffff 	.word	0xf0ffffff
 80047c0:	ffff7fff 	.word	0xffff7fff
 80047c4:	02008000 	.word	0x02008000

080047c8 <HAL_I2C_Mem_Write>:
{
 80047c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ca:	b089      	sub	sp, #36	; 0x24
 80047cc:	9307      	str	r3, [sp, #28]
 80047ce:	ab0e      	add	r3, sp, #56	; 0x38
 80047d0:	9206      	str	r2, [sp, #24]
 80047d2:	cb04      	ldmia	r3!, {r2}
 80047d4:	0004      	movs	r4, r0
 80047d6:	881b      	ldrh	r3, [r3, #0]
 80047d8:	9203      	str	r2, [sp, #12]
 80047da:	9304      	str	r3, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80047dc:	0003      	movs	r3, r0
 80047de:	3341      	adds	r3, #65	; 0x41
 80047e0:	9305      	str	r3, [sp, #20]
 80047e2:	781b      	ldrb	r3, [r3, #0]
{
 80047e4:	000f      	movs	r7, r1
    return HAL_BUSY;
 80047e6:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80047e8:	2b20      	cmp	r3, #32
 80047ea:	d108      	bne.n	80047fe <HAL_I2C_Mem_Write+0x36>
    if ((pData == NULL) || (Size == 0U))
 80047ec:	2a00      	cmp	r2, #0
 80047ee:	d002      	beq.n	80047f6 <HAL_I2C_Mem_Write+0x2e>
 80047f0:	9b04      	ldr	r3, [sp, #16]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d105      	bne.n	8004802 <HAL_I2C_Mem_Write+0x3a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80047f6:	2380      	movs	r3, #128	; 0x80
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80047fc:	2001      	movs	r0, #1
}
 80047fe:	b009      	add	sp, #36	; 0x24
 8004800:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8004802:	0023      	movs	r3, r4
 8004804:	3340      	adds	r3, #64	; 0x40
 8004806:	9302      	str	r3, [sp, #8]
 8004808:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 800480a:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 800480c:	2b01      	cmp	r3, #1
 800480e:	d0f6      	beq.n	80047fe <HAL_I2C_Mem_Write+0x36>
 8004810:	2201      	movs	r2, #1
 8004812:	9b02      	ldr	r3, [sp, #8]
 8004814:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004816:	f7ff f8b1 	bl	800397c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800481a:	2180      	movs	r1, #128	; 0x80
 800481c:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800481e:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004820:	2319      	movs	r3, #25
 8004822:	2201      	movs	r2, #1
 8004824:	0020      	movs	r0, r4
 8004826:	0209      	lsls	r1, r1, #8
 8004828:	f7ff ff1c 	bl	8004664 <I2C_WaitOnFlagUntilTimeout>
 800482c:	1e06      	subs	r6, r0, #0
 800482e:	d1e5      	bne.n	80047fc <HAL_I2C_Mem_Write+0x34>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004830:	2321      	movs	r3, #33	; 0x21
 8004832:	9a05      	ldr	r2, [sp, #20]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004834:	0039      	movs	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004836:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004838:	0023      	movs	r3, r4
 800483a:	3342      	adds	r3, #66	; 0x42
 800483c:	9305      	str	r3, [sp, #20]
 800483e:	2340      	movs	r3, #64	; 0x40
 8004840:	9a05      	ldr	r2, [sp, #20]
 8004842:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 8004844:	9b03      	ldr	r3, [sp, #12]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004846:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004848:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800484a:	9b04      	ldr	r3, [sp, #16]
    hi2c->XferISR   = NULL;
 800484c:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800484e:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004850:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004852:	0020      	movs	r0, r4
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	9a06      	ldr	r2, [sp, #24]
 8004858:	9b07      	ldr	r3, [sp, #28]
 800485a:	9501      	str	r5, [sp, #4]
 800485c:	f7ff ff2a 	bl	80046b4 <I2C_RequestMemoryWrite>
 8004860:	2800      	cmp	r0, #0
 8004862:	d002      	beq.n	800486a <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8004864:	9b02      	ldr	r3, [sp, #8]
 8004866:	701e      	strb	r6, [r3, #0]
 8004868:	e7c8      	b.n	80047fc <HAL_I2C_Mem_Write+0x34>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800486a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800486c:	2bff      	cmp	r3, #255	; 0xff
 800486e:	d954      	bls.n	800491a <HAL_I2C_Mem_Write+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004870:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004872:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004874:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004876:	045b      	lsls	r3, r3, #17
 8004878:	9000      	str	r0, [sp, #0]
 800487a:	0039      	movs	r1, r7
 800487c:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800487e:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004880:	f7ff fe46 	bl	8004510 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004884:	04b6      	lsls	r6, r6, #18
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004886:	002a      	movs	r2, r5
 8004888:	0020      	movs	r0, r4
 800488a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800488c:	f7ff fe98 	bl	80045c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004890:	2800      	cmp	r0, #0
 8004892:	d1b3      	bne.n	80047fc <HAL_I2C_Mem_Write+0x34>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004894:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004896:	6822      	ldr	r2, [r4, #0]
 8004898:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 800489a:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800489c:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800489e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80048a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80048a2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80048aa:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80048ae:	b292      	uxth	r2, r2
 80048b0:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d017      	beq.n	80048e6 <HAL_I2C_Mem_Write+0x11e>
 80048b6:	2a00      	cmp	r2, #0
 80048b8:	d115      	bne.n	80048e6 <HAL_I2C_Mem_Write+0x11e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048ba:	2180      	movs	r1, #128	; 0x80
 80048bc:	0020      	movs	r0, r4
 80048be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80048c0:	9500      	str	r5, [sp, #0]
 80048c2:	f7ff fecf 	bl	8004664 <I2C_WaitOnFlagUntilTimeout>
 80048c6:	2800      	cmp	r0, #0
 80048c8:	d000      	beq.n	80048cc <HAL_I2C_Mem_Write+0x104>
 80048ca:	e797      	b.n	80047fc <HAL_I2C_Mem_Write+0x34>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80048ce:	2bff      	cmp	r3, #255	; 0xff
 80048d0:	d92b      	bls.n	800492a <HAL_I2C_Mem_Write+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80048d2:	23ff      	movs	r3, #255	; 0xff
 80048d4:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048d6:	2380      	movs	r3, #128	; 0x80
 80048d8:	22ff      	movs	r2, #255	; 0xff
 80048da:	9000      	str	r0, [sp, #0]
 80048dc:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048de:	0039      	movs	r1, r7
 80048e0:	0020      	movs	r0, r4
 80048e2:	f7ff fe15 	bl	8004510 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80048e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1cc      	bne.n	8004886 <HAL_I2C_Mem_Write+0xbe>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048ec:	002a      	movs	r2, r5
 80048ee:	0020      	movs	r0, r4
 80048f0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80048f2:	f7ff fe8f 	bl	8004614 <I2C_WaitOnSTOPFlagUntilTimeout>
 80048f6:	2800      	cmp	r0, #0
 80048f8:	d000      	beq.n	80048fc <HAL_I2C_Mem_Write+0x134>
 80048fa:	e77f      	b.n	80047fc <HAL_I2C_Mem_Write+0x34>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048fc:	2120      	movs	r1, #32
 80048fe:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8004900:	4d0d      	ldr	r5, [pc, #52]	; (8004938 <HAL_I2C_Mem_Write+0x170>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004902:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	402a      	ands	r2, r5
 8004908:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800490a:	0023      	movs	r3, r4
 800490c:	3341      	adds	r3, #65	; 0x41
 800490e:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004910:	9b05      	ldr	r3, [sp, #20]
    __HAL_UNLOCK(hi2c);
 8004912:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004914:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8004916:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8004918:	e771      	b.n	80047fe <HAL_I2C_Mem_Write+0x36>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800491a:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 800491c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800491e:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 8004920:	b292      	uxth	r2, r2
 8004922:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004924:	b2d2      	uxtb	r2, r2
 8004926:	9000      	str	r0, [sp, #0]
 8004928:	e7a7      	b.n	800487a <HAL_I2C_Mem_Write+0xb2>
          hi2c->XferSize = hi2c->XferCount;
 800492a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800492c:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 800492e:	b292      	uxth	r2, r2
 8004930:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	9000      	str	r0, [sp, #0]
 8004936:	e7d2      	b.n	80048de <HAL_I2C_Mem_Write+0x116>
 8004938:	fe00e800 	.word	0xfe00e800

0800493c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800493c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800493e:	0004      	movs	r4, r0
 8004940:	3441      	adds	r4, #65	; 0x41
 8004942:	7822      	ldrb	r2, [r4, #0]
{
 8004944:	0003      	movs	r3, r0
 8004946:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004948:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800494a:	b2d6      	uxtb	r6, r2
 800494c:	2a20      	cmp	r2, #32
 800494e:	d118      	bne.n	8004982 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8004950:	001d      	movs	r5, r3
 8004952:	3540      	adds	r5, #64	; 0x40
 8004954:	782a      	ldrb	r2, [r5, #0]
 8004956:	2a01      	cmp	r2, #1
 8004958:	d013      	beq.n	8004982 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 800495a:	2224      	movs	r2, #36	; 0x24
 800495c:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3a23      	subs	r2, #35	; 0x23
 8004962:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004964:	4807      	ldr	r0, [pc, #28]	; (8004984 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8004966:	4391      	bics	r1, r2
 8004968:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800496a:	6819      	ldr	r1, [r3, #0]
 800496c:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 800496e:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004970:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8004972:	6819      	ldr	r1, [r3, #0]
 8004974:	4339      	orrs	r1, r7
 8004976:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8004978:	6819      	ldr	r1, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800497e:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8004980:	7028      	strb	r0, [r5, #0]
  }
}
 8004982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004984:	ffffefff 	.word	0xffffefff

08004988 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004988:	0002      	movs	r2, r0
{
 800498a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800498c:	3241      	adds	r2, #65	; 0x41
 800498e:	7814      	ldrb	r4, [r2, #0]
{
 8004990:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004992:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004994:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004996:	2c20      	cmp	r4, #32
 8004998:	d117      	bne.n	80049ca <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 800499a:	001c      	movs	r4, r3
 800499c:	3440      	adds	r4, #64	; 0x40
 800499e:	7826      	ldrb	r6, [r4, #0]
 80049a0:	2e01      	cmp	r6, #1
 80049a2:	d012      	beq.n	80049ca <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 80049a4:	3022      	adds	r0, #34	; 0x22
 80049a6:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	3823      	subs	r0, #35	; 0x23
 80049ac:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80049ae:	4f07      	ldr	r7, [pc, #28]	; (80049cc <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 80049b0:	4386      	bics	r6, r0
 80049b2:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80049b4:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 80049b6:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80049b8:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80049ba:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80049bc:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80049be:	6819      	ldr	r1, [r3, #0]
 80049c0:	4308      	orrs	r0, r1
 80049c2:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80049c4:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80049c6:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80049c8:	7020      	strb	r0, [r4, #0]
  }
}
 80049ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049cc:	fffff0ff 	.word	0xfffff0ff

080049d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80049d0:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80049d2:	4c11      	ldr	r4, [pc, #68]	; (8004a18 <HAL_PWREx_ControlVoltageScaling+0x48>)
 80049d4:	4911      	ldr	r1, [pc, #68]	; (8004a1c <HAL_PWREx_ControlVoltageScaling+0x4c>)
 80049d6:	6823      	ldr	r3, [r4, #0]
{
 80049d8:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80049da:	400b      	ands	r3, r1
 80049dc:	4303      	orrs	r3, r0
 80049de:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049e0:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80049e2:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d10e      	bne.n	8004a08 <HAL_PWREx_ControlVoltageScaling+0x38>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80049ea:	4b0d      	ldr	r3, [pc, #52]	; (8004a20 <HAL_PWREx_ControlVoltageScaling+0x50>)
 80049ec:	490d      	ldr	r1, [pc, #52]	; (8004a24 <HAL_PWREx_ControlVoltageScaling+0x54>)
 80049ee:	6818      	ldr	r0, [r3, #0]
 80049f0:	2306      	movs	r3, #6
 80049f2:	4358      	muls	r0, r3
 80049f4:	f7fb fb90 	bl	8000118 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049f8:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80049fa:	1c43      	adds	r3, r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049fc:	00d2      	lsls	r2, r2, #3
 80049fe:	6961      	ldr	r1, [r4, #20]
 8004a00:	0008      	movs	r0, r1
 8004a02:	4010      	ands	r0, r2
 8004a04:	4211      	tst	r1, r2
 8004a06:	d100      	bne.n	8004a0a <HAL_PWREx_ControlVoltageScaling+0x3a>
}
 8004a08:	bd10      	pop	{r4, pc}
      if (wait_loop_index != 0U)
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <HAL_PWREx_ControlVoltageScaling+0x42>
        wait_loop_index--;
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	e7f5      	b.n	80049fe <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 8004a12:	2003      	movs	r0, #3
 8004a14:	e7f8      	b.n	8004a08 <HAL_PWREx_ControlVoltageScaling+0x38>
 8004a16:	46c0      	nop			; (mov r8, r8)
 8004a18:	40007000 	.word	0x40007000
 8004a1c:	fffff9ff 	.word	0xfffff9ff
 8004a20:	20000000 	.word	0x20000000
 8004a24:	000f4240 	.word	0x000f4240

08004a28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a2a:	0004      	movs	r4, r0
 8004a2c:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a2e:	2800      	cmp	r0, #0
 8004a30:	d023      	beq.n	8004a7a <HAL_RCC_OscConfig+0x52>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a32:	6803      	ldr	r3, [r0, #0]
 8004a34:	07db      	lsls	r3, r3, #31
 8004a36:	d410      	bmi.n	8004a5a <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	079b      	lsls	r3, r3, #30
 8004a3c:	d45e      	bmi.n	8004afc <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	071b      	lsls	r3, r3, #28
 8004a42:	d500      	bpl.n	8004a46 <HAL_RCC_OscConfig+0x1e>
 8004a44:	e0c3      	b.n	8004bce <HAL_RCC_OscConfig+0x1a6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	075b      	lsls	r3, r3, #29
 8004a4a:	d500      	bpl.n	8004a4e <HAL_RCC_OscConfig+0x26>
 8004a4c:	e0f5      	b.n	8004c3a <HAL_RCC_OscConfig+0x212>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a4e:	69e2      	ldr	r2, [r4, #28]
 8004a50:	2a00      	cmp	r2, #0
 8004a52:	d000      	beq.n	8004a56 <HAL_RCC_OscConfig+0x2e>
 8004a54:	e17c      	b.n	8004d50 <HAL_RCC_OscConfig+0x328>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004a56:	2000      	movs	r0, #0
 8004a58:	e029      	b.n	8004aae <HAL_RCC_OscConfig+0x86>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a5a:	2238      	movs	r2, #56	; 0x38
 8004a5c:	4db0      	ldr	r5, [pc, #704]	; (8004d20 <HAL_RCC_OscConfig+0x2f8>)
 8004a5e:	68ab      	ldr	r3, [r5, #8]
 8004a60:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a62:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004a64:	2b10      	cmp	r3, #16
 8004a66:	d10a      	bne.n	8004a7e <HAL_RCC_OscConfig+0x56>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a68:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004a6a:	0793      	lsls	r3, r2, #30
 8004a6c:	d109      	bne.n	8004a82 <HAL_RCC_OscConfig+0x5a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a6e:	682b      	ldr	r3, [r5, #0]
 8004a70:	039b      	lsls	r3, r3, #14
 8004a72:	d5e1      	bpl.n	8004a38 <HAL_RCC_OscConfig+0x10>
 8004a74:	6863      	ldr	r3, [r4, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1de      	bne.n	8004a38 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8004a7a:	2001      	movs	r0, #1
 8004a7c:	e017      	b.n	8004aae <HAL_RCC_OscConfig+0x86>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004a7e:	2b08      	cmp	r3, #8
 8004a80:	d0f5      	beq.n	8004a6e <HAL_RCC_OscConfig+0x46>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a82:	2280      	movs	r2, #128	; 0x80
 8004a84:	6863      	ldr	r3, [r4, #4]
 8004a86:	0252      	lsls	r2, r2, #9
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d112      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x8a>
 8004a8c:	682a      	ldr	r2, [r5, #0]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004a92:	f7fe ff73 	bl	800397c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a96:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8004a98:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a9a:	02bf      	lsls	r7, r7, #10
 8004a9c:	682b      	ldr	r3, [r5, #0]
 8004a9e:	423b      	tst	r3, r7
 8004aa0:	d1ca      	bne.n	8004a38 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aa2:	f7fe ff6b 	bl	800397c <HAL_GetTick>
 8004aa6:	1b80      	subs	r0, r0, r6
 8004aa8:	2864      	cmp	r0, #100	; 0x64
 8004aaa:	d9f7      	bls.n	8004a9c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8004aac:	2003      	movs	r0, #3
}
 8004aae:	b005      	add	sp, #20
 8004ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ab2:	21a0      	movs	r1, #160	; 0xa0
 8004ab4:	02c9      	lsls	r1, r1, #11
 8004ab6:	428b      	cmp	r3, r1
 8004ab8:	d108      	bne.n	8004acc <HAL_RCC_OscConfig+0xa4>
 8004aba:	2380      	movs	r3, #128	; 0x80
 8004abc:	6829      	ldr	r1, [r5, #0]
 8004abe:	02db      	lsls	r3, r3, #11
 8004ac0:	430b      	orrs	r3, r1
 8004ac2:	602b      	str	r3, [r5, #0]
 8004ac4:	682b      	ldr	r3, [r5, #0]
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004aca:	e7e2      	b.n	8004a92 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004acc:	682a      	ldr	r2, [r5, #0]
 8004ace:	4995      	ldr	r1, [pc, #596]	; (8004d24 <HAL_RCC_OscConfig+0x2fc>)
 8004ad0:	400a      	ands	r2, r1
 8004ad2:	602a      	str	r2, [r5, #0]
 8004ad4:	682a      	ldr	r2, [r5, #0]
 8004ad6:	4994      	ldr	r1, [pc, #592]	; (8004d28 <HAL_RCC_OscConfig+0x300>)
 8004ad8:	400a      	ands	r2, r1
 8004ada:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1d8      	bne.n	8004a92 <HAL_RCC_OscConfig+0x6a>
        tickstart = HAL_GetTick();
 8004ae0:	f7fe ff4c 	bl	800397c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ae4:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8004ae6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ae8:	02bf      	lsls	r7, r7, #10
 8004aea:	682b      	ldr	r3, [r5, #0]
 8004aec:	423b      	tst	r3, r7
 8004aee:	d0a3      	beq.n	8004a38 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004af0:	f7fe ff44 	bl	800397c <HAL_GetTick>
 8004af4:	1b80      	subs	r0, r0, r6
 8004af6:	2864      	cmp	r0, #100	; 0x64
 8004af8:	d9f7      	bls.n	8004aea <HAL_RCC_OscConfig+0xc2>
 8004afa:	e7d7      	b.n	8004aac <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004afc:	2338      	movs	r3, #56	; 0x38
 8004afe:	4d88      	ldr	r5, [pc, #544]	; (8004d20 <HAL_RCC_OscConfig+0x2f8>)
 8004b00:	68aa      	ldr	r2, [r5, #8]
 8004b02:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b04:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004b06:	2b10      	cmp	r3, #16
 8004b08:	d128      	bne.n	8004b5c <HAL_RCC_OscConfig+0x134>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b0a:	2103      	movs	r1, #3
 8004b0c:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004b0e:	2a02      	cmp	r2, #2
 8004b10:	d126      	bne.n	8004b60 <HAL_RCC_OscConfig+0x138>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b12:	682a      	ldr	r2, [r5, #0]
 8004b14:	0552      	lsls	r2, r2, #21
 8004b16:	d502      	bpl.n	8004b1e <HAL_RCC_OscConfig+0xf6>
 8004b18:	68e2      	ldr	r2, [r4, #12]
 8004b1a:	2a00      	cmp	r2, #0
 8004b1c:	d0ad      	beq.n	8004a7a <HAL_RCC_OscConfig+0x52>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b1e:	6869      	ldr	r1, [r5, #4]
 8004b20:	6962      	ldr	r2, [r4, #20]
 8004b22:	4882      	ldr	r0, [pc, #520]	; (8004d2c <HAL_RCC_OscConfig+0x304>)
 8004b24:	0212      	lsls	r2, r2, #8
 8004b26:	4001      	ands	r1, r0
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10d      	bne.n	8004b4c <HAL_RCC_OscConfig+0x124>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004b30:	682b      	ldr	r3, [r5, #0]
 8004b32:	4a7f      	ldr	r2, [pc, #508]	; (8004d30 <HAL_RCC_OscConfig+0x308>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	6922      	ldr	r2, [r4, #16]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004b3c:	682b      	ldr	r3, [r5, #0]
 8004b3e:	4a7d      	ldr	r2, [pc, #500]	; (8004d34 <HAL_RCC_OscConfig+0x30c>)
 8004b40:	049b      	lsls	r3, r3, #18
 8004b42:	0f5b      	lsrs	r3, r3, #29
 8004b44:	40da      	lsrs	r2, r3
 8004b46:	0013      	movs	r3, r2
 8004b48:	4a7b      	ldr	r2, [pc, #492]	; (8004d38 <HAL_RCC_OscConfig+0x310>)
 8004b4a:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b4c:	4b7b      	ldr	r3, [pc, #492]	; (8004d3c <HAL_RCC_OscConfig+0x314>)
 8004b4e:	6818      	ldr	r0, [r3, #0]
 8004b50:	f7fe fecc 	bl	80038ec <HAL_InitTick>
 8004b54:	2800      	cmp	r0, #0
 8004b56:	d100      	bne.n	8004b5a <HAL_RCC_OscConfig+0x132>
 8004b58:	e771      	b.n	8004a3e <HAL_RCC_OscConfig+0x16>
 8004b5a:	e78e      	b.n	8004a7a <HAL_RCC_OscConfig+0x52>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d0d8      	beq.n	8004b12 <HAL_RCC_OscConfig+0xea>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b60:	68e3      	ldr	r3, [r4, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d020      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x180>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004b66:	682b      	ldr	r3, [r5, #0]
 8004b68:	4a71      	ldr	r2, [pc, #452]	; (8004d30 <HAL_RCC_OscConfig+0x308>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b6a:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b70:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004b72:	4313      	orrs	r3, r2
 8004b74:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8004b76:	2380      	movs	r3, #128	; 0x80
 8004b78:	682a      	ldr	r2, [r5, #0]
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004b80:	f7fe fefc 	bl	800397c <HAL_GetTick>
 8004b84:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b86:	682b      	ldr	r3, [r5, #0]
 8004b88:	423b      	tst	r3, r7
 8004b8a:	d007      	beq.n	8004b9c <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b8c:	686a      	ldr	r2, [r5, #4]
 8004b8e:	6963      	ldr	r3, [r4, #20]
 8004b90:	4966      	ldr	r1, [pc, #408]	; (8004d2c <HAL_RCC_OscConfig+0x304>)
 8004b92:	021b      	lsls	r3, r3, #8
 8004b94:	400a      	ands	r2, r1
 8004b96:	4313      	orrs	r3, r2
 8004b98:	606b      	str	r3, [r5, #4]
 8004b9a:	e750      	b.n	8004a3e <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b9c:	f7fe feee 	bl	800397c <HAL_GetTick>
 8004ba0:	1b80      	subs	r0, r0, r6
 8004ba2:	2802      	cmp	r0, #2
 8004ba4:	d9ef      	bls.n	8004b86 <HAL_RCC_OscConfig+0x15e>
 8004ba6:	e781      	b.n	8004aac <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8004ba8:	682b      	ldr	r3, [r5, #0]
 8004baa:	4a65      	ldr	r2, [pc, #404]	; (8004d40 <HAL_RCC_OscConfig+0x318>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bac:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8004bae:	4013      	ands	r3, r2
 8004bb0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004bb2:	f7fe fee3 	bl	800397c <HAL_GetTick>
 8004bb6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bb8:	00ff      	lsls	r7, r7, #3
 8004bba:	682b      	ldr	r3, [r5, #0]
 8004bbc:	423b      	tst	r3, r7
 8004bbe:	d100      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x19a>
 8004bc0:	e73d      	b.n	8004a3e <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bc2:	f7fe fedb 	bl	800397c <HAL_GetTick>
 8004bc6:	1b80      	subs	r0, r0, r6
 8004bc8:	2802      	cmp	r0, #2
 8004bca:	d9f6      	bls.n	8004bba <HAL_RCC_OscConfig+0x192>
 8004bcc:	e76e      	b.n	8004aac <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004bce:	2138      	movs	r1, #56	; 0x38
 8004bd0:	4b53      	ldr	r3, [pc, #332]	; (8004d20 <HAL_RCC_OscConfig+0x2f8>)
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	001d      	movs	r5, r3
 8004bd6:	400a      	ands	r2, r1
 8004bd8:	2a18      	cmp	r2, #24
 8004bda:	d108      	bne.n	8004bee <HAL_RCC_OscConfig+0x1c6>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bde:	079b      	lsls	r3, r3, #30
 8004be0:	d400      	bmi.n	8004be4 <HAL_RCC_OscConfig+0x1bc>
 8004be2:	e730      	b.n	8004a46 <HAL_RCC_OscConfig+0x1e>
 8004be4:	69a3      	ldr	r3, [r4, #24]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d000      	beq.n	8004bec <HAL_RCC_OscConfig+0x1c4>
 8004bea:	e72c      	b.n	8004a46 <HAL_RCC_OscConfig+0x1e>
 8004bec:	e745      	b.n	8004a7a <HAL_RCC_OscConfig+0x52>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bee:	69a2      	ldr	r2, [r4, #24]
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	2a00      	cmp	r2, #0
 8004bf4:	d010      	beq.n	8004c18 <HAL_RCC_OscConfig+0x1f0>
        __HAL_RCC_LSI_ENABLE();
 8004bf6:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bf8:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004bfe:	f7fe febd 	bl	800397c <HAL_GetTick>
 8004c02:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c04:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8004c06:	423b      	tst	r3, r7
 8004c08:	d000      	beq.n	8004c0c <HAL_RCC_OscConfig+0x1e4>
 8004c0a:	e71c      	b.n	8004a46 <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c0c:	f7fe feb6 	bl	800397c <HAL_GetTick>
 8004c10:	1b80      	subs	r0, r0, r6
 8004c12:	2802      	cmp	r0, #2
 8004c14:	d9f6      	bls.n	8004c04 <HAL_RCC_OscConfig+0x1dc>
 8004c16:	e749      	b.n	8004aac <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_LSI_DISABLE();
 8004c18:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c1a:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8004c1c:	439a      	bics	r2, r3
 8004c1e:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004c20:	f7fe feac 	bl	800397c <HAL_GetTick>
 8004c24:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c26:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8004c28:	423b      	tst	r3, r7
 8004c2a:	d100      	bne.n	8004c2e <HAL_RCC_OscConfig+0x206>
 8004c2c:	e70b      	b.n	8004a46 <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c2e:	f7fe fea5 	bl	800397c <HAL_GetTick>
 8004c32:	1b80      	subs	r0, r0, r6
 8004c34:	2802      	cmp	r0, #2
 8004c36:	d9f6      	bls.n	8004c26 <HAL_RCC_OscConfig+0x1fe>
 8004c38:	e738      	b.n	8004aac <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004c3a:	2138      	movs	r1, #56	; 0x38
 8004c3c:	4b38      	ldr	r3, [pc, #224]	; (8004d20 <HAL_RCC_OscConfig+0x2f8>)
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	001d      	movs	r5, r3
 8004c42:	400a      	ands	r2, r1
 8004c44:	2a20      	cmp	r2, #32
 8004c46:	d108      	bne.n	8004c5a <HAL_RCC_OscConfig+0x232>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4a:	079b      	lsls	r3, r3, #30
 8004c4c:	d400      	bmi.n	8004c50 <HAL_RCC_OscConfig+0x228>
 8004c4e:	e6fe      	b.n	8004a4e <HAL_RCC_OscConfig+0x26>
 8004c50:	68a3      	ldr	r3, [r4, #8]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d000      	beq.n	8004c58 <HAL_RCC_OscConfig+0x230>
 8004c56:	e6fa      	b.n	8004a4e <HAL_RCC_OscConfig+0x26>
 8004c58:	e70f      	b.n	8004a7a <HAL_RCC_OscConfig+0x52>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c5a:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004c5c:	2100      	movs	r1, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c60:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 8004c62:	9100      	str	r1, [sp, #0]
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c64:	4213      	tst	r3, r2
 8004c66:	d108      	bne.n	8004c7a <HAL_RCC_OscConfig+0x252>
        __HAL_RCC_PWR_CLK_ENABLE();
 8004c68:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	63eb      	str	r3, [r5, #60]	; 0x3c
 8004c6e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004c70:	4013      	ands	r3, r2
 8004c72:	9303      	str	r3, [sp, #12]
 8004c74:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 8004c76:	2301      	movs	r3, #1
 8004c78:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c7a:	2780      	movs	r7, #128	; 0x80
 8004c7c:	4e31      	ldr	r6, [pc, #196]	; (8004d44 <HAL_RCC_OscConfig+0x31c>)
 8004c7e:	007f      	lsls	r7, r7, #1
 8004c80:	6833      	ldr	r3, [r6, #0]
 8004c82:	423b      	tst	r3, r7
 8004c84:	d015      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c86:	68a3      	ldr	r3, [r4, #8]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d122      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x2aa>
 8004c8c:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8004c92:	f7fe fe73 	bl	800397c <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c96:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8004c98:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c9a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8004c9c:	423b      	tst	r3, r7
 8004c9e:	d038      	beq.n	8004d12 <HAL_RCC_OscConfig+0x2ea>
      if (pwrclkchanged == SET)
 8004ca0:	9b00      	ldr	r3, [sp, #0]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d000      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x280>
 8004ca6:	e6d2      	b.n	8004a4e <HAL_RCC_OscConfig+0x26>
        __HAL_RCC_PWR_CLK_DISABLE();
 8004ca8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004caa:	4a27      	ldr	r2, [pc, #156]	; (8004d48 <HAL_RCC_OscConfig+0x320>)
 8004cac:	4013      	ands	r3, r2
 8004cae:	63eb      	str	r3, [r5, #60]	; 0x3c
 8004cb0:	e6cd      	b.n	8004a4e <HAL_RCC_OscConfig+0x26>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cb2:	6833      	ldr	r3, [r6, #0]
 8004cb4:	433b      	orrs	r3, r7
 8004cb6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8004cb8:	f7fe fe60 	bl	800397c <HAL_GetTick>
 8004cbc:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cbe:	6833      	ldr	r3, [r6, #0]
 8004cc0:	423b      	tst	r3, r7
 8004cc2:	d1e0      	bne.n	8004c86 <HAL_RCC_OscConfig+0x25e>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cc4:	f7fe fe5a 	bl	800397c <HAL_GetTick>
 8004cc8:	9b01      	ldr	r3, [sp, #4]
 8004cca:	1ac0      	subs	r0, r0, r3
 8004ccc:	2802      	cmp	r0, #2
 8004cce:	d9f6      	bls.n	8004cbe <HAL_RCC_OscConfig+0x296>
 8004cd0:	e6ec      	b.n	8004aac <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cd2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8004cd4:	2b05      	cmp	r3, #5
 8004cd6:	d105      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x2bc>
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	65eb      	str	r3, [r5, #92]	; 0x5c
 8004cde:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e7d4      	b.n	8004c8e <HAL_RCC_OscConfig+0x266>
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	438a      	bics	r2, r1
 8004ce8:	65ea      	str	r2, [r5, #92]	; 0x5c
 8004cea:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8004cec:	3103      	adds	r1, #3
 8004cee:	438a      	bics	r2, r1
 8004cf0:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1cd      	bne.n	8004c92 <HAL_RCC_OscConfig+0x26a>
        tickstart = HAL_GetTick();
 8004cf6:	f7fe fe41 	bl	800397c <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cfa:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8004cfc:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cfe:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8004d00:	423b      	tst	r3, r7
 8004d02:	d0cd      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d04:	f7fe fe3a 	bl	800397c <HAL_GetTick>
 8004d08:	4b10      	ldr	r3, [pc, #64]	; (8004d4c <HAL_RCC_OscConfig+0x324>)
 8004d0a:	1b80      	subs	r0, r0, r6
 8004d0c:	4298      	cmp	r0, r3
 8004d0e:	d9f6      	bls.n	8004cfe <HAL_RCC_OscConfig+0x2d6>
 8004d10:	e6cc      	b.n	8004aac <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d12:	f7fe fe33 	bl	800397c <HAL_GetTick>
 8004d16:	4b0d      	ldr	r3, [pc, #52]	; (8004d4c <HAL_RCC_OscConfig+0x324>)
 8004d18:	1b80      	subs	r0, r0, r6
 8004d1a:	4298      	cmp	r0, r3
 8004d1c:	d9bd      	bls.n	8004c9a <HAL_RCC_OscConfig+0x272>
 8004d1e:	e6c5      	b.n	8004aac <HAL_RCC_OscConfig+0x84>
 8004d20:	40021000 	.word	0x40021000
 8004d24:	fffeffff 	.word	0xfffeffff
 8004d28:	fffbffff 	.word	0xfffbffff
 8004d2c:	ffff80ff 	.word	0xffff80ff
 8004d30:	ffffc7ff 	.word	0xffffc7ff
 8004d34:	00f42400 	.word	0x00f42400
 8004d38:	20000000 	.word	0x20000000
 8004d3c:	20000008 	.word	0x20000008
 8004d40:	fffffeff 	.word	0xfffffeff
 8004d44:	40007000 	.word	0x40007000
 8004d48:	efffffff 	.word	0xefffffff
 8004d4c:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d50:	2038      	movs	r0, #56	; 0x38
 8004d52:	4b44      	ldr	r3, [pc, #272]	; (8004e64 <HAL_RCC_OscConfig+0x43c>)
 8004d54:	6899      	ldr	r1, [r3, #8]
 8004d56:	001d      	movs	r5, r3
 8004d58:	4001      	ands	r1, r0
 8004d5a:	2910      	cmp	r1, #16
 8004d5c:	d054      	beq.n	8004e08 <HAL_RCC_OscConfig+0x3e0>
        __HAL_RCC_PLL_DISABLE();
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4941      	ldr	r1, [pc, #260]	; (8004e68 <HAL_RCC_OscConfig+0x440>)
 8004d62:	400b      	ands	r3, r1
 8004d64:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d66:	2a02      	cmp	r2, #2
 8004d68:	d137      	bne.n	8004dda <HAL_RCC_OscConfig+0x3b2>
        tickstart = HAL_GetTick();
 8004d6a:	f7fe fe07 	bl	800397c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d6e:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8004d70:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d72:	04bf      	lsls	r7, r7, #18
 8004d74:	682b      	ldr	r3, [r5, #0]
 8004d76:	423b      	tst	r3, r7
 8004d78:	d129      	bne.n	8004dce <HAL_RCC_OscConfig+0x3a6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d7a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004d7c:	6a23      	ldr	r3, [r4, #32]
 8004d7e:	68ea      	ldr	r2, [r5, #12]
 8004d80:	430b      	orrs	r3, r1
 8004d82:	493a      	ldr	r1, [pc, #232]	; (8004e6c <HAL_RCC_OscConfig+0x444>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d84:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d86:	400a      	ands	r2, r1
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d8c:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004d92:	4313      	orrs	r3, r2
 8004d94:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004d96:	4313      	orrs	r3, r2
 8004d98:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004d9a:	0212      	lsls	r2, r2, #8
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8004da0:	2380      	movs	r3, #128	; 0x80
 8004da2:	682a      	ldr	r2, [r5, #0]
 8004da4:	045b      	lsls	r3, r3, #17
 8004da6:	4313      	orrs	r3, r2
 8004da8:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004daa:	2380      	movs	r3, #128	; 0x80
 8004dac:	68ea      	ldr	r2, [r5, #12]
 8004dae:	055b      	lsls	r3, r3, #21
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8004db4:	f7fe fde2 	bl	800397c <HAL_GetTick>
 8004db8:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dba:	682b      	ldr	r3, [r5, #0]
 8004dbc:	4233      	tst	r3, r6
 8004dbe:	d000      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x39a>
 8004dc0:	e649      	b.n	8004a56 <HAL_RCC_OscConfig+0x2e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc2:	f7fe fddb 	bl	800397c <HAL_GetTick>
 8004dc6:	1b00      	subs	r0, r0, r4
 8004dc8:	2802      	cmp	r0, #2
 8004dca:	d9f6      	bls.n	8004dba <HAL_RCC_OscConfig+0x392>
 8004dcc:	e66e      	b.n	8004aac <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dce:	f7fe fdd5 	bl	800397c <HAL_GetTick>
 8004dd2:	1b80      	subs	r0, r0, r6
 8004dd4:	2802      	cmp	r0, #2
 8004dd6:	d9cd      	bls.n	8004d74 <HAL_RCC_OscConfig+0x34c>
 8004dd8:	e668      	b.n	8004aac <HAL_RCC_OscConfig+0x84>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004dda:	2203      	movs	r2, #3
 8004ddc:	68eb      	ldr	r3, [r5, #12]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dde:	2680      	movs	r6, #128	; 0x80
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004de0:	4393      	bics	r3, r2
 8004de2:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004de4:	68eb      	ldr	r3, [r5, #12]
 8004de6:	4a22      	ldr	r2, [pc, #136]	; (8004e70 <HAL_RCC_OscConfig+0x448>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004de8:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004dea:	4013      	ands	r3, r2
 8004dec:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8004dee:	f7fe fdc5 	bl	800397c <HAL_GetTick>
 8004df2:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004df4:	682b      	ldr	r3, [r5, #0]
 8004df6:	4233      	tst	r3, r6
 8004df8:	d100      	bne.n	8004dfc <HAL_RCC_OscConfig+0x3d4>
 8004dfa:	e62c      	b.n	8004a56 <HAL_RCC_OscConfig+0x2e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dfc:	f7fe fdbe 	bl	800397c <HAL_GetTick>
 8004e00:	1b00      	subs	r0, r0, r4
 8004e02:	2802      	cmp	r0, #2
 8004e04:	d9f6      	bls.n	8004df4 <HAL_RCC_OscConfig+0x3cc>
 8004e06:	e651      	b.n	8004aac <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e08:	2a01      	cmp	r2, #1
 8004e0a:	d100      	bne.n	8004e0e <HAL_RCC_OscConfig+0x3e6>
 8004e0c:	e635      	b.n	8004a7a <HAL_RCC_OscConfig+0x52>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e0e:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8004e10:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e12:	6a21      	ldr	r1, [r4, #32]
 8004e14:	401a      	ands	r2, r3
 8004e16:	428a      	cmp	r2, r1
 8004e18:	d000      	beq.n	8004e1c <HAL_RCC_OscConfig+0x3f4>
 8004e1a:	e62e      	b.n	8004a7a <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e1c:	2270      	movs	r2, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e20:	401a      	ands	r2, r3
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e22:	428a      	cmp	r2, r1
 8004e24:	d000      	beq.n	8004e28 <HAL_RCC_OscConfig+0x400>
 8004e26:	e628      	b.n	8004a7a <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e28:	21fe      	movs	r1, #254	; 0xfe
 8004e2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004e2c:	01c9      	lsls	r1, r1, #7
 8004e2e:	4019      	ands	r1, r3
 8004e30:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e32:	4291      	cmp	r1, r2
 8004e34:	d000      	beq.n	8004e38 <HAL_RCC_OscConfig+0x410>
 8004e36:	e620      	b.n	8004a7a <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e38:	22f8      	movs	r2, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e3a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e3c:	0392      	lsls	r2, r2, #14
 8004e3e:	401a      	ands	r2, r3
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e40:	428a      	cmp	r2, r1
 8004e42:	d000      	beq.n	8004e46 <HAL_RCC_OscConfig+0x41e>
 8004e44:	e619      	b.n	8004a7a <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004e46:	22e0      	movs	r2, #224	; 0xe0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e48:	6b21      	ldr	r1, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004e4a:	0512      	lsls	r2, r2, #20
 8004e4c:	401a      	ands	r2, r3
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e4e:	428a      	cmp	r2, r1
 8004e50:	d000      	beq.n	8004e54 <HAL_RCC_OscConfig+0x42c>
 8004e52:	e612      	b.n	8004a7a <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004e54:	6b62      	ldr	r2, [r4, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004e56:	0f5b      	lsrs	r3, r3, #29
 8004e58:	075b      	lsls	r3, r3, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d100      	bne.n	8004e60 <HAL_RCC_OscConfig+0x438>
 8004e5e:	e5fa      	b.n	8004a56 <HAL_RCC_OscConfig+0x2e>
 8004e60:	e60b      	b.n	8004a7a <HAL_RCC_OscConfig+0x52>
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	40021000 	.word	0x40021000
 8004e68:	feffffff 	.word	0xfeffffff
 8004e6c:	11c1808c 	.word	0x11c1808c
 8004e70:	eefeffff 	.word	0xeefeffff

08004e74 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e74:	2338      	movs	r3, #56	; 0x38
 8004e76:	4a1e      	ldr	r2, [pc, #120]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8004e78:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e7a:	6891      	ldr	r1, [r2, #8]
 8004e7c:	0014      	movs	r4, r2
 8004e7e:	4219      	tst	r1, r3
 8004e80:	d105      	bne.n	8004e8e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004e82:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004e84:	481b      	ldr	r0, [pc, #108]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x80>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004e86:	049b      	lsls	r3, r3, #18
 8004e88:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004e8a:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8004e8c:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e8e:	6891      	ldr	r1, [r2, #8]
 8004e90:	4019      	ands	r1, r3
 8004e92:	2908      	cmp	r1, #8
 8004e94:	d027      	beq.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x72>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e96:	6891      	ldr	r1, [r2, #8]
 8004e98:	4019      	ands	r1, r3
 8004e9a:	2910      	cmp	r1, #16
 8004e9c:	d117      	bne.n	8004ece <HAL_RCC_GetSysClockFreq+0x5a>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004e9e:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ea0:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004ea2:	43db      	mvns	r3, r3
 8004ea4:	227f      	movs	r2, #127	; 0x7f
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004ea6:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ea8:	0649      	lsls	r1, r1, #25
 8004eaa:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004eac:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004eae:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004eb0:	4015      	ands	r5, r2
    switch (pllsource)
 8004eb2:	079b      	lsls	r3, r3, #30
 8004eb4:	d109      	bne.n	8004eca <HAL_RCC_GetSysClockFreq+0x56>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004eb6:	4810      	ldr	r0, [pc, #64]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004eb8:	f7fb f92e 	bl	8000118 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004ebc:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004ebe:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004ec0:	0f49      	lsrs	r1, r1, #29
 8004ec2:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8004ec4:	f7fb f928 	bl	8000118 <__udivsi3>
  return sysclockfreq;
 8004ec8:	e7e0      	b.n	8004e8c <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004eca:	480a      	ldr	r0, [pc, #40]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x80>)
 8004ecc:	e7f4      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x44>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004ece:	6891      	ldr	r1, [r2, #8]
 8004ed0:	4019      	ands	r1, r3
 8004ed2:	2920      	cmp	r1, #32
 8004ed4:	d009      	beq.n	8004eea <HAL_RCC_GetSysClockFreq+0x76>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004ed6:	6892      	ldr	r2, [r2, #8]
    sysclockfreq = 0U;
 8004ed8:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004eda:	4013      	ands	r3, r2
 8004edc:	2b18      	cmp	r3, #24
 8004ede:	d1d5      	bne.n	8004e8c <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSI_VALUE;
 8004ee0:	20fa      	movs	r0, #250	; 0xfa
 8004ee2:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 8004ee4:	e7d2      	b.n	8004e8c <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = HSE_VALUE;
 8004ee6:	4804      	ldr	r0, [pc, #16]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x84>)
 8004ee8:	e7d0      	b.n	8004e8c <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8004eea:	2080      	movs	r0, #128	; 0x80
 8004eec:	0200      	lsls	r0, r0, #8
 8004eee:	e7cd      	b.n	8004e8c <HAL_RCC_GetSysClockFreq+0x18>
 8004ef0:	40021000 	.word	0x40021000
 8004ef4:	00f42400 	.word	0x00f42400
 8004ef8:	007a1200 	.word	0x007a1200

08004efc <HAL_RCC_ClockConfig>:
{
 8004efc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004efe:	0005      	movs	r5, r0
 8004f00:	000e      	movs	r6, r1
  if (RCC_ClkInitStruct == NULL)
 8004f02:	2800      	cmp	r0, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8004f06:	2001      	movs	r0, #1
}
 8004f08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f0a:	2707      	movs	r7, #7
 8004f0c:	4c4a      	ldr	r4, [pc, #296]	; (8005038 <HAL_RCC_ClockConfig+0x13c>)
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	403b      	ands	r3, r7
 8004f12:	428b      	cmp	r3, r1
 8004f14:	d32a      	bcc.n	8004f6c <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f16:	6829      	ldr	r1, [r5, #0]
 8004f18:	078b      	lsls	r3, r1, #30
 8004f1a:	d43b      	bmi.n	8004f94 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f1c:	07cb      	lsls	r3, r1, #31
 8004f1e:	d448      	bmi.n	8004fb2 <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f20:	2707      	movs	r7, #7
 8004f22:	6823      	ldr	r3, [r4, #0]
 8004f24:	403b      	ands	r3, r7
 8004f26:	42b3      	cmp	r3, r6
 8004f28:	d90a      	bls.n	8004f40 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	43bb      	bics	r3, r7
 8004f2e:	4333      	orrs	r3, r6
 8004f30:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8004f32:	f7fe fd23 	bl	800397c <HAL_GetTick>
 8004f36:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	403b      	ands	r3, r7
 8004f3c:	42b3      	cmp	r3, r6
 8004f3e:	d16b      	bne.n	8005018 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f40:	682b      	ldr	r3, [r5, #0]
 8004f42:	4c3e      	ldr	r4, [pc, #248]	; (800503c <HAL_RCC_ClockConfig+0x140>)
 8004f44:	075b      	lsls	r3, r3, #29
 8004f46:	d46f      	bmi.n	8005028 <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004f48:	f7ff ff94 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8004f4c:	68a3      	ldr	r3, [r4, #8]
 8004f4e:	4a3c      	ldr	r2, [pc, #240]	; (8005040 <HAL_RCC_ClockConfig+0x144>)
 8004f50:	051b      	lsls	r3, r3, #20
 8004f52:	0f1b      	lsrs	r3, r3, #28
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	589b      	ldr	r3, [r3, r2]
 8004f58:	221f      	movs	r2, #31
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	40d8      	lsrs	r0, r3
 8004f5e:	4b39      	ldr	r3, [pc, #228]	; (8005044 <HAL_RCC_ClockConfig+0x148>)
 8004f60:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8004f62:	4b39      	ldr	r3, [pc, #228]	; (8005048 <HAL_RCC_ClockConfig+0x14c>)
 8004f64:	6818      	ldr	r0, [r3, #0]
 8004f66:	f7fe fcc1 	bl	80038ec <HAL_InitTick>
 8004f6a:	e7cd      	b.n	8004f08 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	43bb      	bics	r3, r7
 8004f70:	430b      	orrs	r3, r1
 8004f72:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8004f74:	f7fe fd02 	bl	800397c <HAL_GetTick>
 8004f78:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f7a:	6823      	ldr	r3, [r4, #0]
 8004f7c:	403b      	ands	r3, r7
 8004f7e:	42b3      	cmp	r3, r6
 8004f80:	d0c9      	beq.n	8004f16 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f82:	f7fe fcfb 	bl	800397c <HAL_GetTick>
 8004f86:	9b01      	ldr	r3, [sp, #4]
 8004f88:	1ac0      	subs	r0, r0, r3
 8004f8a:	4b30      	ldr	r3, [pc, #192]	; (800504c <HAL_RCC_ClockConfig+0x150>)
 8004f8c:	4298      	cmp	r0, r3
 8004f8e:	d9f4      	bls.n	8004f7a <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8004f90:	2003      	movs	r0, #3
 8004f92:	e7b9      	b.n	8004f08 <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f94:	4a29      	ldr	r2, [pc, #164]	; (800503c <HAL_RCC_ClockConfig+0x140>)
 8004f96:	074b      	lsls	r3, r1, #29
 8004f98:	d504      	bpl.n	8004fa4 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004f9a:	23e0      	movs	r3, #224	; 0xe0
 8004f9c:	6890      	ldr	r0, [r2, #8]
 8004f9e:	01db      	lsls	r3, r3, #7
 8004fa0:	4303      	orrs	r3, r0
 8004fa2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fa4:	6893      	ldr	r3, [r2, #8]
 8004fa6:	482a      	ldr	r0, [pc, #168]	; (8005050 <HAL_RCC_ClockConfig+0x154>)
 8004fa8:	4003      	ands	r3, r0
 8004faa:	68a8      	ldr	r0, [r5, #8]
 8004fac:	4303      	orrs	r3, r0
 8004fae:	6093      	str	r3, [r2, #8]
 8004fb0:	e7b4      	b.n	8004f1c <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fb2:	686a      	ldr	r2, [r5, #4]
 8004fb4:	4f21      	ldr	r7, [pc, #132]	; (800503c <HAL_RCC_ClockConfig+0x140>)
 8004fb6:	2a01      	cmp	r2, #1
 8004fb8:	d119      	bne.n	8004fee <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	039b      	lsls	r3, r3, #14
 8004fbe:	d5a2      	bpl.n	8004f06 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fc0:	2107      	movs	r1, #7
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	438b      	bics	r3, r1
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8004fca:	f7fe fcd7 	bl	800397c <HAL_GetTick>
 8004fce:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fd0:	2338      	movs	r3, #56	; 0x38
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	401a      	ands	r2, r3
 8004fd6:	686b      	ldr	r3, [r5, #4]
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d0a0      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fde:	f7fe fccd 	bl	800397c <HAL_GetTick>
 8004fe2:	9b01      	ldr	r3, [sp, #4]
 8004fe4:	1ac0      	subs	r0, r0, r3
 8004fe6:	4b19      	ldr	r3, [pc, #100]	; (800504c <HAL_RCC_ClockConfig+0x150>)
 8004fe8:	4298      	cmp	r0, r3
 8004fea:	d9f1      	bls.n	8004fd0 <HAL_RCC_ClockConfig+0xd4>
 8004fec:	e7d0      	b.n	8004f90 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fee:	2a02      	cmp	r2, #2
 8004ff0:	d103      	bne.n	8004ffa <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	019b      	lsls	r3, r3, #6
 8004ff6:	d4e3      	bmi.n	8004fc0 <HAL_RCC_ClockConfig+0xc4>
 8004ff8:	e785      	b.n	8004f06 <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004ffa:	2a00      	cmp	r2, #0
 8004ffc:	d103      	bne.n	8005006 <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	055b      	lsls	r3, r3, #21
 8005002:	d4dd      	bmi.n	8004fc0 <HAL_RCC_ClockConfig+0xc4>
 8005004:	e77f      	b.n	8004f06 <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005006:	2302      	movs	r3, #2
 8005008:	2a03      	cmp	r2, #3
 800500a:	d103      	bne.n	8005014 <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800500c:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800500e:	4219      	tst	r1, r3
 8005010:	d1d6      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0xc4>
 8005012:	e778      	b.n	8004f06 <HAL_RCC_ClockConfig+0xa>
 8005014:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005016:	e7fa      	b.n	800500e <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005018:	f7fe fcb0 	bl	800397c <HAL_GetTick>
 800501c:	9b01      	ldr	r3, [sp, #4]
 800501e:	1ac0      	subs	r0, r0, r3
 8005020:	4b0a      	ldr	r3, [pc, #40]	; (800504c <HAL_RCC_ClockConfig+0x150>)
 8005022:	4298      	cmp	r0, r3
 8005024:	d988      	bls.n	8004f38 <HAL_RCC_ClockConfig+0x3c>
 8005026:	e7b3      	b.n	8004f90 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005028:	68a3      	ldr	r3, [r4, #8]
 800502a:	4a0a      	ldr	r2, [pc, #40]	; (8005054 <HAL_RCC_ClockConfig+0x158>)
 800502c:	4013      	ands	r3, r2
 800502e:	68ea      	ldr	r2, [r5, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	60a3      	str	r3, [r4, #8]
 8005034:	e788      	b.n	8004f48 <HAL_RCC_ClockConfig+0x4c>
 8005036:	46c0      	nop			; (mov r8, r8)
 8005038:	40022000 	.word	0x40022000
 800503c:	40021000 	.word	0x40021000
 8005040:	08005630 	.word	0x08005630
 8005044:	20000000 	.word	0x20000000
 8005048:	20000008 	.word	0x20000008
 800504c:	00001388 	.word	0x00001388
 8005050:	fffff0ff 	.word	0xfffff0ff
 8005054:	ffff8fff 	.word	0xffff8fff

08005058 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800505a:	0005      	movs	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800505c:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800505e:	2000      	movs	r0, #0
{
 8005060:	b085      	sub	sp, #20
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005062:	039b      	lsls	r3, r3, #14
 8005064:	d53c      	bpl.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x88>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005066:	2280      	movs	r2, #128	; 0x80
 8005068:	4c60      	ldr	r4, [pc, #384]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800506a:	0552      	lsls	r2, r2, #21
 800506c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 800506e:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005070:	4213      	tst	r3, r2
 8005072:	d108      	bne.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005074:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005076:	4313      	orrs	r3, r2
 8005078:	63e3      	str	r3, [r4, #60]	; 0x3c
 800507a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800507c:	4013      	ands	r3, r2
 800507e:	9303      	str	r3, [sp, #12]
 8005080:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8005082:	2301      	movs	r3, #1
 8005084:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005086:	2780      	movs	r7, #128	; 0x80
 8005088:	4e59      	ldr	r6, [pc, #356]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800508a:	007f      	lsls	r7, r7, #1
 800508c:	6833      	ldr	r3, [r6, #0]
 800508e:	433b      	orrs	r3, r7
 8005090:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005092:	f7fe fc73 	bl	800397c <HAL_GetTick>
 8005096:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005098:	6833      	ldr	r3, [r6, #0]
 800509a:	423b      	tst	r3, r7
 800509c:	d012      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800509e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80050a0:	23c0      	movs	r3, #192	; 0xc0
 80050a2:	0011      	movs	r1, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4e53      	ldr	r6, [pc, #332]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 80050a8:	4019      	ands	r1, r3

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050aa:	421a      	tst	r2, r3
 80050ac:	d003      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 80050ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80050b0:	4299      	cmp	r1, r3
 80050b2:	d000      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 80050b4:	e07a      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x154>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050b6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050b8:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050ba:	401e      	ands	r6, r3
 80050bc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80050be:	431e      	orrs	r6, r3
 80050c0:	65e6      	str	r6, [r4, #92]	; 0x5c
 80050c2:	e006      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c4:	f7fe fc5a 	bl	800397c <HAL_GetTick>
 80050c8:	9b01      	ldr	r3, [sp, #4]
 80050ca:	1ac0      	subs	r0, r0, r3
 80050cc:	2802      	cmp	r0, #2
 80050ce:	d9e3      	bls.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x40>
        ret = HAL_TIMEOUT;
 80050d0:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050d2:	9b00      	ldr	r3, [sp, #0]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d103      	bne.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80050da:	4a47      	ldr	r2, [pc, #284]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80050dc:	4013      	ands	r3, r2
 80050de:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050e0:	682b      	ldr	r3, [r5, #0]
 80050e2:	07da      	lsls	r2, r3, #31
 80050e4:	d506      	bpl.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050e6:	2403      	movs	r4, #3
 80050e8:	4940      	ldr	r1, [pc, #256]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80050ea:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80050ec:	43a2      	bics	r2, r4
 80050ee:	686c      	ldr	r4, [r5, #4]
 80050f0:	4322      	orrs	r2, r4
 80050f2:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050f4:	06da      	lsls	r2, r3, #27
 80050f6:	d506      	bpl.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050f8:	493c      	ldr	r1, [pc, #240]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80050fa:	4c40      	ldr	r4, [pc, #256]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80050fc:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80050fe:	4022      	ands	r2, r4
 8005100:	68ac      	ldr	r4, [r5, #8]
 8005102:	4322      	orrs	r2, r4
 8005104:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005106:	059a      	lsls	r2, r3, #22
 8005108:	d506      	bpl.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800510a:	4938      	ldr	r1, [pc, #224]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800510c:	4c3c      	ldr	r4, [pc, #240]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800510e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8005110:	4022      	ands	r2, r4
 8005112:	696c      	ldr	r4, [r5, #20]
 8005114:	4322      	orrs	r2, r4
 8005116:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005118:	055a      	lsls	r2, r3, #21
 800511a:	d506      	bpl.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800511c:	4933      	ldr	r1, [pc, #204]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800511e:	4c39      	ldr	r4, [pc, #228]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005120:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8005122:	4022      	ands	r2, r4
 8005124:	69ac      	ldr	r4, [r5, #24]
 8005126:	4322      	orrs	r2, r4
 8005128:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800512a:	069a      	lsls	r2, r3, #26
 800512c:	d506      	bpl.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800512e:	492f      	ldr	r1, [pc, #188]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8005130:	4c35      	ldr	r4, [pc, #212]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005132:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8005134:	4022      	ands	r2, r4
 8005136:	68ec      	ldr	r4, [r5, #12]
 8005138:	4322      	orrs	r2, r4
 800513a:	654a      	str	r2, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800513c:	045a      	lsls	r2, r3, #17
 800513e:	d50f      	bpl.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005140:	492a      	ldr	r1, [pc, #168]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8005142:	69ec      	ldr	r4, [r5, #28]
 8005144:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8005146:	0092      	lsls	r2, r2, #2
 8005148:	0892      	lsrs	r2, r2, #2
 800514a:	4322      	orrs	r2, r4
 800514c:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800514e:	2280      	movs	r2, #128	; 0x80
 8005150:	05d2      	lsls	r2, r2, #23
 8005152:	4294      	cmp	r4, r2
 8005154:	d104      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x108>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005156:	2280      	movs	r2, #128	; 0x80
 8005158:	68cc      	ldr	r4, [r1, #12]
 800515a:	0252      	lsls	r2, r2, #9
 800515c:	4322      	orrs	r2, r4
 800515e:	60ca      	str	r2, [r1, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005160:	029a      	lsls	r2, r3, #10
 8005162:	d50f      	bpl.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005164:	4921      	ldr	r1, [pc, #132]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8005166:	4e29      	ldr	r6, [pc, #164]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005168:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800516a:	6a2c      	ldr	r4, [r5, #32]
 800516c:	4032      	ands	r2, r6
 800516e:	4322      	orrs	r2, r4
 8005170:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005172:	2280      	movs	r2, #128	; 0x80
 8005174:	03d2      	lsls	r2, r2, #15
 8005176:	4294      	cmp	r4, r2
 8005178:	d104      	bne.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800517a:	2280      	movs	r2, #128	; 0x80
 800517c:	68cc      	ldr	r4, [r1, #12]
 800517e:	0452      	lsls	r2, r2, #17
 8005180:	4322      	orrs	r2, r4
 8005182:	60ca      	str	r2, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005184:	051b      	lsls	r3, r3, #20
 8005186:	d50f      	bpl.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005188:	4a18      	ldr	r2, [pc, #96]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800518a:	4c21      	ldr	r4, [pc, #132]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800518c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800518e:	6929      	ldr	r1, [r5, #16]
 8005190:	4023      	ands	r3, r4
 8005192:	430b      	orrs	r3, r1
 8005194:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005196:	2380      	movs	r3, #128	; 0x80
 8005198:	01db      	lsls	r3, r3, #7
 800519a:	4299      	cmp	r1, r3
 800519c:	d104      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800519e:	2380      	movs	r3, #128	; 0x80
 80051a0:	68d1      	ldr	r1, [r2, #12]
 80051a2:	025b      	lsls	r3, r3, #9
 80051a4:	430b      	orrs	r3, r1
 80051a6:	60d3      	str	r3, [r2, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 80051a8:	b005      	add	sp, #20
 80051aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_BACKUPRESET_FORCE();
 80051ac:	2380      	movs	r3, #128	; 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051ae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 80051b0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051b2:	0011      	movs	r1, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 80051b4:	025b      	lsls	r3, r3, #9
 80051b6:	4303      	orrs	r3, r0
 80051b8:	65e3      	str	r3, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051ba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80051bc:	4815      	ldr	r0, [pc, #84]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051be:	4031      	ands	r1, r6
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051c0:	4003      	ands	r3, r0
 80051c2:	65e3      	str	r3, [r4, #92]	; 0x5c
        RCC->BDCR = tmpregister;
 80051c4:	65e1      	str	r1, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051c6:	07d3      	lsls	r3, r2, #31
 80051c8:	d400      	bmi.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x174>
 80051ca:	e774      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
        tickstart = HAL_GetTick();
 80051cc:	f7fe fbd6 	bl	800397c <HAL_GetTick>
 80051d0:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051d2:	2202      	movs	r2, #2
 80051d4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80051d6:	4213      	tst	r3, r2
 80051d8:	d000      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x184>
 80051da:	e76c      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051dc:	f7fe fbce 	bl	800397c <HAL_GetTick>
 80051e0:	4b0d      	ldr	r3, [pc, #52]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80051e2:	1bc0      	subs	r0, r0, r7
 80051e4:	4298      	cmp	r0, r3
 80051e6:	d9f4      	bls.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80051e8:	e772      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80051ea:	46c0      	nop			; (mov r8, r8)
 80051ec:	40021000 	.word	0x40021000
 80051f0:	40007000 	.word	0x40007000
 80051f4:	fffffcff 	.word	0xfffffcff
 80051f8:	efffffff 	.word	0xefffffff
 80051fc:	fffff3ff 	.word	0xfffff3ff
 8005200:	fff3ffff 	.word	0xfff3ffff
 8005204:	ffcfffff 	.word	0xffcfffff
 8005208:	ffffcfff 	.word	0xffffcfff
 800520c:	ffbfffff 	.word	0xffbfffff
 8005210:	ffff3fff 	.word	0xffff3fff
 8005214:	fffeffff 	.word	0xfffeffff
 8005218:	00001388 	.word	0x00001388

0800521c <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800521c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800521e:	2217      	movs	r2, #23
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005220:	2301      	movs	r3, #1
void ssd1306_WriteCommand(uint8_t byte) {
 8005222:	446a      	add	r2, sp
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005224:	425b      	negs	r3, r3
void ssd1306_WriteCommand(uint8_t byte) {
 8005226:	7010      	strb	r0, [r2, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005228:	9302      	str	r3, [sp, #8]
 800522a:	3302      	adds	r3, #2
 800522c:	9200      	str	r2, [sp, #0]
 800522e:	2178      	movs	r1, #120	; 0x78
 8005230:	2200      	movs	r2, #0
 8005232:	9301      	str	r3, [sp, #4]
 8005234:	4802      	ldr	r0, [pc, #8]	; (8005240 <ssd1306_WriteCommand+0x24>)
 8005236:	f7ff fac7 	bl	80047c8 <HAL_I2C_Mem_Write>
}
 800523a:	b007      	add	sp, #28
 800523c:	bd00      	pop	{pc}
 800523e:	46c0      	nop			; (mov r8, r8)
 8005240:	20000460 	.word	0x20000460

08005244 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8005244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8005246:	2301      	movs	r3, #1
 8005248:	b289      	uxth	r1, r1
 800524a:	425b      	negs	r3, r3
 800524c:	9302      	str	r3, [sp, #8]
 800524e:	9101      	str	r1, [sp, #4]
 8005250:	9000      	str	r0, [sp, #0]
 8005252:	2240      	movs	r2, #64	; 0x40
 8005254:	2178      	movs	r1, #120	; 0x78
 8005256:	3302      	adds	r3, #2
 8005258:	4802      	ldr	r0, [pc, #8]	; (8005264 <ssd1306_WriteData+0x20>)
 800525a:	f7ff fab5 	bl	80047c8 <HAL_I2C_Mem_Write>
}
 800525e:	b005      	add	sp, #20
 8005260:	bd00      	pop	{pc}
 8005262:	46c0      	nop			; (mov r8, r8)
 8005264:	20000460 	.word	0x20000460

08005268 <ssd1306_Fill>:
void ssd1306_Fill(SSD1306_COLOR color) {
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8005268:	1e42      	subs	r2, r0, #1
 800526a:	4190      	sbcs	r0, r2
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800526c:	2280      	movs	r2, #128	; 0x80
 800526e:	2300      	movs	r3, #0
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8005270:	4903      	ldr	r1, [pc, #12]	; (8005280 <ssd1306_Fill+0x18>)
 8005272:	4240      	negs	r0, r0
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8005274:	00d2      	lsls	r2, r2, #3
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8005276:	54c8      	strb	r0, [r1, r3]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8005278:	3301      	adds	r3, #1
 800527a:	4293      	cmp	r3, r2
 800527c:	d1fb      	bne.n	8005276 <ssd1306_Fill+0xe>
    }
}
 800527e:	4770      	bx	lr
 8005280:	2000005e 	.word	0x2000005e

08005284 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8005284:	b570      	push	{r4, r5, r6, lr}
 8005286:	24b0      	movs	r4, #176	; 0xb0
 8005288:	4d09      	ldr	r5, [pc, #36]	; (80052b0 <ssd1306_UpdateScreen+0x2c>)
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800528a:	0020      	movs	r0, r4
 800528c:	f7ff ffc6 	bl	800521c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8005290:	2000      	movs	r0, #0
 8005292:	f7ff ffc3 	bl	800521c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8005296:	3401      	adds	r4, #1
 8005298:	2010      	movs	r0, #16
 800529a:	f7ff ffbf 	bl	800521c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800529e:	b2e4      	uxtb	r4, r4
 80052a0:	0028      	movs	r0, r5
 80052a2:	2180      	movs	r1, #128	; 0x80
 80052a4:	f7ff ffce 	bl	8005244 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80052a8:	3580      	adds	r5, #128	; 0x80
 80052aa:	2cb8      	cmp	r4, #184	; 0xb8
 80052ac:	d1ed      	bne.n	800528a <ssd1306_UpdateScreen+0x6>
    }
}
 80052ae:	bd70      	pop	{r4, r5, r6, pc}
 80052b0:	2000005e 	.word	0x2000005e

080052b4 <ssd1306_DrawPixel>:
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color

void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80052b4:	b243      	sxtb	r3, r0
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80052b6:	b570      	push	{r4, r5, r6, lr}
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	db0f      	blt.n	80052dc <ssd1306_DrawPixel+0x28>
 80052bc:	293f      	cmp	r1, #63	; 0x3f
 80052be:	d80d      	bhi.n	80052dc <ssd1306_DrawPixel+0x28>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80052c0:	2407      	movs	r4, #7
 80052c2:	08cb      	lsrs	r3, r1, #3
 80052c4:	400c      	ands	r4, r1
 80052c6:	2101      	movs	r1, #1
 80052c8:	40a1      	lsls	r1, r4
 80052ca:	01db      	lsls	r3, r3, #7
 80052cc:	4e05      	ldr	r6, [pc, #20]	; (80052e4 <ssd1306_DrawPixel+0x30>)
 80052ce:	1818      	adds	r0, r3, r0
 80052d0:	5635      	ldrsb	r5, [r6, r0]
 80052d2:	b24b      	sxtb	r3, r1
 80052d4:	2a01      	cmp	r2, #1
 80052d6:	d102      	bne.n	80052de <ssd1306_DrawPixel+0x2a>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80052d8:	432b      	orrs	r3, r5
 80052da:	5433      	strb	r3, [r6, r0]
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
    }
}
 80052dc:	bd70      	pop	{r4, r5, r6, pc}
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80052de:	439d      	bics	r5, r3
 80052e0:	5435      	strb	r5, [r6, r0]
 80052e2:	e7fb      	b.n	80052dc <ssd1306_DrawPixel+0x28>
 80052e4:	2000005e 	.word	0x2000005e

080052e8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80052e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80052ea:	0005      	movs	r5, r0
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80052ec:	b089      	sub	sp, #36	; 0x24
    if (ch < 32 || ch > 126)
 80052ee:	3d20      	subs	r5, #32
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80052f0:	9304      	str	r3, [sp, #16]
    if (ch < 32 || ch > 126)
 80052f2:	b2eb      	uxtb	r3, r5
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80052f4:	0006      	movs	r6, r0
 80052f6:	9106      	str	r1, [sp, #24]
 80052f8:	9207      	str	r2, [sp, #28]
    if (ch < 32 || ch > 126)
 80052fa:	2b5e      	cmp	r3, #94	; 0x5e
 80052fc:	d844      	bhi.n	8005388 <ssd1306_WriteChar+0xa0>
 80052fe:	ab06      	add	r3, sp, #24
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	9302      	str	r3, [sp, #8]
        return 0;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8005304:	4b21      	ldr	r3, [pc, #132]	; (800538c <ssd1306_WriteChar+0xa4>)
 8005306:	9902      	ldr	r1, [sp, #8]
 8005308:	881a      	ldrh	r2, [r3, #0]
 800530a:	9200      	str	r2, [sp, #0]
 800530c:	1852      	adds	r2, r2, r1
 800530e:	2a80      	cmp	r2, #128	; 0x80
 8005310:	dc3a      	bgt.n	8005388 <ssd1306_WriteChar+0xa0>
 8005312:	aa06      	add	r2, sp, #24
 8005314:	7852      	ldrb	r2, [r2, #1]
 8005316:	9203      	str	r2, [sp, #12]
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8005318:	885c      	ldrh	r4, [r3, #2]
 800531a:	18a3      	adds	r3, r4, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800531c:	2b40      	cmp	r3, #64	; 0x40
 800531e:	dc33      	bgt.n	8005388 <ssd1306_WriteChar+0xa0>
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8005320:	2300      	movs	r3, #0
 8005322:	4355      	muls	r5, r2
 8005324:	b2e4      	uxtb	r4, r4
 8005326:	006d      	lsls	r5, r5, #1
 8005328:	9301      	str	r3, [sp, #4]
 800532a:	9b03      	ldr	r3, [sp, #12]
 800532c:	9a01      	ldr	r2, [sp, #4]
 800532e:	4293      	cmp	r3, r2
 8005330:	d808      	bhi.n	8005344 <ssd1306_WriteChar+0x5c>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8005332:	9a02      	ldr	r2, [sp, #8]
 8005334:	9b00      	ldr	r3, [sp, #0]
 8005336:	4694      	mov	ip, r2
 8005338:	4a14      	ldr	r2, [pc, #80]	; (800538c <ssd1306_WriteChar+0xa4>)
 800533a:	4463      	add	r3, ip
 800533c:	8013      	strh	r3, [r2, #0]
    
    // Return written char for validation
    return ch;
}
 800533e:	0030      	movs	r0, r6
 8005340:	b009      	add	sp, #36	; 0x24
 8005342:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(j = 0; j < Font.FontWidth; j++) {
 8005344:	2700      	movs	r7, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8005346:	9b07      	ldr	r3, [sp, #28]
 8005348:	5b5b      	ldrh	r3, [r3, r5]
 800534a:	9305      	str	r3, [sp, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800534c:	9b02      	ldr	r3, [sp, #8]
 800534e:	42bb      	cmp	r3, r7
 8005350:	d806      	bhi.n	8005360 <ssd1306_WriteChar+0x78>
    for(i = 0; i < Font.FontHeight; i++) {
 8005352:	9b01      	ldr	r3, [sp, #4]
 8005354:	3401      	adds	r4, #1
 8005356:	3301      	adds	r3, #1
 8005358:	9301      	str	r3, [sp, #4]
 800535a:	3502      	adds	r5, #2
 800535c:	b2e4      	uxtb	r4, r4
 800535e:	e7e4      	b.n	800532a <ssd1306_WriteChar+0x42>
            if((b << j) & 0x8000)  {
 8005360:	9b00      	ldr	r3, [sp, #0]
 8005362:	2280      	movs	r2, #128	; 0x80
 8005364:	18f8      	adds	r0, r7, r3
 8005366:	9b05      	ldr	r3, [sp, #20]
 8005368:	0212      	lsls	r2, r2, #8
 800536a:	40bb      	lsls	r3, r7
 800536c:	b2c0      	uxtb	r0, r0
 800536e:	4213      	tst	r3, r2
 8005370:	d005      	beq.n	800537e <ssd1306_WriteChar+0x96>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005372:	9a04      	ldr	r2, [sp, #16]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005374:	0021      	movs	r1, r4
 8005376:	f7ff ff9d 	bl	80052b4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800537a:	3701      	adds	r7, #1
 800537c:	e7e6      	b.n	800534c <ssd1306_WriteChar+0x64>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800537e:	9a04      	ldr	r2, [sp, #16]
 8005380:	4253      	negs	r3, r2
 8005382:	415a      	adcs	r2, r3
 8005384:	b2d2      	uxtb	r2, r2
 8005386:	e7f5      	b.n	8005374 <ssd1306_WriteChar+0x8c>
        return 0;
 8005388:	2600      	movs	r6, #0
 800538a:	e7d8      	b.n	800533e <ssd1306_WriteChar+0x56>
 800538c:	20000058 	.word	0x20000058

08005390 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8005390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005392:	0004      	movs	r4, r0
 8005394:	001d      	movs	r5, r3
 8005396:	9100      	str	r1, [sp, #0]
 8005398:	9201      	str	r2, [sp, #4]
    // Write until null-byte
    while (*str) {
 800539a:	7820      	ldrb	r0, [r4, #0]
 800539c:	2800      	cmp	r0, #0
 800539e:	d100      	bne.n	80053a2 <ssd1306_WriteString+0x12>
        str++;
    }
    
    // Everything ok
    return *str;
}
 80053a0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80053a2:	002b      	movs	r3, r5
 80053a4:	9900      	ldr	r1, [sp, #0]
 80053a6:	9a01      	ldr	r2, [sp, #4]
 80053a8:	f7ff ff9e 	bl	80052e8 <ssd1306_WriteChar>
 80053ac:	0003      	movs	r3, r0
 80053ae:	7820      	ldrb	r0, [r4, #0]
 80053b0:	4283      	cmp	r3, r0
 80053b2:	d1f5      	bne.n	80053a0 <ssd1306_WriteString+0x10>
        str++;
 80053b4:	3401      	adds	r4, #1
 80053b6:	e7f0      	b.n	800539a <ssd1306_WriteString+0xa>

080053b8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 80053b8:	4b01      	ldr	r3, [pc, #4]	; (80053c0 <ssd1306_SetCursor+0x8>)
 80053ba:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 80053bc:	8059      	strh	r1, [r3, #2]
}
 80053be:	4770      	bx	lr
 80053c0:	20000058 	.word	0x20000058

080053c4 <ssd1306_SetContrast>:



void ssd1306_SetContrast(const uint8_t value) {
 80053c4:	b510      	push	{r4, lr}
 80053c6:	0004      	movs	r4, r0
    const uint8_t kSetContrastControlRegister = 0x81;
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80053c8:	2081      	movs	r0, #129	; 0x81
 80053ca:	f7ff ff27 	bl	800521c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80053ce:	0020      	movs	r0, r4
 80053d0:	f7ff ff24 	bl	800521c <ssd1306_WriteCommand>
}
 80053d4:	bd10      	pop	{r4, pc}
	...

080053d8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80053d8:	0003      	movs	r3, r0
 80053da:	b510      	push	{r4, lr}
    uint8_t value;
    if (on) {
        value = 0xAF;   // Display on
        SSD1306.DisplayOn = 1;
    } else {
        value = 0xAE;   // Display off
 80053dc:	20ae      	movs	r0, #174	; 0xae
    if (on) {
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <ssd1306_SetDisplayOn+0xe>
        SSD1306.DisplayOn = 1;
 80053e2:	2301      	movs	r3, #1
        value = 0xAF;   // Display on
 80053e4:	20af      	movs	r0, #175	; 0xaf
 80053e6:	4a02      	ldr	r2, [pc, #8]	; (80053f0 <ssd1306_SetDisplayOn+0x18>)
        SSD1306.DisplayOn = 0;
    }
    ssd1306_WriteCommand(value);
}
 80053e8:	7153      	strb	r3, [r2, #5]
    ssd1306_WriteCommand(value);
 80053ea:	f7ff ff17 	bl	800521c <ssd1306_WriteCommand>
}
 80053ee:	bd10      	pop	{r4, pc}
 80053f0:	20000058 	.word	0x20000058

080053f4 <ssd1306_Init>:
void ssd1306_Init(void) {
 80053f4:	b510      	push	{r4, lr}
    HAL_Delay(100);
 80053f6:	2064      	movs	r0, #100	; 0x64
 80053f8:	f7fe fac6 	bl	8003988 <HAL_Delay>
    ssd1306_SetDisplayOn(0); //display off
 80053fc:	2000      	movs	r0, #0
 80053fe:	f7ff ffeb 	bl	80053d8 <ssd1306_SetDisplayOn>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8005402:	2020      	movs	r0, #32
 8005404:	f7ff ff0a 	bl	800521c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8005408:	2000      	movs	r0, #0
 800540a:	f7ff ff07 	bl	800521c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800540e:	20b0      	movs	r0, #176	; 0xb0
 8005410:	f7ff ff04 	bl	800521c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8005414:	20c8      	movs	r0, #200	; 0xc8
 8005416:	f7ff ff01 	bl	800521c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 800541a:	2000      	movs	r0, #0
 800541c:	f7ff fefe 	bl	800521c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8005420:	2010      	movs	r0, #16
 8005422:	f7ff fefb 	bl	800521c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8005426:	2040      	movs	r0, #64	; 0x40
 8005428:	f7ff fef8 	bl	800521c <ssd1306_WriteCommand>
    ssd1306_SetContrast(0xFF);
 800542c:	20ff      	movs	r0, #255	; 0xff
 800542e:	f7ff ffc9 	bl	80053c4 <ssd1306_SetContrast>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8005432:	20a1      	movs	r0, #161	; 0xa1
 8005434:	f7ff fef2 	bl	800521c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 8005438:	20a6      	movs	r0, #166	; 0xa6
 800543a:	f7ff feef 	bl	800521c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800543e:	20a8      	movs	r0, #168	; 0xa8
 8005440:	f7ff feec 	bl	800521c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8005444:	203f      	movs	r0, #63	; 0x3f
 8005446:	f7ff fee9 	bl	800521c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800544a:	20a4      	movs	r0, #164	; 0xa4
 800544c:	f7ff fee6 	bl	800521c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8005450:	20d3      	movs	r0, #211	; 0xd3
 8005452:	f7ff fee3 	bl	800521c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8005456:	2000      	movs	r0, #0
 8005458:	f7ff fee0 	bl	800521c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800545c:	20d5      	movs	r0, #213	; 0xd5
 800545e:	f7ff fedd 	bl	800521c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8005462:	20f0      	movs	r0, #240	; 0xf0
 8005464:	f7ff feda 	bl	800521c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8005468:	20d9      	movs	r0, #217	; 0xd9
 800546a:	f7ff fed7 	bl	800521c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800546e:	2022      	movs	r0, #34	; 0x22
 8005470:	f7ff fed4 	bl	800521c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8005474:	20da      	movs	r0, #218	; 0xda
 8005476:	f7ff fed1 	bl	800521c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 800547a:	2012      	movs	r0, #18
 800547c:	f7ff fece 	bl	800521c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 8005480:	20db      	movs	r0, #219	; 0xdb
 8005482:	f7ff fecb 	bl	800521c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8005486:	2020      	movs	r0, #32
 8005488:	f7ff fec8 	bl	800521c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800548c:	208d      	movs	r0, #141	; 0x8d
 800548e:	f7ff fec5 	bl	800521c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8005492:	2014      	movs	r0, #20
 8005494:	f7ff fec2 	bl	800521c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8005498:	2001      	movs	r0, #1
 800549a:	f7ff ff9d 	bl	80053d8 <ssd1306_SetDisplayOn>
    ssd1306_Fill(Black);
 800549e:	2000      	movs	r0, #0
 80054a0:	f7ff fee2 	bl	8005268 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 80054a4:	f7ff feee 	bl	8005284 <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 80054a8:	2200      	movs	r2, #0
 80054aa:	4b03      	ldr	r3, [pc, #12]	; (80054b8 <ssd1306_Init+0xc4>)
 80054ac:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80054ae:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 80054b0:	3201      	adds	r2, #1
 80054b2:	711a      	strb	r2, [r3, #4]
}
 80054b4:	bd10      	pop	{r4, pc}
 80054b6:	46c0      	nop			; (mov r8, r8)
 80054b8:	20000058 	.word	0x20000058

080054bc <__libc_init_array>:
 80054bc:	b570      	push	{r4, r5, r6, lr}
 80054be:	2600      	movs	r6, #0
 80054c0:	4d0c      	ldr	r5, [pc, #48]	; (80054f4 <__libc_init_array+0x38>)
 80054c2:	4c0d      	ldr	r4, [pc, #52]	; (80054f8 <__libc_init_array+0x3c>)
 80054c4:	1b64      	subs	r4, r4, r5
 80054c6:	10a4      	asrs	r4, r4, #2
 80054c8:	42a6      	cmp	r6, r4
 80054ca:	d109      	bne.n	80054e0 <__libc_init_array+0x24>
 80054cc:	2600      	movs	r6, #0
 80054ce:	f000 f821 	bl	8005514 <_init>
 80054d2:	4d0a      	ldr	r5, [pc, #40]	; (80054fc <__libc_init_array+0x40>)
 80054d4:	4c0a      	ldr	r4, [pc, #40]	; (8005500 <__libc_init_array+0x44>)
 80054d6:	1b64      	subs	r4, r4, r5
 80054d8:	10a4      	asrs	r4, r4, #2
 80054da:	42a6      	cmp	r6, r4
 80054dc:	d105      	bne.n	80054ea <__libc_init_array+0x2e>
 80054de:	bd70      	pop	{r4, r5, r6, pc}
 80054e0:	00b3      	lsls	r3, r6, #2
 80054e2:	58eb      	ldr	r3, [r5, r3]
 80054e4:	4798      	blx	r3
 80054e6:	3601      	adds	r6, #1
 80054e8:	e7ee      	b.n	80054c8 <__libc_init_array+0xc>
 80054ea:	00b3      	lsls	r3, r6, #2
 80054ec:	58eb      	ldr	r3, [r5, r3]
 80054ee:	4798      	blx	r3
 80054f0:	3601      	adds	r6, #1
 80054f2:	e7f2      	b.n	80054da <__libc_init_array+0x1e>
 80054f4:	08007e8c 	.word	0x08007e8c
 80054f8:	08007e8c 	.word	0x08007e8c
 80054fc:	08007e8c 	.word	0x08007e8c
 8005500:	08007e90 	.word	0x08007e90

08005504 <memset>:
 8005504:	0003      	movs	r3, r0
 8005506:	1882      	adds	r2, r0, r2
 8005508:	4293      	cmp	r3, r2
 800550a:	d100      	bne.n	800550e <memset+0xa>
 800550c:	4770      	bx	lr
 800550e:	7019      	strb	r1, [r3, #0]
 8005510:	3301      	adds	r3, #1
 8005512:	e7f9      	b.n	8005508 <memset+0x4>

08005514 <_init>:
 8005514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005516:	46c0      	nop			; (mov r8, r8)
 8005518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800551a:	bc08      	pop	{r3}
 800551c:	469e      	mov	lr, r3
 800551e:	4770      	bx	lr

08005520 <_fini>:
 8005520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005522:	46c0      	nop			; (mov r8, r8)
 8005524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005526:	bc08      	pop	{r3}
 8005528:	469e      	mov	lr, r3
 800552a:	4770      	bx	lr
